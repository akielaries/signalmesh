
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080003b9 	.word	0x080003b9
 8000008:	080003bb 	.word	0x080003bb
 800000c:	080003bb 	.word	0x080003bb
 8000010:	080003bb 	.word	0x080003bb
 8000014:	080003bb 	.word	0x080003bb
 8000018:	080003bb 	.word	0x080003bb
 800001c:	080003bb 	.word	0x080003bb
 8000020:	080003bb 	.word	0x080003bb
 8000024:	080003bb 	.word	0x080003bb
 8000028:	080003bb 	.word	0x080003bb
 800002c:	08004571 	.word	0x08004571
 8000030:	080003bb 	.word	0x080003bb
 8000034:	080003bb 	.word	0x080003bb
 8000038:	080003bb 	.word	0x080003bb
 800003c:	080003bb 	.word	0x080003bb
 8000040:	080003bb 	.word	0x080003bb
 8000044:	080003bb 	.word	0x080003bb
 8000048:	080003bb 	.word	0x080003bb
 800004c:	080003bb 	.word	0x080003bb
 8000050:	080003bb 	.word	0x080003bb
 8000054:	080003bb 	.word	0x080003bb
 8000058:	080003bb 	.word	0x080003bb
 800005c:	080003bb 	.word	0x080003bb
 8000060:	080003bb 	.word	0x080003bb
 8000064:	080003bb 	.word	0x080003bb
 8000068:	080003bb 	.word	0x080003bb
 800006c:	08003911 	.word	0x08003911
 8000070:	08003981 	.word	0x08003981
 8000074:	080039f1 	.word	0x080039f1
 8000078:	08003a61 	.word	0x08003a61
 800007c:	08003ad1 	.word	0x08003ad1
 8000080:	08003b41 	.word	0x08003b41
 8000084:	08003bb1 	.word	0x08003bb1
 8000088:	080003bb 	.word	0x080003bb
 800008c:	080003bb 	.word	0x080003bb
 8000090:	080003bb 	.word	0x080003bb
 8000094:	080003bb 	.word	0x080003bb
 8000098:	080003bb 	.word	0x080003bb
 800009c:	080003bb 	.word	0x080003bb
 80000a0:	080003bb 	.word	0x080003bb
 80000a4:	080003bb 	.word	0x080003bb
 80000a8:	080003bb 	.word	0x080003bb
 80000ac:	080003bb 	.word	0x080003bb
 80000b0:	08003381 	.word	0x08003381
 80000b4:	080003bb 	.word	0x080003bb
 80000b8:	080003bb 	.word	0x080003bb
 80000bc:	080003bb 	.word	0x080003bb
 80000c0:	080003bb 	.word	0x080003bb
 80000c4:	080003bb 	.word	0x080003bb
 80000c8:	080003bb 	.word	0x080003bb
 80000cc:	08004011 	.word	0x08004011
 80000d0:	080003bb 	.word	0x080003bb
 80000d4:	080003bb 	.word	0x080003bb
 80000d8:	080003bb 	.word	0x080003bb
 80000dc:	080032c1 	.word	0x080032c1
 80000e0:	080003bb 	.word	0x080003bb
 80000e4:	080003bb 	.word	0x080003bb
 80000e8:	080003bb 	.word	0x080003bb
 80000ec:	080003bb 	.word	0x080003bb
 80000f0:	080003bb 	.word	0x080003bb
 80000f4:	080003bb 	.word	0x080003bb
 80000f8:	080003bb 	.word	0x080003bb
 80000fc:	08003c21 	.word	0x08003c21
 8000100:	080003bb 	.word	0x080003bb
 8000104:	080003bb 	.word	0x080003bb
 8000108:	080003bb 	.word	0x080003bb
 800010c:	080003bb 	.word	0x080003bb
 8000110:	080003bb 	.word	0x080003bb
 8000114:	08003321 	.word	0x08003321
 8000118:	080034f1 	.word	0x080034f1
 800011c:	080003bb 	.word	0x080003bb
 8000120:	08003c91 	.word	0x08003c91
 8000124:	08003d01 	.word	0x08003d01
 8000128:	08003d71 	.word	0x08003d71
 800012c:	08003de1 	.word	0x08003de1
 8000130:	08003e51 	.word	0x08003e51
 8000134:	080003bb 	.word	0x080003bb
 8000138:	080003bb 	.word	0x080003bb
 800013c:	080003bb 	.word	0x080003bb
 8000140:	080003bb 	.word	0x080003bb
 8000144:	080003bb 	.word	0x080003bb
 8000148:	080003bb 	.word	0x080003bb
 800014c:	080003bb 	.word	0x080003bb
 8000150:	08003ec1 	.word	0x08003ec1
 8000154:	08003f31 	.word	0x08003f31
 8000158:	08003fa1 	.word	0x08003fa1
 800015c:	080003bb 	.word	0x080003bb
 8000160:	080003bb 	.word	0x080003bb
 8000164:	080003bb 	.word	0x080003bb
 8000168:	080003bb 	.word	0x080003bb
 800016c:	080003bb 	.word	0x080003bb
 8000170:	080003bb 	.word	0x080003bb
 8000174:	080003bb 	.word	0x080003bb
 8000178:	080003bb 	.word	0x080003bb
 800017c:	080003bb 	.word	0x080003bb
 8000180:	080003bb 	.word	0x080003bb
 8000184:	080003bb 	.word	0x080003bb
 8000188:	080003bb 	.word	0x080003bb
 800018c:	080003bb 	.word	0x080003bb
 8000190:	080003bb 	.word	0x080003bb
 8000194:	080003bb 	.word	0x080003bb
 8000198:	08004081 	.word	0x08004081
 800019c:	080003bb 	.word	0x080003bb
 80001a0:	080003bb 	.word	0x080003bb
 80001a4:	080003bb 	.word	0x080003bb
 80001a8:	080003bb 	.word	0x080003bb
 80001ac:	080003bb 	.word	0x080003bb
 80001b0:	080003bb 	.word	0x080003bb
 80001b4:	080003bb 	.word	0x080003bb
 80001b8:	080003bb 	.word	0x080003bb
 80001bc:	080003bb 	.word	0x080003bb
 80001c0:	080003bb 	.word	0x080003bb
 80001c4:	080003bb 	.word	0x080003bb
 80001c8:	080003bb 	.word	0x080003bb
 80001cc:	080003bb 	.word	0x080003bb
 80001d0:	080003bb 	.word	0x080003bb
 80001d4:	080003bb 	.word	0x080003bb
 80001d8:	080003bb 	.word	0x080003bb
 80001dc:	080003bb 	.word	0x080003bb
 80001e0:	080003bb 	.word	0x080003bb
 80001e4:	080003bb 	.word	0x080003bb
 80001e8:	080003bb 	.word	0x080003bb
 80001ec:	080003bb 	.word	0x080003bb
 80001f0:	080003bb 	.word	0x080003bb
 80001f4:	080003bb 	.word	0x080003bb
 80001f8:	080003bb 	.word	0x080003bb
 80001fc:	080003bb 	.word	0x080003bb
 8000200:	080003bb 	.word	0x080003bb
 8000204:	080003bb 	.word	0x080003bb
 8000208:	080003bb 	.word	0x080003bb
 800020c:	080003bb 	.word	0x080003bb
 8000210:	080003bb 	.word	0x080003bb
 8000214:	080003bb 	.word	0x080003bb
 8000218:	080003bb 	.word	0x080003bb
 800021c:	080003bb 	.word	0x080003bb
 8000220:	080003bb 	.word	0x080003bb
 8000224:	080003bb 	.word	0x080003bb
 8000228:	080003bb 	.word	0x080003bb
 800022c:	080003bb 	.word	0x080003bb
 8000230:	080003bb 	.word	0x080003bb
 8000234:	080003bb 	.word	0x080003bb
 8000238:	080003bb 	.word	0x080003bb
 800023c:	080003bb 	.word	0x080003bb
 8000240:	080003bb 	.word	0x080003bb
 8000244:	08003591 	.word	0x08003591
 8000248:	08003601 	.word	0x08003601
 800024c:	08003671 	.word	0x08003671
 8000250:	080036e1 	.word	0x080036e1
 8000254:	08003751 	.word	0x08003751
 8000258:	080037c1 	.word	0x080037c1
 800025c:	08003831 	.word	0x08003831
 8000260:	080038a1 	.word	0x080038a1
 8000264:	080003bb 	.word	0x080003bb
 8000268:	080003bb 	.word	0x080003bb
 800026c:	080003bb 	.word	0x080003bb
 8000270:	080003bb 	.word	0x080003bb
 8000274:	080003bb 	.word	0x080003bb
 8000278:	080003bb 	.word	0x080003bb
 800027c:	080003bb 	.word	0x080003bb
 8000280:	080003bb 	.word	0x080003bb
 8000284:	080003bb 	.word	0x080003bb
 8000288:	080003bb 	.word	0x080003bb
 800028c:	080003bb 	.word	0x080003bb
 8000290:	080003bb 	.word	0x080003bb
 8000294:	080003bb 	.word	0x080003bb
 8000298:	080003bb 	.word	0x080003bb
 800029c:	080003bb 	.word	0x080003bb
 80002a0:	080003bb 	.word	0x080003bb
 80002a4:	080003bb 	.word	0x080003bb
 80002a8:	080003bb 	.word	0x080003bb
 80002ac:	080003bb 	.word	0x080003bb
 80002b0:	080003bb 	.word	0x080003bb
 80002b4:	080003bb 	.word	0x080003bb
 80002b8:	080003bb 	.word	0x080003bb
 80002bc:	080003bb 	.word	0x080003bb
 80002c0:	080003bb 	.word	0x080003bb
 80002c4:	080003bb 	.word	0x080003bb
 80002c8:	080003bb 	.word	0x080003bb
 80002cc:	080003bb 	.word	0x080003bb
 80002d0:	080003bb 	.word	0x080003bb
 80002d4:	080003bb 	.word	0x080003bb
 80002d8:	080003bb 	.word	0x080003bb
 80002dc:	080003bb 	.word	0x080003bb

Disassembly of section .text:

080002e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80002e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80002e2:	4826      	ldr	r0, [pc, #152]	@ (800037c <_crt0_entry+0x9c>)
                msr     MSP, r0
 80002e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80002e8:	4825      	ldr	r0, [pc, #148]	@ (8000380 <_crt0_entry+0xa0>)
                msr     PSP, r0
 80002ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 80002ee:	4825      	ldr	r0, [pc, #148]	@ (8000384 <_crt0_entry+0xa4>)
                ldr     r1, =SCB_VTOR
 80002f0:	4925      	ldr	r1, [pc, #148]	@ (8000388 <_crt0_entry+0xa8>)
                str     r0, [r1]
 80002f2:	6008      	str	r0, [r1, #0]
                movt    r1, #SCB_FPDSCR >> 16
                str     r0, [r1]
#endif

                /* CONTROL register initialization as configured.*/
                movs    r0, #CRT0_CONTROL_INIT
 80002f4:	2002      	movs	r0, #2
                msr     CONTROL, r0
 80002f6:	f380 8814 	msr	CONTROL, r0
                isb
 80002fa:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 80002fe:	f002 ff37 	bl	8003170 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000302:	f003 fef5 	bl	80040f0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000306:	f04f 3055 	mov.w	r0, #1431655765	@ 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 800030a:	4920      	ldr	r1, [pc, #128]	@ (800038c <_crt0_entry+0xac>)
                ldr     r2, =__main_stack_end__
 800030c:	4a1b      	ldr	r2, [pc, #108]	@ (800037c <_crt0_entry+0x9c>)
.Lmsloop:
                cmp     r1, r2
 800030e:	4291      	cmp	r1, r2
                itt     lo
 8000310:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000312:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     .Lmsloop
 8000316:	e7fa      	bcc.n	800030e <_crt0_entry+0x2e>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000318:	491d      	ldr	r1, [pc, #116]	@ (8000390 <_crt0_entry+0xb0>)
                ldr     r2, =__process_stack_end__
 800031a:	4a19      	ldr	r2, [pc, #100]	@ (8000380 <_crt0_entry+0xa0>)
.Lpsloop:
                cmp     r1, r2
 800031c:	4291      	cmp	r1, r2
                itt     lo
 800031e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000320:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     .Lpsloop
 8000324:	e7fa      	bcc.n	800031c <_crt0_entry+0x3c>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 8000326:	491b      	ldr	r1, [pc, #108]	@ (8000394 <_crt0_entry+0xb4>)
                ldr     r2, =__data_base__
 8000328:	4a1b      	ldr	r2, [pc, #108]	@ (8000398 <_crt0_entry+0xb8>)
                ldr     r3, =__data_end__
 800032a:	4b1c      	ldr	r3, [pc, #112]	@ (800039c <_crt0_entry+0xbc>)
.Ldloop:
                cmp     r2, r3
 800032c:	429a      	cmp	r2, r3
                ittt    lo
 800032e:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000330:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 8000334:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     .Ldloop
 8000338:	e7f8      	bcc.n	800032c <_crt0_entry+0x4c>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 800033a:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 800033c:	4918      	ldr	r1, [pc, #96]	@ (80003a0 <_crt0_entry+0xc0>)
                ldr     r2, =__bss_end__
 800033e:	4a19      	ldr	r2, [pc, #100]	@ (80003a4 <_crt0_entry+0xc4>)
.Lbloop:
                cmp     r1, r2
 8000340:	4291      	cmp	r1, r2
                itt     lo
 8000342:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000344:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     .Lbloop
 8000348:	e7fa      	bcc.n	8000340 <_crt0_entry+0x60>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 800034a:	f002 ff61 	bl	8003210 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 800034e:	f002 ff4f 	bl	80031f0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000352:	4c15      	ldr	r4, [pc, #84]	@ (80003a8 <_crt0_entry+0xc8>)
                ldr     r5, =__init_array_end__
 8000354:	4d15      	ldr	r5, [pc, #84]	@ (80003ac <_crt0_entry+0xcc>)
.Linitloop:
                cmp     r4, r5
 8000356:	42ac      	cmp	r4, r5
                bge     .Lendinitloop
 8000358:	da03      	bge.n	8000362 <_crt0_entry+0x82>
                ldr     r1, [r4], #4
 800035a:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 800035e:	4788      	blx	r1
                b       .Linitloop
 8000360:	e7f9      	b.n	8000356 <_crt0_entry+0x76>
.Lendinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000362:	f004 f915 	bl	8004590 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 8000366:	4c12      	ldr	r4, [pc, #72]	@ (80003b0 <_crt0_entry+0xd0>)
                ldr     r5, =__fini_array_end__
 8000368:	4d12      	ldr	r5, [pc, #72]	@ (80003b4 <_crt0_entry+0xd4>)
.Lfiniloop:
                cmp     r4, r5
 800036a:	42ac      	cmp	r4, r5
                bge     .Lendfiniloop
 800036c:	da03      	bge.n	8000376 <_crt0_entry+0x96>
                ldr     r1, [r4], #4
 800036e:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000372:	4788      	blx	r1
                b       .Lfiniloop
 8000374:	e7f9      	b.n	800036a <_crt0_entry+0x8a>
.Lendfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 8000376:	f002 bf43 	b.w	8003200 <__default_exit>
 800037a:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 800037c:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000380:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000384:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 8000388:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 800038c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000390:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000394:	08005464 	.word	0x08005464
                ldr     r2, =__data_base__
 8000398:	24000000 	.word	0x24000000
                ldr     r3, =__data_end__
 800039c:	24000000 	.word	0x24000000
                ldr     r1, =__bss_base__
 80003a0:	24000000 	.word	0x24000000
                ldr     r2, =__bss_end__
 80003a4:	240005e0 	.word	0x240005e0
                ldr     r4, =__init_array_base__
 80003a8:	080002e0 	.word	0x080002e0
                ldr     r5, =__init_array_end__
 80003ac:	080002e0 	.word	0x080002e0
                ldr     r4, =__fini_array_base__
 80003b0:	080002e0 	.word	0x080002e0
                ldr     r5, =__fini_array_end__
 80003b4:	080002e0 	.word	0x080002e0

080003b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80003b8:	e792      	b.n	80002e0 <_crt0_entry>

080003ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80003ba:	f000 f800 	bl	80003be <_unhandled_exception>

080003be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80003be:	e7fe      	b.n	80003be <_unhandled_exception>

080003c0 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80003c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                /* Saving FPU context.*/
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80003c4:	f8c1 d00c 	str.w	sp, [r1, #12]
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
                mov     sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
 80003c8:	f8d0 d00c 	ldr.w	sp, [r0, #12]

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80003cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080003d0 <__port_thread_start>:
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80003d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80003d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80003d6:	4628      	mov	r0, r5
                blx     r4
 80003d8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80003da:	2000      	movs	r0, #0
                bl      chThdExit
 80003dc:	f004 f888 	bl	80044f0 <chThdExit>
1:              b       1b
 80003e0:	e7fe      	b.n	80003e0 <__port_thread_start+0x10>

080003e2 <__port_switch_from_isr>:
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
#endif
                bl      chSchDoPreemption
 80003e2:	f004 f865 	bl	80044b0 <chSchDoPreemption>

080003e6 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80003e6:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
1:              b       1b
 80003e8:	e7fe      	b.n	80003e8 <__port_exit_from_isr+0x2>
	...

080003ec <sinf>:
 80003ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000458 <sinf+0x6c>)
 80003ee:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d91a      	bls.n	800042c <sinf+0x40>
 80003f6:	b500      	push	{lr}
 80003f8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80003fc:	b083      	sub	sp, #12
 80003fe:	d305      	bcc.n	800040c <sinf+0x20>
 8000400:	4601      	mov	r1, r0
 8000402:	f000 ffbb 	bl	800137c <__aeabi_fsub>
 8000406:	b003      	add	sp, #12
 8000408:	f85d fb04 	ldr.w	pc, [sp], #4
 800040c:	4669      	mov	r1, sp
 800040e:	f000 f89b 	bl	8000548 <__ieee754_rem_pio2f>
 8000412:	f000 0003 	and.w	r0, r0, #3
 8000416:	2801      	cmp	r0, #1
 8000418:	9901      	ldr	r1, [sp, #4]
 800041a:	d012      	beq.n	8000442 <sinf+0x56>
 800041c:	2802      	cmp	r0, #2
 800041e:	d009      	beq.n	8000434 <sinf+0x48>
 8000420:	b998      	cbnz	r0, 800044a <sinf+0x5e>
 8000422:	9800      	ldr	r0, [sp, #0]
 8000424:	2201      	movs	r2, #1
 8000426:	f000 f819 	bl	800045c <__kernel_sinf>
 800042a:	e7ec      	b.n	8000406 <sinf+0x1a>
 800042c:	2100      	movs	r1, #0
 800042e:	2200      	movs	r2, #0
 8000430:	f000 b814 	b.w	800045c <__kernel_sinf>
 8000434:	9800      	ldr	r0, [sp, #0]
 8000436:	2201      	movs	r2, #1
 8000438:	f000 f810 	bl	800045c <__kernel_sinf>
 800043c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8000440:	e7e1      	b.n	8000406 <sinf+0x1a>
 8000442:	9800      	ldr	r0, [sp, #0]
 8000444:	f000 fdda 	bl	8000ffc <__kernel_cosf>
 8000448:	e7dd      	b.n	8000406 <sinf+0x1a>
 800044a:	9800      	ldr	r0, [sp, #0]
 800044c:	f000 fdd6 	bl	8000ffc <__kernel_cosf>
 8000450:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8000454:	e7d7      	b.n	8000406 <sinf+0x1a>
 8000456:	bf00      	nop
 8000458:	3f490fd8 	.word	0x3f490fd8

0800045c <__kernel_sinf>:
 800045c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000460:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8000464:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8000468:	4604      	mov	r4, r0
 800046a:	460e      	mov	r6, r1
 800046c:	4690      	mov	r8, r2
 800046e:	d203      	bcs.n	8000478 <__kernel_sinf+0x1c>
 8000470:	f001 f904 	bl	800167c <__aeabi_f2iz>
 8000474:	2800      	cmp	r0, #0
 8000476:	d058      	beq.n	800052a <__kernel_sinf+0xce>
 8000478:	4621      	mov	r1, r4
 800047a:	4620      	mov	r0, r4
 800047c:	f000 fec6 	bl	800120c <__aeabi_fmul>
 8000480:	4605      	mov	r5, r0
 8000482:	4601      	mov	r1, r0
 8000484:	4620      	mov	r0, r4
 8000486:	f000 fec1 	bl	800120c <__aeabi_fmul>
 800048a:	4929      	ldr	r1, [pc, #164]	@ (8000530 <__kernel_sinf+0xd4>)
 800048c:	4681      	mov	r9, r0
 800048e:	4628      	mov	r0, r5
 8000490:	f000 febc 	bl	800120c <__aeabi_fmul>
 8000494:	4927      	ldr	r1, [pc, #156]	@ (8000534 <__kernel_sinf+0xd8>)
 8000496:	f000 ff71 	bl	800137c <__aeabi_fsub>
 800049a:	4629      	mov	r1, r5
 800049c:	f000 feb6 	bl	800120c <__aeabi_fmul>
 80004a0:	4925      	ldr	r1, [pc, #148]	@ (8000538 <__kernel_sinf+0xdc>)
 80004a2:	f000 ff6d 	bl	8001380 <__addsf3>
 80004a6:	4629      	mov	r1, r5
 80004a8:	f000 feb0 	bl	800120c <__aeabi_fmul>
 80004ac:	4923      	ldr	r1, [pc, #140]	@ (800053c <__kernel_sinf+0xe0>)
 80004ae:	f000 ff65 	bl	800137c <__aeabi_fsub>
 80004b2:	4629      	mov	r1, r5
 80004b4:	f000 feaa 	bl	800120c <__aeabi_fmul>
 80004b8:	4921      	ldr	r1, [pc, #132]	@ (8000540 <__kernel_sinf+0xe4>)
 80004ba:	f000 ff61 	bl	8001380 <__addsf3>
 80004be:	4607      	mov	r7, r0
 80004c0:	f1b8 0f00 	cmp.w	r8, #0
 80004c4:	d022      	beq.n	800050c <__kernel_sinf+0xb0>
 80004c6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80004ca:	4630      	mov	r0, r6
 80004cc:	f000 fe9e 	bl	800120c <__aeabi_fmul>
 80004d0:	4639      	mov	r1, r7
 80004d2:	4680      	mov	r8, r0
 80004d4:	4648      	mov	r0, r9
 80004d6:	f000 fe99 	bl	800120c <__aeabi_fmul>
 80004da:	4601      	mov	r1, r0
 80004dc:	4640      	mov	r0, r8
 80004de:	f000 ff4d 	bl	800137c <__aeabi_fsub>
 80004e2:	4629      	mov	r1, r5
 80004e4:	f000 fe92 	bl	800120c <__aeabi_fmul>
 80004e8:	4631      	mov	r1, r6
 80004ea:	f000 ff47 	bl	800137c <__aeabi_fsub>
 80004ee:	4915      	ldr	r1, [pc, #84]	@ (8000544 <__kernel_sinf+0xe8>)
 80004f0:	4605      	mov	r5, r0
 80004f2:	4648      	mov	r0, r9
 80004f4:	f000 fe8a 	bl	800120c <__aeabi_fmul>
 80004f8:	4601      	mov	r1, r0
 80004fa:	4628      	mov	r0, r5
 80004fc:	f000 ff40 	bl	8001380 <__addsf3>
 8000500:	4601      	mov	r1, r0
 8000502:	4620      	mov	r0, r4
 8000504:	f000 ff3a 	bl	800137c <__aeabi_fsub>
 8000508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800050c:	4601      	mov	r1, r0
 800050e:	4628      	mov	r0, r5
 8000510:	f000 fe7c 	bl	800120c <__aeabi_fmul>
 8000514:	490b      	ldr	r1, [pc, #44]	@ (8000544 <__kernel_sinf+0xe8>)
 8000516:	f000 ff31 	bl	800137c <__aeabi_fsub>
 800051a:	4649      	mov	r1, r9
 800051c:	f000 fe76 	bl	800120c <__aeabi_fmul>
 8000520:	4621      	mov	r1, r4
 8000522:	f000 ff2d 	bl	8001380 <__addsf3>
 8000526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800052a:	4620      	mov	r0, r4
 800052c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000530:	2f2ec9d3 	.word	0x2f2ec9d3
 8000534:	32d72f34 	.word	0x32d72f34
 8000538:	3638ef1b 	.word	0x3638ef1b
 800053c:	39500d01 	.word	0x39500d01
 8000540:	3c088889 	.word	0x3c088889
 8000544:	3e2aaaab 	.word	0x3e2aaaab

08000548 <__ieee754_rem_pio2f>:
 8000548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800054c:	4aa6      	ldr	r2, [pc, #664]	@ (80007e8 <__ieee754_rem_pio2f+0x2a0>)
 800054e:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8000552:	4295      	cmp	r5, r2
 8000554:	b089      	sub	sp, #36	@ 0x24
 8000556:	460c      	mov	r4, r1
 8000558:	d96f      	bls.n	800063a <__ieee754_rem_pio2f+0xf2>
 800055a:	4aa4      	ldr	r2, [pc, #656]	@ (80007ec <__ieee754_rem_pio2f+0x2a4>)
 800055c:	4295      	cmp	r5, r2
 800055e:	4606      	mov	r6, r0
 8000560:	d81f      	bhi.n	80005a2 <__ieee754_rem_pio2f+0x5a>
 8000562:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8000566:	2800      	cmp	r0, #0
 8000568:	49a1      	ldr	r1, [pc, #644]	@ (80007f0 <__ieee754_rem_pio2f+0x2a8>)
 800056a:	f025 050f 	bic.w	r5, r5, #15
 800056e:	f340 8114 	ble.w	800079a <__ieee754_rem_pio2f+0x252>
 8000572:	f000 ff03 	bl	800137c <__aeabi_fsub>
 8000576:	4b9f      	ldr	r3, [pc, #636]	@ (80007f4 <__ieee754_rem_pio2f+0x2ac>)
 8000578:	429d      	cmp	r5, r3
 800057a:	4606      	mov	r6, r0
 800057c:	d068      	beq.n	8000650 <__ieee754_rem_pio2f+0x108>
 800057e:	499e      	ldr	r1, [pc, #632]	@ (80007f8 <__ieee754_rem_pio2f+0x2b0>)
 8000580:	f000 fefc 	bl	800137c <__aeabi_fsub>
 8000584:	4601      	mov	r1, r0
 8000586:	4605      	mov	r5, r0
 8000588:	4630      	mov	r0, r6
 800058a:	f000 fef7 	bl	800137c <__aeabi_fsub>
 800058e:	499a      	ldr	r1, [pc, #616]	@ (80007f8 <__ieee754_rem_pio2f+0x2b0>)
 8000590:	f000 fef4 	bl	800137c <__aeabi_fsub>
 8000594:	6025      	str	r5, [r4, #0]
 8000596:	6060      	str	r0, [r4, #4]
 8000598:	2701      	movs	r7, #1
 800059a:	4638      	mov	r0, r7
 800059c:	b009      	add	sp, #36	@ 0x24
 800059e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a2:	4a96      	ldr	r2, [pc, #600]	@ (80007fc <__ieee754_rem_pio2f+0x2b4>)
 80005a4:	4295      	cmp	r5, r2
 80005a6:	d963      	bls.n	8000670 <__ieee754_rem_pio2f+0x128>
 80005a8:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80005ac:	d24a      	bcs.n	8000644 <__ieee754_rem_pio2f+0xfc>
 80005ae:	15ef      	asrs	r7, r5, #23
 80005b0:	3f86      	subs	r7, #134	@ 0x86
 80005b2:	eba5 55c7 	sub.w	r5, r5, r7, lsl #23
 80005b6:	4628      	mov	r0, r5
 80005b8:	f001 f860 	bl	800167c <__aeabi_f2iz>
 80005bc:	f000 ff94 	bl	80014e8 <__aeabi_i2f>
 80005c0:	4601      	mov	r1, r0
 80005c2:	4628      	mov	r0, r5
 80005c4:	9105      	str	r1, [sp, #20]
 80005c6:	f000 fed9 	bl	800137c <__aeabi_fsub>
 80005ca:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80005ce:	f000 fe1d 	bl	800120c <__aeabi_fmul>
 80005d2:	4680      	mov	r8, r0
 80005d4:	f001 f852 	bl	800167c <__aeabi_f2iz>
 80005d8:	f000 ff86 	bl	80014e8 <__aeabi_i2f>
 80005dc:	4605      	mov	r5, r0
 80005de:	4629      	mov	r1, r5
 80005e0:	4640      	mov	r0, r8
 80005e2:	9506      	str	r5, [sp, #24]
 80005e4:	f000 feca 	bl	800137c <__aeabi_fsub>
 80005e8:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80005ec:	f000 fe0e 	bl	800120c <__aeabi_fmul>
 80005f0:	2100      	movs	r1, #0
 80005f2:	9007      	str	r0, [sp, #28]
 80005f4:	f001 f810 	bl	8001618 <__aeabi_fcmpeq>
 80005f8:	2800      	cmp	r0, #0
 80005fa:	f000 80ca 	beq.w	8000792 <__ieee754_rem_pio2f+0x24a>
 80005fe:	2100      	movs	r1, #0
 8000600:	4628      	mov	r0, r5
 8000602:	f001 f809 	bl	8001618 <__aeabi_fcmpeq>
 8000606:	2800      	cmp	r0, #0
 8000608:	bf14      	ite	ne
 800060a:	2301      	movne	r3, #1
 800060c:	2302      	moveq	r3, #2
 800060e:	4a7c      	ldr	r2, [pc, #496]	@ (8000800 <__ieee754_rem_pio2f+0x2b8>)
 8000610:	9201      	str	r2, [sp, #4]
 8000612:	2202      	movs	r2, #2
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	4621      	mov	r1, r4
 8000618:	463a      	mov	r2, r7
 800061a:	a805      	add	r0, sp, #20
 800061c:	f000 f902 	bl	8000824 <__kernel_rem_pio2f>
 8000620:	2e00      	cmp	r6, #0
 8000622:	4607      	mov	r7, r0
 8000624:	dab9      	bge.n	800059a <__ieee754_rem_pio2f+0x52>
 8000626:	e9d4 2300 	ldrd	r2, r3, [r4]
 800062a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800062e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000632:	6022      	str	r2, [r4, #0]
 8000634:	6063      	str	r3, [r4, #4]
 8000636:	4247      	negs	r7, r0
 8000638:	e7af      	b.n	800059a <__ieee754_rem_pio2f+0x52>
 800063a:	2200      	movs	r2, #0
 800063c:	6020      	str	r0, [r4, #0]
 800063e:	604a      	str	r2, [r1, #4]
 8000640:	2700      	movs	r7, #0
 8000642:	e7aa      	b.n	800059a <__ieee754_rem_pio2f+0x52>
 8000644:	4601      	mov	r1, r0
 8000646:	f000 fe99 	bl	800137c <__aeabi_fsub>
 800064a:	6060      	str	r0, [r4, #4]
 800064c:	6020      	str	r0, [r4, #0]
 800064e:	e7f7      	b.n	8000640 <__ieee754_rem_pio2f+0xf8>
 8000650:	496c      	ldr	r1, [pc, #432]	@ (8000804 <__ieee754_rem_pio2f+0x2bc>)
 8000652:	f000 fe93 	bl	800137c <__aeabi_fsub>
 8000656:	496c      	ldr	r1, [pc, #432]	@ (8000808 <__ieee754_rem_pio2f+0x2c0>)
 8000658:	4606      	mov	r6, r0
 800065a:	f000 fe8f 	bl	800137c <__aeabi_fsub>
 800065e:	4601      	mov	r1, r0
 8000660:	4605      	mov	r5, r0
 8000662:	4630      	mov	r0, r6
 8000664:	f000 fe8a 	bl	800137c <__aeabi_fsub>
 8000668:	4967      	ldr	r1, [pc, #412]	@ (8000808 <__ieee754_rem_pio2f+0x2c0>)
 800066a:	f000 fe87 	bl	800137c <__aeabi_fsub>
 800066e:	e791      	b.n	8000594 <__ieee754_rem_pio2f+0x4c>
 8000670:	f000 f8d4 	bl	800081c <fabsf>
 8000674:	4965      	ldr	r1, [pc, #404]	@ (800080c <__ieee754_rem_pio2f+0x2c4>)
 8000676:	4680      	mov	r8, r0
 8000678:	f000 fdc8 	bl	800120c <__aeabi_fmul>
 800067c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000680:	f000 fe7e 	bl	8001380 <__addsf3>
 8000684:	f000 fffa 	bl	800167c <__aeabi_f2iz>
 8000688:	4607      	mov	r7, r0
 800068a:	f000 ff2d 	bl	80014e8 <__aeabi_i2f>
 800068e:	4958      	ldr	r1, [pc, #352]	@ (80007f0 <__ieee754_rem_pio2f+0x2a8>)
 8000690:	4683      	mov	fp, r0
 8000692:	f000 fdbb 	bl	800120c <__aeabi_fmul>
 8000696:	4601      	mov	r1, r0
 8000698:	4640      	mov	r0, r8
 800069a:	f000 fe6f 	bl	800137c <__aeabi_fsub>
 800069e:	4956      	ldr	r1, [pc, #344]	@ (80007f8 <__ieee754_rem_pio2f+0x2b0>)
 80006a0:	4682      	mov	sl, r0
 80006a2:	4658      	mov	r0, fp
 80006a4:	f000 fdb2 	bl	800120c <__aeabi_fmul>
 80006a8:	2f1f      	cmp	r7, #31
 80006aa:	4681      	mov	r9, r0
 80006ac:	4601      	mov	r1, r0
 80006ae:	4650      	mov	r0, sl
 80006b0:	dc22      	bgt.n	80006f8 <__ieee754_rem_pio2f+0x1b0>
 80006b2:	4b57      	ldr	r3, [pc, #348]	@ (8000810 <__ieee754_rem_pio2f+0x2c8>)
 80006b4:	1e7a      	subs	r2, r7, #1
 80006b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006ba:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80006be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d018      	beq.n	80006f8 <__ieee754_rem_pio2f+0x1b0>
 80006c6:	f000 fe59 	bl	800137c <__aeabi_fsub>
 80006ca:	4680      	mov	r8, r0
 80006cc:	4641      	mov	r1, r8
 80006ce:	f8c4 8000 	str.w	r8, [r4]
 80006d2:	4650      	mov	r0, sl
 80006d4:	f000 fe52 	bl	800137c <__aeabi_fsub>
 80006d8:	4649      	mov	r1, r9
 80006da:	f000 fe4f 	bl	800137c <__aeabi_fsub>
 80006de:	2e00      	cmp	r6, #0
 80006e0:	6060      	str	r0, [r4, #4]
 80006e2:	f6bf af5a 	bge.w	800059a <__ieee754_rem_pio2f+0x52>
 80006e6:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 80006ea:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80006ee:	f8c4 8000 	str.w	r8, [r4]
 80006f2:	6060      	str	r0, [r4, #4]
 80006f4:	427f      	negs	r7, r7
 80006f6:	e750      	b.n	800059a <__ieee754_rem_pio2f+0x52>
 80006f8:	f000 fe40 	bl	800137c <__aeabi_fsub>
 80006fc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8000700:	ebc3 53d5 	rsb	r3, r3, r5, lsr #23
 8000704:	15ea      	asrs	r2, r5, #23
 8000706:	2b08      	cmp	r3, #8
 8000708:	4680      	mov	r8, r0
 800070a:	9203      	str	r2, [sp, #12]
 800070c:	ddde      	ble.n	80006cc <__ieee754_rem_pio2f+0x184>
 800070e:	493d      	ldr	r1, [pc, #244]	@ (8000804 <__ieee754_rem_pio2f+0x2bc>)
 8000710:	4658      	mov	r0, fp
 8000712:	f000 fd7b 	bl	800120c <__aeabi_fmul>
 8000716:	4680      	mov	r8, r0
 8000718:	4601      	mov	r1, r0
 800071a:	4650      	mov	r0, sl
 800071c:	f000 fe2e 	bl	800137c <__aeabi_fsub>
 8000720:	4605      	mov	r5, r0
 8000722:	4629      	mov	r1, r5
 8000724:	4650      	mov	r0, sl
 8000726:	f000 fe29 	bl	800137c <__aeabi_fsub>
 800072a:	4641      	mov	r1, r8
 800072c:	f000 fe26 	bl	800137c <__aeabi_fsub>
 8000730:	4935      	ldr	r1, [pc, #212]	@ (8000808 <__ieee754_rem_pio2f+0x2c0>)
 8000732:	4680      	mov	r8, r0
 8000734:	4658      	mov	r0, fp
 8000736:	f000 fd69 	bl	800120c <__aeabi_fmul>
 800073a:	4641      	mov	r1, r8
 800073c:	f000 fe1e 	bl	800137c <__aeabi_fsub>
 8000740:	4601      	mov	r1, r0
 8000742:	4681      	mov	r9, r0
 8000744:	4628      	mov	r0, r5
 8000746:	f000 fe19 	bl	800137c <__aeabi_fsub>
 800074a:	9a03      	ldr	r2, [sp, #12]
 800074c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8000750:	1ad2      	subs	r2, r2, r3
 8000752:	2a19      	cmp	r2, #25
 8000754:	4680      	mov	r8, r0
 8000756:	dd1e      	ble.n	8000796 <__ieee754_rem_pio2f+0x24e>
 8000758:	492e      	ldr	r1, [pc, #184]	@ (8000814 <__ieee754_rem_pio2f+0x2cc>)
 800075a:	4658      	mov	r0, fp
 800075c:	f000 fd56 	bl	800120c <__aeabi_fmul>
 8000760:	4601      	mov	r1, r0
 8000762:	4680      	mov	r8, r0
 8000764:	4628      	mov	r0, r5
 8000766:	f000 fe09 	bl	800137c <__aeabi_fsub>
 800076a:	4682      	mov	sl, r0
 800076c:	4651      	mov	r1, sl
 800076e:	4628      	mov	r0, r5
 8000770:	f000 fe04 	bl	800137c <__aeabi_fsub>
 8000774:	4641      	mov	r1, r8
 8000776:	f000 fe01 	bl	800137c <__aeabi_fsub>
 800077a:	4927      	ldr	r1, [pc, #156]	@ (8000818 <__ieee754_rem_pio2f+0x2d0>)
 800077c:	4605      	mov	r5, r0
 800077e:	4658      	mov	r0, fp
 8000780:	f000 fd44 	bl	800120c <__aeabi_fmul>
 8000784:	4629      	mov	r1, r5
 8000786:	f000 fdf9 	bl	800137c <__aeabi_fsub>
 800078a:	4681      	mov	r9, r0
 800078c:	4601      	mov	r1, r0
 800078e:	4650      	mov	r0, sl
 8000790:	e799      	b.n	80006c6 <__ieee754_rem_pio2f+0x17e>
 8000792:	2303      	movs	r3, #3
 8000794:	e73b      	b.n	800060e <__ieee754_rem_pio2f+0xc6>
 8000796:	46aa      	mov	sl, r5
 8000798:	e798      	b.n	80006cc <__ieee754_rem_pio2f+0x184>
 800079a:	f000 fdf1 	bl	8001380 <__addsf3>
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <__ieee754_rem_pio2f+0x2ac>)
 80007a0:	429d      	cmp	r5, r3
 80007a2:	4606      	mov	r6, r0
 80007a4:	d00f      	beq.n	80007c6 <__ieee754_rem_pio2f+0x27e>
 80007a6:	4914      	ldr	r1, [pc, #80]	@ (80007f8 <__ieee754_rem_pio2f+0x2b0>)
 80007a8:	f000 fdea 	bl	8001380 <__addsf3>
 80007ac:	4601      	mov	r1, r0
 80007ae:	4605      	mov	r5, r0
 80007b0:	4630      	mov	r0, r6
 80007b2:	f000 fde3 	bl	800137c <__aeabi_fsub>
 80007b6:	4910      	ldr	r1, [pc, #64]	@ (80007f8 <__ieee754_rem_pio2f+0x2b0>)
 80007b8:	f000 fde2 	bl	8001380 <__addsf3>
 80007bc:	6025      	str	r5, [r4, #0]
 80007be:	6060      	str	r0, [r4, #4]
 80007c0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80007c4:	e6e9      	b.n	800059a <__ieee754_rem_pio2f+0x52>
 80007c6:	490f      	ldr	r1, [pc, #60]	@ (8000804 <__ieee754_rem_pio2f+0x2bc>)
 80007c8:	f000 fdda 	bl	8001380 <__addsf3>
 80007cc:	490e      	ldr	r1, [pc, #56]	@ (8000808 <__ieee754_rem_pio2f+0x2c0>)
 80007ce:	4606      	mov	r6, r0
 80007d0:	f000 fdd6 	bl	8001380 <__addsf3>
 80007d4:	4601      	mov	r1, r0
 80007d6:	4605      	mov	r5, r0
 80007d8:	4630      	mov	r0, r6
 80007da:	f000 fdcf 	bl	800137c <__aeabi_fsub>
 80007de:	490a      	ldr	r1, [pc, #40]	@ (8000808 <__ieee754_rem_pio2f+0x2c0>)
 80007e0:	f000 fdce 	bl	8001380 <__addsf3>
 80007e4:	e7ea      	b.n	80007bc <__ieee754_rem_pio2f+0x274>
 80007e6:	bf00      	nop
 80007e8:	3f490fd8 	.word	0x3f490fd8
 80007ec:	4016cbe3 	.word	0x4016cbe3
 80007f0:	3fc90f80 	.word	0x3fc90f80
 80007f4:	3fc90fd0 	.word	0x3fc90fd0
 80007f8:	37354443 	.word	0x37354443
 80007fc:	43490f80 	.word	0x43490f80
 8000800:	08004e2c 	.word	0x08004e2c
 8000804:	37354400 	.word	0x37354400
 8000808:	2e85a308 	.word	0x2e85a308
 800080c:	3f22f984 	.word	0x3f22f984
 8000810:	08004dac 	.word	0x08004dac
 8000814:	2e85a300 	.word	0x2e85a300
 8000818:	248d3132 	.word	0x248d3132

0800081c <fabsf>:
 800081c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop

08000824 <__kernel_rem_pio2f>:
 8000824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000828:	b0dd      	sub	sp, #372	@ 0x174
 800082a:	469e      	mov	lr, r3
 800082c:	4693      	mov	fp, r2
 800082e:	4bc1      	ldr	r3, [pc, #772]	@ (8000b34 <__kernel_rem_pio2f+0x310>)
 8000830:	9a66      	ldr	r2, [sp, #408]	@ 0x198
 8000832:	9109      	str	r1, [sp, #36]	@ 0x24
 8000834:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8000838:	f11b 0f04 	cmn.w	fp, #4
 800083c:	f10e 33ff 	add.w	r3, lr, #4294967295	@ 0xffffffff
 8000840:	4680      	mov	r8, r0
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	f2c0 82b3 	blt.w	8000dae <__kernel_rem_pio2f+0x58a>
 8000848:	f1bb 0303 	subs.w	r3, fp, #3
 800084c:	bf48      	it	mi
 800084e:	f10b 0304 	addmi.w	r3, fp, #4
 8000852:	10db      	asrs	r3, r3, #3
 8000854:	9306      	str	r3, [sp, #24]
 8000856:	3301      	adds	r3, #1
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	930a      	str	r3, [sp, #40]	@ 0x28
 800085c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800085e:	9a06      	ldr	r2, [sp, #24]
 8000860:	ebab 0303 	sub.w	r3, fp, r3
 8000864:	9303      	str	r3, [sp, #12]
 8000866:	f10e 33ff 	add.w	r3, lr, #4294967295	@ 0xffffffff
 800086a:	eb1a 0703 	adds.w	r7, sl, r3
 800086e:	eba2 0503 	sub.w	r5, r2, r3
 8000872:	d41e      	bmi.n	80008b2 <__kernel_rem_pio2f+0x8e>
 8000874:	3701      	adds	r7, #1
 8000876:	442f      	add	r7, r5
 8000878:	ae20      	add	r6, sp, #128	@ 0x80
 800087a:	463b      	mov	r3, r7
 800087c:	f8dd 919c 	ldr.w	r9, [sp, #412]	@ 0x19c
 8000880:	f8cd e000 	str.w	lr, [sp]
 8000884:	4637      	mov	r7, r6
 8000886:	2400      	movs	r4, #0
 8000888:	461e      	mov	r6, r3
 800088a:	e008      	b.n	800089e <__kernel_rem_pio2f+0x7a>
 800088c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8000890:	f000 fe2a 	bl	80014e8 <__aeabi_i2f>
 8000894:	3501      	adds	r5, #1
 8000896:	42b5      	cmp	r5, r6
 8000898:	f847 0b04 	str.w	r0, [r7], #4
 800089c:	d007      	beq.n	80008ae <__kernel_rem_pio2f+0x8a>
 800089e:	2d00      	cmp	r5, #0
 80008a0:	daf4      	bge.n	800088c <__kernel_rem_pio2f+0x68>
 80008a2:	3501      	adds	r5, #1
 80008a4:	4620      	mov	r0, r4
 80008a6:	42b5      	cmp	r5, r6
 80008a8:	f847 0b04 	str.w	r0, [r7], #4
 80008ac:	d1f7      	bne.n	800089e <__kernel_rem_pio2f+0x7a>
 80008ae:	f8dd e000 	ldr.w	lr, [sp]
 80008b2:	f1a8 0304 	sub.w	r3, r8, #4
 80008b6:	f1ba 0f00 	cmp.w	sl, #0
 80008ba:	9302      	str	r3, [sp, #8]
 80008bc:	bfb8      	it	lt
 80008be:	ea4f 088e 	movlt.w	r8, lr, lsl #2
 80008c2:	db37      	blt.n	8000934 <__kernel_rem_pio2f+0x110>
 80008c4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80008c8:	f8cd a010 	str.w	sl, [sp, #16]
 80008cc:	aa20      	add	r2, sp, #128	@ 0x80
 80008ce:	ea4f 088e 	mov.w	r8, lr, lsl #2
 80008d2:	eb0a 010e 	add.w	r1, sl, lr
 80008d6:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 80008da:	ae48      	add	r6, sp, #288	@ 0x120
 80008dc:	e9cd e807 	strd	lr, r8, [sp, #28]
 80008e0:	f8cd b014 	str.w	fp, [sp, #20]
 80008e4:	9100      	str	r1, [sp, #0]
 80008e6:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 80008ea:	4692      	mov	sl, r2
 80008ec:	46cb      	mov	fp, r9
 80008ee:	46b0      	mov	r8, r6
 80008f0:	f1b9 0f00 	cmp.w	r9, #0
 80008f4:	bfb8      	it	lt
 80008f6:	2400      	movlt	r4, #0
 80008f8:	db0f      	blt.n	800091a <__kernel_rem_pio2f+0xf6>
 80008fa:	9e02      	ldr	r6, [sp, #8]
 80008fc:	4657      	mov	r7, sl
 80008fe:	2400      	movs	r4, #0
 8000900:	f857 1d04 	ldr.w	r1, [r7, #-4]!
 8000904:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8000908:	f000 fc80 	bl	800120c <__aeabi_fmul>
 800090c:	4601      	mov	r1, r0
 800090e:	4620      	mov	r0, r4
 8000910:	f000 fd36 	bl	8001380 <__addsf3>
 8000914:	42ae      	cmp	r6, r5
 8000916:	4604      	mov	r4, r0
 8000918:	d1f2      	bne.n	8000900 <__kernel_rem_pio2f+0xdc>
 800091a:	9b00      	ldr	r3, [sp, #0]
 800091c:	f848 4b04 	str.w	r4, [r8], #4
 8000920:	f10b 0b01 	add.w	fp, fp, #1
 8000924:	459b      	cmp	fp, r3
 8000926:	f10a 0a04 	add.w	sl, sl, #4
 800092a:	d1e1      	bne.n	80008f0 <__kernel_rem_pio2f+0xcc>
 800092c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8000930:	e9dd e807 	ldrd	lr, r8, [sp, #28]
 8000934:	9b02      	ldr	r3, [sp, #8]
 8000936:	f8cd a010 	str.w	sl, [sp, #16]
 800093a:	eb03 0508 	add.w	r5, r3, r8
 800093e:	ab0c      	add	r3, sp, #48	@ 0x30
 8000940:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8000944:	3b04      	subs	r3, #4
 8000946:	9307      	str	r3, [sp, #28]
 8000948:	ab0c      	add	r3, sp, #48	@ 0x30
 800094a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800094e:	46d1      	mov	r9, sl
 8000950:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8000954:	469a      	mov	sl, r3
 8000956:	f8cd e020 	str.w	lr, [sp, #32]
 800095a:	ab5c      	add	r3, sp, #368	@ 0x170
 800095c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8000960:	f1b9 0f00 	cmp.w	r9, #0
 8000964:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8000968:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	dd22      	ble.n	80009b6 <__kernel_rem_pio2f+0x192>
 8000970:	f50d 7890 	add.w	r8, sp, #288	@ 0x120
 8000974:	eb08 0603 	add.w	r6, r8, r3
 8000978:	af0c      	add	r7, sp, #48	@ 0x30
 800097a:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800097e:	4658      	mov	r0, fp
 8000980:	f000 fc44 	bl	800120c <__aeabi_fmul>
 8000984:	f000 fe7a 	bl	800167c <__aeabi_f2iz>
 8000988:	f000 fdae 	bl	80014e8 <__aeabi_i2f>
 800098c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8000990:	4604      	mov	r4, r0
 8000992:	f000 fc3b 	bl	800120c <__aeabi_fmul>
 8000996:	4601      	mov	r1, r0
 8000998:	4658      	mov	r0, fp
 800099a:	f000 fcef 	bl	800137c <__aeabi_fsub>
 800099e:	f000 fe6d 	bl	800167c <__aeabi_f2iz>
 80009a2:	f856 1d04 	ldr.w	r1, [r6, #-4]!
 80009a6:	f847 0b04 	str.w	r0, [r7], #4
 80009aa:	4620      	mov	r0, r4
 80009ac:	f000 fce8 	bl	8001380 <__addsf3>
 80009b0:	4546      	cmp	r6, r8
 80009b2:	4683      	mov	fp, r0
 80009b4:	d1e1      	bne.n	800097a <__kernel_rem_pio2f+0x156>
 80009b6:	9e03      	ldr	r6, [sp, #12]
 80009b8:	4658      	mov	r0, fp
 80009ba:	4631      	mov	r1, r6
 80009bc:	f000 fac6 	bl	8000f4c <scalbnf>
 80009c0:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80009c4:	4604      	mov	r4, r0
 80009c6:	f000 fc21 	bl	800120c <__aeabi_fmul>
 80009ca:	f000 fbdb 	bl	8001184 <floorf>
 80009ce:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80009d2:	f000 fc1b 	bl	800120c <__aeabi_fmul>
 80009d6:	4601      	mov	r1, r0
 80009d8:	4620      	mov	r0, r4
 80009da:	f000 fccf 	bl	800137c <__aeabi_fsub>
 80009de:	4604      	mov	r4, r0
 80009e0:	f000 fe4c 	bl	800167c <__aeabi_f2iz>
 80009e4:	4607      	mov	r7, r0
 80009e6:	f000 fd7f 	bl	80014e8 <__aeabi_i2f>
 80009ea:	4601      	mov	r1, r0
 80009ec:	4620      	mov	r0, r4
 80009ee:	f000 fcc5 	bl	800137c <__aeabi_fsub>
 80009f2:	2e00      	cmp	r6, #0
 80009f4:	4680      	mov	r8, r0
 80009f6:	f340 8082 	ble.w	8000afe <__kernel_rem_pio2f+0x2da>
 80009fa:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 80009fe:	aa0c      	add	r2, sp, #48	@ 0x30
 8000a00:	f1c6 0308 	rsb	r3, r6, #8
 8000a04:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8000a08:	f1c6 0007 	rsb	r0, r6, #7
 8000a0c:	fa41 f603 	asr.w	r6, r1, r3
 8000a10:	fa06 f303 	lsl.w	r3, r6, r3
 8000a14:	1ac9      	subs	r1, r1, r3
 8000a16:	fa41 f400 	asr.w	r4, r1, r0
 8000a1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8000a1c:	2c00      	cmp	r4, #0
 8000a1e:	f843 102c 	str.w	r1, [r3, ip, lsl #2]
 8000a22:	4437      	add	r7, r6
 8000a24:	f300 8112 	bgt.w	8000c4c <__kernel_rem_pio2f+0x428>
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4640      	mov	r0, r8
 8000a2c:	f000 fdf4 	bl	8001618 <__aeabi_fcmpeq>
 8000a30:	2800      	cmp	r0, #0
 8000a32:	f000 80ba 	beq.w	8000baa <__kernel_rem_pio2f+0x386>
 8000a36:	9b04      	ldr	r3, [sp, #16]
 8000a38:	4599      	cmp	r9, r3
 8000a3a:	dd0c      	ble.n	8000a56 <__kernel_rem_pio2f+0x232>
 8000a3c:	9b00      	ldr	r3, [sp, #0]
 8000a3e:	3330      	adds	r3, #48	@ 0x30
 8000a40:	446b      	add	r3, sp
 8000a42:	2100      	movs	r1, #0
 8000a44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8000a48:	4553      	cmp	r3, sl
 8000a4a:	ea41 0102 	orr.w	r1, r1, r2
 8000a4e:	d1f9      	bne.n	8000a44 <__kernel_rem_pio2f+0x220>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	f040 8116 	bne.w	8000c82 <__kernel_rem_pio2f+0x45e>
 8000a56:	9b04      	ldr	r3, [sp, #16]
 8000a58:	aa0c      	add	r2, sp, #48	@ 0x30
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f040 810a 	bne.w	8000c7a <__kernel_rem_pio2f+0x456>
 8000a66:	9907      	ldr	r1, [sp, #28]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8000a6e:	3301      	adds	r3, #1
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	d0fa      	beq.n	8000a6a <__kernel_rem_pio2f+0x246>
 8000a74:	444b      	add	r3, r9
 8000a76:	f109 0601 	add.w	r6, r9, #1
 8000a7a:	9906      	ldr	r1, [sp, #24]
 8000a7c:	9a08      	ldr	r2, [sp, #32]
 8000a7e:	f8cd a014 	str.w	sl, [sp, #20]
 8000a82:	eb01 0806 	add.w	r8, r1, r6
 8000a86:	f108 4880 	add.w	r8, r8, #1073741824	@ 0x40000000
 8000a8a:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8000a8c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8000a90:	444a      	add	r2, r9
 8000a92:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 8000a96:	f8dd 9000 	ldr.w	r9, [sp]
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	a920      	add	r1, sp, #128	@ 0x80
 8000a9e:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 8000aa2:	aa48      	add	r2, sp, #288	@ 0x120
 8000aa4:	4491      	add	r9, r2
 8000aa6:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8000aaa:	f000 fd1d 	bl	80014e8 <__aeabi_i2f>
 8000aae:	9b01      	ldr	r3, [sp, #4]
 8000ab0:	f847 0b04 	str.w	r0, [r7], #4
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db1a      	blt.n	8000aee <__kernel_rem_pio2f+0x2ca>
 8000ab8:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000abc:	46bb      	mov	fp, r7
 8000abe:	2400      	movs	r4, #0
 8000ac0:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8000ac4:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8000ac8:	f000 fba0 	bl	800120c <__aeabi_fmul>
 8000acc:	4601      	mov	r1, r0
 8000ace:	4620      	mov	r0, r4
 8000ad0:	f000 fc56 	bl	8001380 <__addsf3>
 8000ad4:	45aa      	cmp	sl, r5
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	d1f2      	bne.n	8000ac0 <__kernel_rem_pio2f+0x29c>
 8000ada:	9b00      	ldr	r3, [sp, #0]
 8000adc:	f849 4f04 	str.w	r4, [r9, #4]!
 8000ae0:	3601      	adds	r6, #1
 8000ae2:	42b3      	cmp	r3, r6
 8000ae4:	dadf      	bge.n	8000aa6 <__kernel_rem_pio2f+0x282>
 8000ae6:	f8dd a014 	ldr.w	sl, [sp, #20]
 8000aea:	4699      	mov	r9, r3
 8000aec:	e735      	b.n	800095a <__kernel_rem_pio2f+0x136>
 8000aee:	9b00      	ldr	r3, [sp, #0]
 8000af0:	3601      	adds	r6, #1
 8000af2:	2400      	movs	r4, #0
 8000af4:	42b3      	cmp	r3, r6
 8000af6:	f849 4f04 	str.w	r4, [r9, #4]!
 8000afa:	dad4      	bge.n	8000aa6 <__kernel_rem_pio2f+0x282>
 8000afc:	e7f3      	b.n	8000ae6 <__kernel_rem_pio2f+0x2c2>
 8000afe:	f040 808d 	bne.w	8000c1c <__kernel_rem_pio2f+0x3f8>
 8000b02:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
 8000b06:	aa0c      	add	r2, sp, #48	@ 0x30
 8000b08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000b0c:	11e4      	asrs	r4, r4, #7
 8000b0e:	2c00      	cmp	r4, #0
 8000b10:	dd8a      	ble.n	8000a28 <__kernel_rem_pio2f+0x204>
 8000b12:	f1b9 0f00 	cmp.w	r9, #0
 8000b16:	f107 0701 	add.w	r7, r7, #1
 8000b1a:	f340 81ef 	ble.w	8000efc <__kernel_rem_pio2f+0x6d8>
 8000b1e:	ab0c      	add	r3, sp, #48	@ 0x30
 8000b20:	2100      	movs	r1, #0
 8000b22:	f853 6b04 	ldr.w	r6, [r3], #4
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d074      	beq.n	8000c14 <__kernel_rem_pio2f+0x3f0>
 8000b2a:	f5c6 7680 	rsb	r6, r6, #256	@ 0x100
 8000b2e:	f843 6c04 	str.w	r6, [r3, #-4]
 8000b32:	e006      	b.n	8000b42 <__kernel_rem_pio2f+0x31e>
 8000b34:	08005144 	.word	0x08005144
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8000b3e:	f843 2b04 	str.w	r2, [r3], #4
 8000b42:	3101      	adds	r1, #1
 8000b44:	4589      	cmp	r9, r1
 8000b46:	dcf7      	bgt.n	8000b38 <__kernel_rem_pio2f+0x314>
 8000b48:	2601      	movs	r6, #1
 8000b4a:	9b03      	ldr	r3, [sp, #12]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd0f      	ble.n	8000b70 <__kernel_rem_pio2f+0x34c>
 8000b50:	9b03      	ldr	r3, [sp, #12]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	f000 8086 	beq.w	8000c64 <__kernel_rem_pio2f+0x440>
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d109      	bne.n	8000b70 <__kernel_rem_pio2f+0x34c>
 8000b5c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000b60:	ab0c      	add	r3, sp, #48	@ 0x30
 8000b62:	aa0c      	add	r2, sp, #48	@ 0x30
 8000b64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b6c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000b70:	2c02      	cmp	r4, #2
 8000b72:	f47f af59 	bne.w	8000a28 <__kernel_rem_pio2f+0x204>
 8000b76:	4641      	mov	r1, r8
 8000b78:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000b7c:	f000 fbfe 	bl	800137c <__aeabi_fsub>
 8000b80:	4680      	mov	r8, r0
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	f43f af50 	beq.w	8000a28 <__kernel_rem_pio2f+0x204>
 8000b88:	9903      	ldr	r1, [sp, #12]
 8000b8a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000b8e:	f000 f9dd 	bl	8000f4c <scalbnf>
 8000b92:	4601      	mov	r1, r0
 8000b94:	4640      	mov	r0, r8
 8000b96:	f000 fbf1 	bl	800137c <__aeabi_fsub>
 8000b9a:	4680      	mov	r8, r0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4640      	mov	r0, r8
 8000ba0:	f000 fd3a 	bl	8001618 <__aeabi_fcmpeq>
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	f47f af46 	bne.w	8000a36 <__kernel_rem_pio2f+0x212>
 8000baa:	e9dd 3b0a 	ldrd	r3, fp, [sp, #40]	@ 0x28
 8000bae:	4640      	mov	r0, r8
 8000bb0:	eba3 010b 	sub.w	r1, r3, fp
 8000bb4:	9401      	str	r4, [sp, #4]
 8000bb6:	f8dd a010 	ldr.w	sl, [sp, #16]
 8000bba:	f000 f9c7 	bl	8000f4c <scalbnf>
 8000bbe:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	f000 fd46 	bl	8001654 <__aeabi_fcmpge>
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	f000 8179 	beq.w	8000ec0 <__kernel_rem_pio2f+0x69c>
 8000bce:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	f000 fb1a 	bl	800120c <__aeabi_fmul>
 8000bd8:	f000 fd50 	bl	800167c <__aeabi_f2iz>
 8000bdc:	f000 fc84 	bl	80014e8 <__aeabi_i2f>
 8000be0:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8000be4:	4605      	mov	r5, r0
 8000be6:	f000 fb11 	bl	800120c <__aeabi_fmul>
 8000bea:	4601      	mov	r1, r0
 8000bec:	4620      	mov	r0, r4
 8000bee:	f000 fbc5 	bl	800137c <__aeabi_fsub>
 8000bf2:	f000 fd43 	bl	800167c <__aeabi_f2iz>
 8000bf6:	ab0c      	add	r3, sp, #48	@ 0x30
 8000bf8:	f109 0601 	add.w	r6, r9, #1
 8000bfc:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
 8000c00:	9b03      	ldr	r3, [sp, #12]
 8000c02:	4628      	mov	r0, r5
 8000c04:	3308      	adds	r3, #8
 8000c06:	9303      	str	r3, [sp, #12]
 8000c08:	f000 fd38 	bl	800167c <__aeabi_f2iz>
 8000c0c:	ab0c      	add	r3, sp, #48	@ 0x30
 8000c0e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8000c12:	e050      	b.n	8000cb6 <__kernel_rem_pio2f+0x492>
 8000c14:	3101      	adds	r1, #1
 8000c16:	4589      	cmp	r9, r1
 8000c18:	dc83      	bgt.n	8000b22 <__kernel_rem_pio2f+0x2fe>
 8000c1a:	e796      	b.n	8000b4a <__kernel_rem_pio2f+0x326>
 8000c1c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000c20:	f000 fd18 	bl	8001654 <__aeabi_fcmpge>
 8000c24:	4604      	mov	r4, r0
 8000c26:	2800      	cmp	r0, #0
 8000c28:	f43f aefe 	beq.w	8000a28 <__kernel_rem_pio2f+0x204>
 8000c2c:	f1b9 0f00 	cmp.w	r9, #0
 8000c30:	f107 0701 	add.w	r7, r7, #1
 8000c34:	bfc8      	it	gt
 8000c36:	2402      	movgt	r4, #2
 8000c38:	f73f af71 	bgt.w	8000b1e <__kernel_rem_pio2f+0x2fa>
 8000c3c:	4641      	mov	r1, r8
 8000c3e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000c42:	f000 fb9b 	bl	800137c <__aeabi_fsub>
 8000c46:	2402      	movs	r4, #2
 8000c48:	4680      	mov	r8, r0
 8000c4a:	e6ed      	b.n	8000a28 <__kernel_rem_pio2f+0x204>
 8000c4c:	f1b9 0f00 	cmp.w	r9, #0
 8000c50:	f107 0701 	add.w	r7, r7, #1
 8000c54:	bfd8      	it	le
 8000c56:	2600      	movle	r6, #0
 8000c58:	f73f af61 	bgt.w	8000b1e <__kernel_rem_pio2f+0x2fa>
 8000c5c:	9b03      	ldr	r3, [sp, #12]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	f47f af7a 	bne.w	8000b58 <__kernel_rem_pio2f+0x334>
 8000c64:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000c68:	ab0c      	add	r3, sp, #48	@ 0x30
 8000c6a:	aa0c      	add	r2, sp, #48	@ 0x30
 8000c6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c74:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000c78:	e77a      	b.n	8000b70 <__kernel_rem_pio2f+0x34c>
 8000c7a:	f109 0601 	add.w	r6, r9, #1
 8000c7e:	4633      	mov	r3, r6
 8000c80:	e6fb      	b.n	8000a7a <__kernel_rem_pio2f+0x256>
 8000c82:	9b03      	ldr	r3, [sp, #12]
 8000c84:	f8dd a010 	ldr.w	sl, [sp, #16]
 8000c88:	9401      	str	r4, [sp, #4]
 8000c8a:	f1a3 0208 	sub.w	r2, r3, #8
 8000c8e:	f109 36ff 	add.w	r6, r9, #4294967295	@ 0xffffffff
 8000c92:	ab0c      	add	r3, sp, #48	@ 0x30
 8000c94:	9203      	str	r2, [sp, #12]
 8000c96:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8000c9a:	b963      	cbnz	r3, 8000cb6 <__kernel_rem_pio2f+0x492>
 8000c9c:	f109 4380 	add.w	r3, r9, #1073741824	@ 0x40000000
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	a90c      	add	r1, sp, #48	@ 0x30
 8000ca4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000ca8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8000cac:	3e01      	subs	r6, #1
 8000cae:	3a08      	subs	r2, #8
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	d0f9      	beq.n	8000ca8 <__kernel_rem_pio2f+0x484>
 8000cb4:	9203      	str	r2, [sp, #12]
 8000cb6:	9903      	ldr	r1, [sp, #12]
 8000cb8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000cbc:	f000 f946 	bl	8000f4c <scalbnf>
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	4681      	mov	r9, r0
 8000cc4:	f2c0 8124 	blt.w	8000f10 <__kernel_rem_pio2f+0x6ec>
 8000cc8:	1c74      	adds	r4, r6, #1
 8000cca:	ab0c      	add	r3, sp, #48	@ 0x30
 8000ccc:	00a1      	lsls	r1, r4, #2
 8000cce:	eb03 0884 	add.w	r8, r3, r4, lsl #2
 8000cd2:	ab48      	add	r3, sp, #288	@ 0x120
 8000cd4:	f04f 556e 	mov.w	r5, #998244352	@ 0x3b800000
 8000cd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8000cdc:	468b      	mov	fp, r1
 8000cde:	f858 0d04 	ldr.w	r0, [r8, #-4]!
 8000ce2:	f000 fc01 	bl	80014e8 <__aeabi_i2f>
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	f000 fa90 	bl	800120c <__aeabi_fmul>
 8000cec:	4629      	mov	r1, r5
 8000cee:	f844 0d04 	str.w	r0, [r4, #-4]!
 8000cf2:	4648      	mov	r0, r9
 8000cf4:	f000 fa8a 	bl	800120c <__aeabi_fmul>
 8000cf8:	ab0c      	add	r3, sp, #48	@ 0x30
 8000cfa:	4598      	cmp	r8, r3
 8000cfc:	4681      	mov	r9, r0
 8000cfe:	d1ee      	bne.n	8000cde <__kernel_rem_pio2f+0x4ba>
 8000d00:	f1ab 0308 	sub.w	r3, fp, #8
 8000d04:	aa48      	add	r2, sp, #288	@ 0x120
 8000d06:	ac34      	add	r4, sp, #208	@ 0xd0
 8000d08:	4413      	add	r3, r2
 8000d0a:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8000d0e:	46b1      	mov	r9, r6
 8000d10:	4659      	mov	r1, fp
 8000d12:	461a      	mov	r2, r3
 8000d14:	f04f 0b00 	mov.w	fp, #0
 8000d18:	9604      	str	r6, [sp, #16]
 8000d1a:	46c8      	mov	r8, r9
 8000d1c:	465e      	mov	r6, fp
 8000d1e:	4623      	mov	r3, r4
 8000d20:	9105      	str	r1, [sp, #20]
 8000d22:	4691      	mov	r9, r2
 8000d24:	f1ba 0f00 	cmp.w	sl, #0
 8000d28:	db71      	blt.n	8000e0e <__kernel_rem_pio2f+0x5ea>
 8000d2a:	4f87      	ldr	r7, [pc, #540]	@ (8000f48 <__kernel_rem_pio2f+0x724>)
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	46bb      	mov	fp, r7
 8000d30:	2500      	movs	r5, #0
 8000d32:	2400      	movs	r4, #0
 8000d34:	464f      	mov	r7, r9
 8000d36:	e001      	b.n	8000d3c <__kernel_rem_pio2f+0x518>
 8000d38:	42b4      	cmp	r4, r6
 8000d3a:	dc0d      	bgt.n	8000d58 <__kernel_rem_pio2f+0x534>
 8000d3c:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8000d40:	f85b 0b04 	ldr.w	r0, [fp], #4
 8000d44:	f000 fa62 	bl	800120c <__aeabi_fmul>
 8000d48:	4601      	mov	r1, r0
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	f000 fb18 	bl	8001380 <__addsf3>
 8000d50:	3401      	adds	r4, #1
 8000d52:	45a2      	cmp	sl, r4
 8000d54:	4605      	mov	r5, r0
 8000d56:	daef      	bge.n	8000d38 <__kernel_rem_pio2f+0x514>
 8000d58:	9b00      	ldr	r3, [sp, #0]
 8000d5a:	f843 5b04 	str.w	r5, [r3], #4
 8000d5e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8000d62:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8000d66:	f106 0601 	add.w	r6, r6, #1
 8000d6a:	f1a9 0904 	sub.w	r9, r9, #4
 8000d6e:	d1d9      	bne.n	8000d24 <__kernel_rem_pio2f+0x500>
 8000d70:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	e9dd 7402 	ldrd	r7, r4, [sp, #8]
 8000d78:	e9dd 6104 	ldrd	r6, r1, [sp, #16]
 8000d7c:	dc49      	bgt.n	8000e12 <__kernel_rem_pio2f+0x5ee>
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	dc1a      	bgt.n	8000db8 <__kernel_rem_pio2f+0x594>
 8000d82:	d10f      	bne.n	8000da4 <__kernel_rem_pio2f+0x580>
 8000d84:	ab34      	add	r3, sp, #208	@ 0xd0
 8000d86:	185c      	adds	r4, r3, r1
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8000d8e:	f000 faf7 	bl	8001380 <__addsf3>
 8000d92:	ab34      	add	r3, sp, #208	@ 0xd0
 8000d94:	429c      	cmp	r4, r3
 8000d96:	d1f8      	bne.n	8000d8a <__kernel_rem_pio2f+0x566>
 8000d98:	9b01      	ldr	r3, [sp, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 80ab 	bne.w	8000ef6 <__kernel_rem_pio2f+0x6d2>
 8000da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000da2:	6018      	str	r0, [r3, #0]
 8000da4:	f007 0007 	and.w	r0, r7, #7
 8000da8:	b05d      	add	sp, #372	@ 0x174
 8000daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dae:	2308      	movs	r3, #8
 8000db0:	930a      	str	r3, [sp, #40]	@ 0x28
 8000db2:	2300      	movs	r3, #0
 8000db4:	9306      	str	r3, [sp, #24]
 8000db6:	e551      	b.n	800085c <__kernel_rem_pio2f+0x38>
 8000db8:	ab34      	add	r3, sp, #208	@ 0xd0
 8000dba:	2500      	movs	r5, #0
 8000dbc:	eb03 0901 	add.w	r9, r3, r1
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	f859 1d04 	ldr.w	r1, [r9, #-4]!
 8000dc6:	f000 fadb 	bl	8001380 <__addsf3>
 8000dca:	ab34      	add	r3, sp, #208	@ 0xd0
 8000dcc:	4599      	cmp	r9, r3
 8000dce:	d1f8      	bne.n	8000dc2 <__kernel_rem_pio2f+0x59e>
 8000dd0:	4605      	mov	r5, r0
 8000dd2:	4629      	mov	r1, r5
 8000dd4:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8000dd6:	f000 fad1 	bl	800137c <__aeabi_fsub>
 8000dda:	9b01      	ldr	r3, [sp, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f040 8082 	bne.w	8000ee6 <__kernel_rem_pio2f+0x6c2>
 8000de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000de4:	601d      	str	r5, [r3, #0]
 8000de6:	b15e      	cbz	r6, 8000e00 <__kernel_rem_pio2f+0x5dc>
 8000de8:	2501      	movs	r5, #1
 8000dea:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8000dee:	3501      	adds	r5, #1
 8000df0:	f000 fac6 	bl	8001380 <__addsf3>
 8000df4:	42ae      	cmp	r6, r5
 8000df6:	daf8      	bge.n	8000dea <__kernel_rem_pio2f+0x5c6>
 8000df8:	9b01      	ldr	r3, [sp, #4]
 8000dfa:	b10b      	cbz	r3, 8000e00 <__kernel_rem_pio2f+0x5dc>
 8000dfc:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e02:	6058      	str	r0, [r3, #4]
 8000e04:	f007 0007 	and.w	r0, r7, #7
 8000e08:	b05d      	add	sp, #372	@ 0x174
 8000e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e0e:	2500      	movs	r5, #0
 8000e10:	e7a3      	b.n	8000d5a <__kernel_rem_pio2f+0x536>
 8000e12:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d1c5      	bne.n	8000da4 <__kernel_rem_pio2f+0x580>
 8000e18:	2e00      	cmp	r6, #0
 8000e1a:	f000 8086 	beq.w	8000f2a <__kernel_rem_pio2f+0x706>
 8000e1e:	ab34      	add	r3, sp, #208	@ 0xd0
 8000e20:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
 8000e24:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8000e28:	00b5      	lsls	r5, r6, #2
 8000e2a:	46d3      	mov	fp, sl
 8000e2c:	f85b 9c04 	ldr.w	r9, [fp, #-4]
 8000e30:	4620      	mov	r0, r4
 8000e32:	4649      	mov	r1, r9
 8000e34:	f000 faa4 	bl	8001380 <__addsf3>
 8000e38:	46a0      	mov	r8, r4
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	4648      	mov	r0, r9
 8000e40:	f000 fa9c 	bl	800137c <__aeabi_fsub>
 8000e44:	4641      	mov	r1, r8
 8000e46:	f000 fa9b 	bl	8001380 <__addsf3>
 8000e4a:	f8cb 0000 	str.w	r0, [fp]
 8000e4e:	f84b 4d04 	str.w	r4, [fp, #-4]!
 8000e52:	ab34      	add	r3, sp, #208	@ 0xd0
 8000e54:	459b      	cmp	fp, r3
 8000e56:	d1e9      	bne.n	8000e2c <__kernel_rem_pio2f+0x608>
 8000e58:	2e01      	cmp	r6, #1
 8000e5a:	d066      	beq.n	8000f2a <__kernel_rem_pio2f+0x706>
 8000e5c:	ab34      	add	r3, sp, #208	@ 0xd0
 8000e5e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8000e62:	1d1e      	adds	r6, r3, #4
 8000e64:	f85a 9c04 	ldr.w	r9, [sl, #-4]
 8000e68:	4620      	mov	r0, r4
 8000e6a:	4649      	mov	r1, r9
 8000e6c:	f000 fa88 	bl	8001380 <__addsf3>
 8000e70:	46a0      	mov	r8, r4
 8000e72:	4604      	mov	r4, r0
 8000e74:	4621      	mov	r1, r4
 8000e76:	4648      	mov	r0, r9
 8000e78:	f000 fa80 	bl	800137c <__aeabi_fsub>
 8000e7c:	4641      	mov	r1, r8
 8000e7e:	f000 fa7f 	bl	8001380 <__addsf3>
 8000e82:	f8ca 0000 	str.w	r0, [sl]
 8000e86:	f84a 4d04 	str.w	r4, [sl, #-4]!
 8000e8a:	4556      	cmp	r6, sl
 8000e8c:	d1ea      	bne.n	8000e64 <__kernel_rem_pio2f+0x640>
 8000e8e:	ab34      	add	r3, sp, #208	@ 0xd0
 8000e90:	1d2c      	adds	r4, r5, #4
 8000e92:	441c      	add	r4, r3
 8000e94:	f103 0808 	add.w	r8, r3, #8
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8000e9e:	f000 fa6f 	bl	8001380 <__addsf3>
 8000ea2:	45a0      	cmp	r8, r4
 8000ea4:	d1f9      	bne.n	8000e9a <__kernel_rem_pio2f+0x676>
 8000ea6:	9901      	ldr	r1, [sp, #4]
 8000ea8:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 8000eaa:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8000eac:	b981      	cbnz	r1, 8000ed0 <__kernel_rem_pio2f+0x6ac>
 8000eae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8000eb0:	600a      	str	r2, [r1, #0]
 8000eb2:	604b      	str	r3, [r1, #4]
 8000eb4:	6088      	str	r0, [r1, #8]
 8000eb6:	f007 0007 	and.w	r0, r7, #7
 8000eba:	b05d      	add	sp, #372	@ 0x174
 8000ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f000 fbdb 	bl	800167c <__aeabi_f2iz>
 8000ec6:	ab0c      	add	r3, sp, #48	@ 0x30
 8000ec8:	464e      	mov	r6, r9
 8000eca:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
 8000ece:	e6f2      	b.n	8000cb6 <__kernel_rem_pio2f+0x492>
 8000ed0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8000ed2:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8000ed6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000eda:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8000ede:	600a      	str	r2, [r1, #0]
 8000ee0:	604b      	str	r3, [r1, #4]
 8000ee2:	6088      	str	r0, [r1, #8]
 8000ee4:	e7e7      	b.n	8000eb6 <__kernel_rem_pio2f+0x692>
 8000ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ee8:	f105 4500 	add.w	r5, r5, #2147483648	@ 0x80000000
 8000eec:	601d      	str	r5, [r3, #0]
 8000eee:	2e00      	cmp	r6, #0
 8000ef0:	f47f af7a 	bne.w	8000de8 <__kernel_rem_pio2f+0x5c4>
 8000ef4:	e782      	b.n	8000dfc <__kernel_rem_pio2f+0x5d8>
 8000ef6:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8000efa:	e751      	b.n	8000da0 <__kernel_rem_pio2f+0x57c>
 8000efc:	2c02      	cmp	r4, #2
 8000efe:	f47f ad93 	bne.w	8000a28 <__kernel_rem_pio2f+0x204>
 8000f02:	4601      	mov	r1, r0
 8000f04:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000f08:	f000 fa38 	bl	800137c <__aeabi_fsub>
 8000f0c:	4680      	mov	r8, r0
 8000f0e:	e58b      	b.n	8000a28 <__kernel_rem_pio2f+0x204>
 8000f10:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	dc05      	bgt.n	8000f22 <__kernel_rem_pio2f+0x6fe>
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	dc09      	bgt.n	8000f2e <__kernel_rem_pio2f+0x70a>
 8000f1a:	f47f af43 	bne.w	8000da4 <__kernel_rem_pio2f+0x580>
 8000f1e:	2000      	movs	r0, #0
 8000f20:	e73a      	b.n	8000d98 <__kernel_rem_pio2f+0x574>
 8000f22:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	f47f af3d 	bne.w	8000da4 <__kernel_rem_pio2f+0x580>
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	e7bb      	b.n	8000ea6 <__kernel_rem_pio2f+0x682>
 8000f2e:	9b01      	ldr	r3, [sp, #4]
 8000f30:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8000f32:	b91b      	cbnz	r3, 8000f3c <__kernel_rem_pio2f+0x718>
 8000f34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000f36:	2300      	movs	r3, #0
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e761      	b.n	8000e00 <__kernel_rem_pio2f+0x5dc>
 8000f3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000f3e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	e75a      	b.n	8000dfc <__kernel_rem_pio2f+0x5d8>
 8000f46:	bf00      	nop
 8000f48:	08005150 	.word	0x08005150

08000f4c <scalbnf>:
 8000f4c:	b510      	push	{r4, lr}
 8000f4e:	460c      	mov	r4, r1
 8000f50:	f030 4100 	bics.w	r1, r0, #2147483648	@ 0x80000000
 8000f54:	4603      	mov	r3, r0
 8000f56:	d01d      	beq.n	8000f94 <scalbnf+0x48>
 8000f58:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8000f5c:	d21b      	bcs.n	8000f96 <scalbnf+0x4a>
 8000f5e:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8000f62:	4602      	mov	r2, r0
 8000f64:	d11b      	bne.n	8000f9e <scalbnf+0x52>
 8000f66:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8000f6a:	f000 f94f 	bl	800120c <__aeabi_fmul>
 8000f6e:	4a20      	ldr	r2, [pc, #128]	@ (8000ff0 <scalbnf+0xa4>)
 8000f70:	4294      	cmp	r4, r2
 8000f72:	4603      	mov	r3, r0
 8000f74:	db2c      	blt.n	8000fd0 <scalbnf+0x84>
 8000f76:	f3c0 51c7 	ubfx	r1, r0, #23, #8
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f80:	4284      	cmp	r4, r0
 8000f82:	f1a1 0119 	sub.w	r1, r1, #25
 8000f86:	dd10      	ble.n	8000faa <scalbnf+0x5e>
 8000f88:	491a      	ldr	r1, [pc, #104]	@ (8000ff4 <scalbnf+0xa8>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f361 001e 	bfi	r0, r1, #0, #31
 8000f90:	f000 f93c 	bl	800120c <__aeabi_fmul>
 8000f94:	bd10      	pop	{r4, pc}
 8000f96:	4601      	mov	r1, r0
 8000f98:	f000 f9f2 	bl	8001380 <__addsf3>
 8000f9c:	bd10      	pop	{r4, pc}
 8000f9e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000fa2:	4284      	cmp	r4, r0
 8000fa4:	ea4f 51d1 	mov.w	r1, r1, lsr #23
 8000fa8:	dcee      	bgt.n	8000f88 <scalbnf+0x3c>
 8000faa:	4421      	add	r1, r4
 8000fac:	29fe      	cmp	r1, #254	@ 0xfe
 8000fae:	dceb      	bgt.n	8000f88 <scalbnf+0x3c>
 8000fb0:	2900      	cmp	r1, #0
 8000fb2:	dc11      	bgt.n	8000fd8 <scalbnf+0x8c>
 8000fb4:	f111 0f16 	cmn.w	r1, #22
 8000fb8:	db13      	blt.n	8000fe2 <scalbnf+0x96>
 8000fba:	f101 0019 	add.w	r0, r1, #25
 8000fbe:	f022 42ff 	bic.w	r2, r2, #2139095040	@ 0x7f800000
 8000fc2:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8000fc6:	ea42 50c0 	orr.w	r0, r2, r0, lsl #23
 8000fca:	f000 f91f 	bl	800120c <__aeabi_fmul>
 8000fce:	bd10      	pop	{r4, pc}
 8000fd0:	4909      	ldr	r1, [pc, #36]	@ (8000ff8 <scalbnf+0xac>)
 8000fd2:	f000 f91b 	bl	800120c <__aeabi_fmul>
 8000fd6:	bd10      	pop	{r4, pc}
 8000fd8:	f022 42ff 	bic.w	r2, r2, #2139095040	@ 0x7f800000
 8000fdc:	ea42 50c1 	orr.w	r0, r2, r1, lsl #23
 8000fe0:	bd10      	pop	{r4, pc}
 8000fe2:	4905      	ldr	r1, [pc, #20]	@ (8000ff8 <scalbnf+0xac>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f361 001e 	bfi	r0, r1, #0, #31
 8000fea:	f000 f90f 	bl	800120c <__aeabi_fmul>
 8000fee:	bd10      	pop	{r4, pc}
 8000ff0:	ffff3cb0 	.word	0xffff3cb0
 8000ff4:	7149f2ca 	.word	0x7149f2ca
 8000ff8:	0da24260 	.word	0x0da24260

08000ffc <__kernel_cosf>:
 8000ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001000:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8001004:	f1b6 5f48 	cmp.w	r6, #838860800	@ 0x32000000
 8001008:	4605      	mov	r5, r0
 800100a:	4688      	mov	r8, r1
 800100c:	d249      	bcs.n	80010a2 <__kernel_cosf+0xa6>
 800100e:	f000 fb35 	bl	800167c <__aeabi_f2iz>
 8001012:	2800      	cmp	r0, #0
 8001014:	f000 809d 	beq.w	8001152 <__kernel_cosf+0x156>
 8001018:	4629      	mov	r1, r5
 800101a:	4628      	mov	r0, r5
 800101c:	f000 f8f6 	bl	800120c <__aeabi_fmul>
 8001020:	494e      	ldr	r1, [pc, #312]	@ (800115c <__kernel_cosf+0x160>)
 8001022:	4604      	mov	r4, r0
 8001024:	f000 f8f2 	bl	800120c <__aeabi_fmul>
 8001028:	494d      	ldr	r1, [pc, #308]	@ (8001160 <__kernel_cosf+0x164>)
 800102a:	f000 f9a9 	bl	8001380 <__addsf3>
 800102e:	4621      	mov	r1, r4
 8001030:	f000 f8ec 	bl	800120c <__aeabi_fmul>
 8001034:	494b      	ldr	r1, [pc, #300]	@ (8001164 <__kernel_cosf+0x168>)
 8001036:	f000 f9a1 	bl	800137c <__aeabi_fsub>
 800103a:	4621      	mov	r1, r4
 800103c:	f000 f8e6 	bl	800120c <__aeabi_fmul>
 8001040:	4949      	ldr	r1, [pc, #292]	@ (8001168 <__kernel_cosf+0x16c>)
 8001042:	f000 f99d 	bl	8001380 <__addsf3>
 8001046:	4621      	mov	r1, r4
 8001048:	f000 f8e0 	bl	800120c <__aeabi_fmul>
 800104c:	4947      	ldr	r1, [pc, #284]	@ (800116c <__kernel_cosf+0x170>)
 800104e:	f000 f995 	bl	800137c <__aeabi_fsub>
 8001052:	4621      	mov	r1, r4
 8001054:	f000 f8da 	bl	800120c <__aeabi_fmul>
 8001058:	4945      	ldr	r1, [pc, #276]	@ (8001170 <__kernel_cosf+0x174>)
 800105a:	f000 f991 	bl	8001380 <__addsf3>
 800105e:	4621      	mov	r1, r4
 8001060:	f000 f8d4 	bl	800120c <__aeabi_fmul>
 8001064:	4607      	mov	r7, r0
 8001066:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800106a:	4620      	mov	r0, r4
 800106c:	f000 f8ce 	bl	800120c <__aeabi_fmul>
 8001070:	4639      	mov	r1, r7
 8001072:	4606      	mov	r6, r0
 8001074:	4620      	mov	r0, r4
 8001076:	f000 f8c9 	bl	800120c <__aeabi_fmul>
 800107a:	4641      	mov	r1, r8
 800107c:	4604      	mov	r4, r0
 800107e:	4628      	mov	r0, r5
 8001080:	f000 f8c4 	bl	800120c <__aeabi_fmul>
 8001084:	4601      	mov	r1, r0
 8001086:	4620      	mov	r0, r4
 8001088:	f000 f978 	bl	800137c <__aeabi_fsub>
 800108c:	4601      	mov	r1, r0
 800108e:	4630      	mov	r0, r6
 8001090:	f000 f974 	bl	800137c <__aeabi_fsub>
 8001094:	4601      	mov	r1, r0
 8001096:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800109a:	f000 f96f 	bl	800137c <__aeabi_fsub>
 800109e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010a2:	4601      	mov	r1, r0
 80010a4:	f000 f8b2 	bl	800120c <__aeabi_fmul>
 80010a8:	492c      	ldr	r1, [pc, #176]	@ (800115c <__kernel_cosf+0x160>)
 80010aa:	4604      	mov	r4, r0
 80010ac:	f000 f8ae 	bl	800120c <__aeabi_fmul>
 80010b0:	492b      	ldr	r1, [pc, #172]	@ (8001160 <__kernel_cosf+0x164>)
 80010b2:	f000 f965 	bl	8001380 <__addsf3>
 80010b6:	4621      	mov	r1, r4
 80010b8:	f000 f8a8 	bl	800120c <__aeabi_fmul>
 80010bc:	4929      	ldr	r1, [pc, #164]	@ (8001164 <__kernel_cosf+0x168>)
 80010be:	f000 f95d 	bl	800137c <__aeabi_fsub>
 80010c2:	4621      	mov	r1, r4
 80010c4:	f000 f8a2 	bl	800120c <__aeabi_fmul>
 80010c8:	4927      	ldr	r1, [pc, #156]	@ (8001168 <__kernel_cosf+0x16c>)
 80010ca:	f000 f959 	bl	8001380 <__addsf3>
 80010ce:	4621      	mov	r1, r4
 80010d0:	f000 f89c 	bl	800120c <__aeabi_fmul>
 80010d4:	4925      	ldr	r1, [pc, #148]	@ (800116c <__kernel_cosf+0x170>)
 80010d6:	f000 f951 	bl	800137c <__aeabi_fsub>
 80010da:	4621      	mov	r1, r4
 80010dc:	f000 f896 	bl	800120c <__aeabi_fmul>
 80010e0:	4923      	ldr	r1, [pc, #140]	@ (8001170 <__kernel_cosf+0x174>)
 80010e2:	f000 f94d 	bl	8001380 <__addsf3>
 80010e6:	4621      	mov	r1, r4
 80010e8:	f000 f890 	bl	800120c <__aeabi_fmul>
 80010ec:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <__kernel_cosf+0x178>)
 80010ee:	429e      	cmp	r6, r3
 80010f0:	4607      	mov	r7, r0
 80010f2:	d9b8      	bls.n	8001066 <__kernel_cosf+0x6a>
 80010f4:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <__kernel_cosf+0x17c>)
 80010f6:	429e      	cmp	r6, r3
 80010f8:	d827      	bhi.n	800114a <__kernel_cosf+0x14e>
 80010fa:	f106 467f 	add.w	r6, r6, #4278190080	@ 0xff000000
 80010fe:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001102:	4631      	mov	r1, r6
 8001104:	f000 f93a 	bl	800137c <__aeabi_fsub>
 8001108:	4681      	mov	r9, r0
 800110a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800110e:	4620      	mov	r0, r4
 8001110:	f000 f87c 	bl	800120c <__aeabi_fmul>
 8001114:	4631      	mov	r1, r6
 8001116:	f000 f931 	bl	800137c <__aeabi_fsub>
 800111a:	4639      	mov	r1, r7
 800111c:	4606      	mov	r6, r0
 800111e:	4620      	mov	r0, r4
 8001120:	f000 f874 	bl	800120c <__aeabi_fmul>
 8001124:	4641      	mov	r1, r8
 8001126:	4604      	mov	r4, r0
 8001128:	4628      	mov	r0, r5
 800112a:	f000 f86f 	bl	800120c <__aeabi_fmul>
 800112e:	4601      	mov	r1, r0
 8001130:	4620      	mov	r0, r4
 8001132:	f000 f923 	bl	800137c <__aeabi_fsub>
 8001136:	4601      	mov	r1, r0
 8001138:	4630      	mov	r0, r6
 800113a:	f000 f91f 	bl	800137c <__aeabi_fsub>
 800113e:	4601      	mov	r1, r0
 8001140:	4648      	mov	r0, r9
 8001142:	f000 f91b 	bl	800137c <__aeabi_fsub>
 8001146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800114a:	f8df 9030 	ldr.w	r9, [pc, #48]	@ 800117c <__kernel_cosf+0x180>
 800114e:	4e0c      	ldr	r6, [pc, #48]	@ (8001180 <__kernel_cosf+0x184>)
 8001150:	e7db      	b.n	800110a <__kernel_cosf+0x10e>
 8001152:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800115a:	bf00      	nop
 800115c:	ad47d74e 	.word	0xad47d74e
 8001160:	310f74f6 	.word	0x310f74f6
 8001164:	3493f27c 	.word	0x3493f27c
 8001168:	37d00d01 	.word	0x37d00d01
 800116c:	3ab60b61 	.word	0x3ab60b61
 8001170:	3d2aaaab 	.word	0x3d2aaaab
 8001174:	3e999999 	.word	0x3e999999
 8001178:	3f480000 	.word	0x3f480000
 800117c:	3f380000 	.word	0x3f380000
 8001180:	3e900000 	.word	0x3e900000

08001184 <floorf>:
 8001184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001188:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800118c:	3d7f      	subs	r5, #127	@ 0x7f
 800118e:	2d16      	cmp	r5, #22
 8001190:	4604      	mov	r4, r0
 8001192:	f020 4700 	bic.w	r7, r0, #2147483648	@ 0x80000000
 8001196:	dc25      	bgt.n	80011e4 <floorf+0x60>
 8001198:	2d00      	cmp	r5, #0
 800119a:	4680      	mov	r8, r0
 800119c:	db14      	blt.n	80011c8 <floorf+0x44>
 800119e:	4f18      	ldr	r7, [pc, #96]	@ (8001200 <floorf+0x7c>)
 80011a0:	412f      	asrs	r7, r5
 80011a2:	4238      	tst	r0, r7
 80011a4:	d01b      	beq.n	80011de <floorf+0x5a>
 80011a6:	4917      	ldr	r1, [pc, #92]	@ (8001204 <floorf+0x80>)
 80011a8:	f000 f8ea 	bl	8001380 <__addsf3>
 80011ac:	2100      	movs	r1, #0
 80011ae:	f000 fa5b 	bl	8001668 <__aeabi_fcmpgt>
 80011b2:	b1a0      	cbz	r0, 80011de <floorf+0x5a>
 80011b4:	2c00      	cmp	r4, #0
 80011b6:	da03      	bge.n	80011c0 <floorf+0x3c>
 80011b8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80011bc:	412b      	asrs	r3, r5
 80011be:	4498      	add	r8, r3
 80011c0:	ea28 0007 	bic.w	r0, r8, r7
 80011c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011c8:	490e      	ldr	r1, [pc, #56]	@ (8001204 <floorf+0x80>)
 80011ca:	f000 f8d9 	bl	8001380 <__addsf3>
 80011ce:	2100      	movs	r1, #0
 80011d0:	f000 fa4a 	bl	8001668 <__aeabi_fcmpgt>
 80011d4:	b118      	cbz	r0, 80011de <floorf+0x5a>
 80011d6:	2c00      	cmp	r4, #0
 80011d8:	db0c      	blt.n	80011f4 <floorf+0x70>
 80011da:	2000      	movs	r0, #0
 80011dc:	e000      	b.n	80011e0 <floorf+0x5c>
 80011de:	4620      	mov	r0, r4
 80011e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011e4:	f1b7 4fff 	cmp.w	r7, #2139095040	@ 0x7f800000
 80011e8:	d3f9      	bcc.n	80011de <floorf+0x5a>
 80011ea:	4601      	mov	r1, r0
 80011ec:	f000 f8c8 	bl	8001380 <__addsf3>
 80011f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011f4:	b917      	cbnz	r7, 80011fc <floorf+0x78>
 80011f6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80011fa:	e7f1      	b.n	80011e0 <floorf+0x5c>
 80011fc:	4802      	ldr	r0, [pc, #8]	@ (8001208 <floorf+0x84>)
 80011fe:	e7ef      	b.n	80011e0 <floorf+0x5c>
 8001200:	007fffff 	.word	0x007fffff
 8001204:	7149f2ca 	.word	0x7149f2ca
 8001208:	bf800000 	.word	0xbf800000

0800120c <__aeabi_fmul>:
 800120c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8001210:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001214:	bf1e      	ittt	ne
 8001216:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800121a:	ea92 0f0c 	teqne	r2, ip
 800121e:	ea93 0f0c 	teqne	r3, ip
 8001222:	d06f      	beq.n	8001304 <__aeabi_fmul+0xf8>
 8001224:	441a      	add	r2, r3
 8001226:	ea80 0c01 	eor.w	ip, r0, r1
 800122a:	0240      	lsls	r0, r0, #9
 800122c:	bf18      	it	ne
 800122e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8001232:	d01e      	beq.n	8001272 <__aeabi_fmul+0x66>
 8001234:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001238:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800123c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8001240:	fba0 3101 	umull	r3, r1, r0, r1
 8001244:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8001248:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800124c:	bf3e      	ittt	cc
 800124e:	0049      	lslcc	r1, r1, #1
 8001250:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8001254:	005b      	lslcc	r3, r3, #1
 8001256:	ea40 0001 	orr.w	r0, r0, r1
 800125a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800125e:	2afd      	cmp	r2, #253	@ 0xfd
 8001260:	d81d      	bhi.n	800129e <__aeabi_fmul+0x92>
 8001262:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001266:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800126a:	bf08      	it	eq
 800126c:	f020 0001 	biceq.w	r0, r0, #1
 8001270:	4770      	bx	lr
 8001272:	f090 0f00 	teq	r0, #0
 8001276:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800127a:	bf08      	it	eq
 800127c:	0249      	lsleq	r1, r1, #9
 800127e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001282:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8001286:	3a7f      	subs	r2, #127	@ 0x7f
 8001288:	bfc2      	ittt	gt
 800128a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800128e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001292:	4770      	bxgt	lr
 8001294:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	3a01      	subs	r2, #1
 800129e:	dc5d      	bgt.n	800135c <__aeabi_fmul+0x150>
 80012a0:	f112 0f19 	cmn.w	r2, #25
 80012a4:	bfdc      	itt	le
 80012a6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80012aa:	4770      	bxle	lr
 80012ac:	f1c2 0200 	rsb	r2, r2, #0
 80012b0:	0041      	lsls	r1, r0, #1
 80012b2:	fa21 f102 	lsr.w	r1, r1, r2
 80012b6:	f1c2 0220 	rsb	r2, r2, #32
 80012ba:	fa00 fc02 	lsl.w	ip, r0, r2
 80012be:	ea5f 0031 	movs.w	r0, r1, rrx
 80012c2:	f140 0000 	adc.w	r0, r0, #0
 80012c6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80012ca:	bf08      	it	eq
 80012cc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80012d0:	4770      	bx	lr
 80012d2:	f092 0f00 	teq	r2, #0
 80012d6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80012da:	bf02      	ittt	eq
 80012dc:	0040      	lsleq	r0, r0, #1
 80012de:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80012e2:	3a01      	subeq	r2, #1
 80012e4:	d0f9      	beq.n	80012da <__aeabi_fmul+0xce>
 80012e6:	ea40 000c 	orr.w	r0, r0, ip
 80012ea:	f093 0f00 	teq	r3, #0
 80012ee:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80012f2:	bf02      	ittt	eq
 80012f4:	0049      	lsleq	r1, r1, #1
 80012f6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80012fa:	3b01      	subeq	r3, #1
 80012fc:	d0f9      	beq.n	80012f2 <__aeabi_fmul+0xe6>
 80012fe:	ea41 010c 	orr.w	r1, r1, ip
 8001302:	e78f      	b.n	8001224 <__aeabi_fmul+0x18>
 8001304:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001308:	ea92 0f0c 	teq	r2, ip
 800130c:	bf18      	it	ne
 800130e:	ea93 0f0c 	teqne	r3, ip
 8001312:	d00a      	beq.n	800132a <__aeabi_fmul+0x11e>
 8001314:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001318:	bf18      	it	ne
 800131a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800131e:	d1d8      	bne.n	80012d2 <__aeabi_fmul+0xc6>
 8001320:	ea80 0001 	eor.w	r0, r0, r1
 8001324:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001328:	4770      	bx	lr
 800132a:	f090 0f00 	teq	r0, #0
 800132e:	bf17      	itett	ne
 8001330:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8001334:	4608      	moveq	r0, r1
 8001336:	f091 0f00 	teqne	r1, #0
 800133a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800133e:	d014      	beq.n	800136a <__aeabi_fmul+0x15e>
 8001340:	ea92 0f0c 	teq	r2, ip
 8001344:	d101      	bne.n	800134a <__aeabi_fmul+0x13e>
 8001346:	0242      	lsls	r2, r0, #9
 8001348:	d10f      	bne.n	800136a <__aeabi_fmul+0x15e>
 800134a:	ea93 0f0c 	teq	r3, ip
 800134e:	d103      	bne.n	8001358 <__aeabi_fmul+0x14c>
 8001350:	024b      	lsls	r3, r1, #9
 8001352:	bf18      	it	ne
 8001354:	4608      	movne	r0, r1
 8001356:	d108      	bne.n	800136a <__aeabi_fmul+0x15e>
 8001358:	ea80 0001 	eor.w	r0, r0, r1
 800135c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001360:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8001364:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001368:	4770      	bx	lr
 800136a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800136e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8001372:	4770      	bx	lr

08001374 <__aeabi_frsub>:
 8001374:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8001378:	e002      	b.n	8001380 <__addsf3>
 800137a:	bf00      	nop

0800137c <__aeabi_fsub>:
 800137c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08001380 <__addsf3>:
 8001380:	0042      	lsls	r2, r0, #1
 8001382:	bf1f      	itttt	ne
 8001384:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8001388:	ea92 0f03 	teqne	r2, r3
 800138c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8001390:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001394:	d06a      	beq.n	800146c <__addsf3+0xec>
 8001396:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800139a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800139e:	bfc1      	itttt	gt
 80013a0:	18d2      	addgt	r2, r2, r3
 80013a2:	4041      	eorgt	r1, r0
 80013a4:	4048      	eorgt	r0, r1
 80013a6:	4041      	eorgt	r1, r0
 80013a8:	bfb8      	it	lt
 80013aa:	425b      	neglt	r3, r3
 80013ac:	2b19      	cmp	r3, #25
 80013ae:	bf88      	it	hi
 80013b0:	4770      	bxhi	lr
 80013b2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80013b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80013ba:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80013be:	bf18      	it	ne
 80013c0:	4240      	negne	r0, r0
 80013c2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80013c6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80013ca:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80013ce:	bf18      	it	ne
 80013d0:	4249      	negne	r1, r1
 80013d2:	ea92 0f03 	teq	r2, r3
 80013d6:	d03f      	beq.n	8001458 <__addsf3+0xd8>
 80013d8:	f1a2 0201 	sub.w	r2, r2, #1
 80013dc:	fa41 fc03 	asr.w	ip, r1, r3
 80013e0:	eb10 000c 	adds.w	r0, r0, ip
 80013e4:	f1c3 0320 	rsb	r3, r3, #32
 80013e8:	fa01 f103 	lsl.w	r1, r1, r3
 80013ec:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80013f0:	d502      	bpl.n	80013f8 <__addsf3+0x78>
 80013f2:	4249      	negs	r1, r1
 80013f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80013f8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80013fc:	d313      	bcc.n	8001426 <__addsf3+0xa6>
 80013fe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001402:	d306      	bcc.n	8001412 <__addsf3+0x92>
 8001404:	0840      	lsrs	r0, r0, #1
 8001406:	ea4f 0131 	mov.w	r1, r1, rrx
 800140a:	f102 0201 	add.w	r2, r2, #1
 800140e:	2afe      	cmp	r2, #254	@ 0xfe
 8001410:	d251      	bcs.n	80014b6 <__addsf3+0x136>
 8001412:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8001416:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800141a:	bf08      	it	eq
 800141c:	f020 0001 	biceq.w	r0, r0, #1
 8001420:	ea40 0003 	orr.w	r0, r0, r3
 8001424:	4770      	bx	lr
 8001426:	0049      	lsls	r1, r1, #1
 8001428:	eb40 0000 	adc.w	r0, r0, r0
 800142c:	3a01      	subs	r2, #1
 800142e:	bf28      	it	cs
 8001430:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8001434:	d2ed      	bcs.n	8001412 <__addsf3+0x92>
 8001436:	fab0 fc80 	clz	ip, r0
 800143a:	f1ac 0c08 	sub.w	ip, ip, #8
 800143e:	ebb2 020c 	subs.w	r2, r2, ip
 8001442:	fa00 f00c 	lsl.w	r0, r0, ip
 8001446:	bfaa      	itet	ge
 8001448:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800144c:	4252      	neglt	r2, r2
 800144e:	4318      	orrge	r0, r3
 8001450:	bfbc      	itt	lt
 8001452:	40d0      	lsrlt	r0, r2
 8001454:	4318      	orrlt	r0, r3
 8001456:	4770      	bx	lr
 8001458:	f092 0f00 	teq	r2, #0
 800145c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8001460:	bf06      	itte	eq
 8001462:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8001466:	3201      	addeq	r2, #1
 8001468:	3b01      	subne	r3, #1
 800146a:	e7b5      	b.n	80013d8 <__addsf3+0x58>
 800146c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001470:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001474:	bf18      	it	ne
 8001476:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800147a:	d021      	beq.n	80014c0 <__addsf3+0x140>
 800147c:	ea92 0f03 	teq	r2, r3
 8001480:	d004      	beq.n	800148c <__addsf3+0x10c>
 8001482:	f092 0f00 	teq	r2, #0
 8001486:	bf08      	it	eq
 8001488:	4608      	moveq	r0, r1
 800148a:	4770      	bx	lr
 800148c:	ea90 0f01 	teq	r0, r1
 8001490:	bf1c      	itt	ne
 8001492:	2000      	movne	r0, #0
 8001494:	4770      	bxne	lr
 8001496:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800149a:	d104      	bne.n	80014a6 <__addsf3+0x126>
 800149c:	0040      	lsls	r0, r0, #1
 800149e:	bf28      	it	cs
 80014a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80014a4:	4770      	bx	lr
 80014a6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80014aa:	bf3c      	itt	cc
 80014ac:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80014b0:	4770      	bxcc	lr
 80014b2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80014b6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80014ba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80014be:	4770      	bx	lr
 80014c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80014c4:	bf16      	itet	ne
 80014c6:	4608      	movne	r0, r1
 80014c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80014cc:	4601      	movne	r1, r0
 80014ce:	0242      	lsls	r2, r0, #9
 80014d0:	bf06      	itte	eq
 80014d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80014d6:	ea90 0f01 	teqeq	r0, r1
 80014da:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80014de:	4770      	bx	lr

080014e0 <__aeabi_ui2f>:
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e004      	b.n	80014f0 <__aeabi_i2f+0x8>
 80014e6:	bf00      	nop

080014e8 <__aeabi_i2f>:
 80014e8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80014ec:	bf48      	it	mi
 80014ee:	4240      	negmi	r0, r0
 80014f0:	ea5f 0c00 	movs.w	ip, r0
 80014f4:	bf08      	it	eq
 80014f6:	4770      	bxeq	lr
 80014f8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80014fc:	4601      	mov	r1, r0
 80014fe:	f04f 0000 	mov.w	r0, #0
 8001502:	e01c      	b.n	800153e <__aeabi_l2f+0x2a>

08001504 <__aeabi_ul2f>:
 8001504:	ea50 0201 	orrs.w	r2, r0, r1
 8001508:	bf08      	it	eq
 800150a:	4770      	bxeq	lr
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	e00a      	b.n	8001528 <__aeabi_l2f+0x14>
 8001512:	bf00      	nop

08001514 <__aeabi_l2f>:
 8001514:	ea50 0201 	orrs.w	r2, r0, r1
 8001518:	bf08      	it	eq
 800151a:	4770      	bxeq	lr
 800151c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8001520:	d502      	bpl.n	8001528 <__aeabi_l2f+0x14>
 8001522:	4240      	negs	r0, r0
 8001524:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001528:	ea5f 0c01 	movs.w	ip, r1
 800152c:	bf02      	ittt	eq
 800152e:	4684      	moveq	ip, r0
 8001530:	4601      	moveq	r1, r0
 8001532:	2000      	moveq	r0, #0
 8001534:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8001538:	bf08      	it	eq
 800153a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800153e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8001542:	fabc f28c 	clz	r2, ip
 8001546:	3a08      	subs	r2, #8
 8001548:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800154c:	db10      	blt.n	8001570 <__aeabi_l2f+0x5c>
 800154e:	fa01 fc02 	lsl.w	ip, r1, r2
 8001552:	4463      	add	r3, ip
 8001554:	fa00 fc02 	lsl.w	ip, r0, r2
 8001558:	f1c2 0220 	rsb	r2, r2, #32
 800155c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8001560:	fa20 f202 	lsr.w	r2, r0, r2
 8001564:	eb43 0002 	adc.w	r0, r3, r2
 8001568:	bf08      	it	eq
 800156a:	f020 0001 	biceq.w	r0, r0, #1
 800156e:	4770      	bx	lr
 8001570:	f102 0220 	add.w	r2, r2, #32
 8001574:	fa01 fc02 	lsl.w	ip, r1, r2
 8001578:	f1c2 0220 	rsb	r2, r2, #32
 800157c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8001580:	fa21 f202 	lsr.w	r2, r1, r2
 8001584:	eb43 0002 	adc.w	r0, r3, r2
 8001588:	bf08      	it	eq
 800158a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800158e:	4770      	bx	lr

08001590 <__gesf2>:
 8001590:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001594:	e006      	b.n	80015a4 <__cmpsf2+0x4>
 8001596:	bf00      	nop

08001598 <__lesf2>:
 8001598:	f04f 0c01 	mov.w	ip, #1
 800159c:	e002      	b.n	80015a4 <__cmpsf2+0x4>
 800159e:	bf00      	nop

080015a0 <__cmpsf2>:
 80015a0:	f04f 0c01 	mov.w	ip, #1
 80015a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80015a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80015ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80015b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80015b4:	bf18      	it	ne
 80015b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80015ba:	d011      	beq.n	80015e0 <__cmpsf2+0x40>
 80015bc:	b001      	add	sp, #4
 80015be:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80015c2:	bf18      	it	ne
 80015c4:	ea90 0f01 	teqne	r0, r1
 80015c8:	bf58      	it	pl
 80015ca:	ebb2 0003 	subspl.w	r0, r2, r3
 80015ce:	bf88      	it	hi
 80015d0:	17c8      	asrhi	r0, r1, #31
 80015d2:	bf38      	it	cc
 80015d4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80015d8:	bf18      	it	ne
 80015da:	f040 0001 	orrne.w	r0, r0, #1
 80015de:	4770      	bx	lr
 80015e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80015e4:	d102      	bne.n	80015ec <__cmpsf2+0x4c>
 80015e6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80015ea:	d105      	bne.n	80015f8 <__cmpsf2+0x58>
 80015ec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80015f0:	d1e4      	bne.n	80015bc <__cmpsf2+0x1c>
 80015f2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80015f6:	d0e1      	beq.n	80015bc <__cmpsf2+0x1c>
 80015f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop

08001600 <__aeabi_cfrcmple>:
 8001600:	4684      	mov	ip, r0
 8001602:	4608      	mov	r0, r1
 8001604:	4661      	mov	r1, ip
 8001606:	e7ff      	b.n	8001608 <__aeabi_cfcmpeq>

08001608 <__aeabi_cfcmpeq>:
 8001608:	b50f      	push	{r0, r1, r2, r3, lr}
 800160a:	f7ff ffc9 	bl	80015a0 <__cmpsf2>
 800160e:	2800      	cmp	r0, #0
 8001610:	bf48      	it	mi
 8001612:	f110 0f00 	cmnmi.w	r0, #0
 8001616:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001618 <__aeabi_fcmpeq>:
 8001618:	f84d ed08 	str.w	lr, [sp, #-8]!
 800161c:	f7ff fff4 	bl	8001608 <__aeabi_cfcmpeq>
 8001620:	bf0c      	ite	eq
 8001622:	2001      	moveq	r0, #1
 8001624:	2000      	movne	r0, #0
 8001626:	f85d fb08 	ldr.w	pc, [sp], #8
 800162a:	bf00      	nop

0800162c <__aeabi_fcmplt>:
 800162c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001630:	f7ff ffea 	bl	8001608 <__aeabi_cfcmpeq>
 8001634:	bf34      	ite	cc
 8001636:	2001      	movcc	r0, #1
 8001638:	2000      	movcs	r0, #0
 800163a:	f85d fb08 	ldr.w	pc, [sp], #8
 800163e:	bf00      	nop

08001640 <__aeabi_fcmple>:
 8001640:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001644:	f7ff ffe0 	bl	8001608 <__aeabi_cfcmpeq>
 8001648:	bf94      	ite	ls
 800164a:	2001      	movls	r0, #1
 800164c:	2000      	movhi	r0, #0
 800164e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001652:	bf00      	nop

08001654 <__aeabi_fcmpge>:
 8001654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001658:	f7ff ffd2 	bl	8001600 <__aeabi_cfrcmple>
 800165c:	bf94      	ite	ls
 800165e:	2001      	movls	r0, #1
 8001660:	2000      	movhi	r0, #0
 8001662:	f85d fb08 	ldr.w	pc, [sp], #8
 8001666:	bf00      	nop

08001668 <__aeabi_fcmpgt>:
 8001668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800166c:	f7ff ffc8 	bl	8001600 <__aeabi_cfrcmple>
 8001670:	bf34      	ite	cc
 8001672:	2001      	movcc	r0, #1
 8001674:	2000      	movcs	r0, #0
 8001676:	f85d fb08 	ldr.w	pc, [sp], #8
 800167a:	bf00      	nop

0800167c <__aeabi_f2iz>:
 800167c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001680:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001684:	d30f      	bcc.n	80016a6 <__aeabi_f2iz+0x2a>
 8001686:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800168a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800168e:	d90d      	bls.n	80016ac <__aeabi_f2iz+0x30>
 8001690:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001694:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001698:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800169c:	fa23 f002 	lsr.w	r0, r3, r2
 80016a0:	bf18      	it	ne
 80016a2:	4240      	negne	r0, r0
 80016a4:	4770      	bx	lr
 80016a6:	f04f 0000 	mov.w	r0, #0
 80016aa:	4770      	bx	lr
 80016ac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80016b0:	d101      	bne.n	80016b6 <__aeabi_f2iz+0x3a>
 80016b2:	0242      	lsls	r2, r0, #9
 80016b4:	d105      	bne.n	80016c2 <__aeabi_f2iz+0x46>
 80016b6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80016ba:	bf08      	it	eq
 80016bc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80016c0:	4770      	bx	lr
 80016c2:	f04f 0000 	mov.w	r0, #0
 80016c6:	4770      	bx	lr

080016c8 <__aeabi_drsub>:
 80016c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80016cc:	e002      	b.n	80016d4 <__adddf3>
 80016ce:	bf00      	nop

080016d0 <__aeabi_dsub>:
 80016d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080016d4 <__adddf3>:
 80016d4:	b530      	push	{r4, r5, lr}
 80016d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80016da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80016de:	ea94 0f05 	teq	r4, r5
 80016e2:	bf08      	it	eq
 80016e4:	ea90 0f02 	teqeq	r0, r2
 80016e8:	bf1f      	itttt	ne
 80016ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80016ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80016f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80016f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80016fa:	f000 80e2 	beq.w	80018c2 <__adddf3+0x1ee>
 80016fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8001702:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8001706:	bfb8      	it	lt
 8001708:	426d      	neglt	r5, r5
 800170a:	dd0c      	ble.n	8001726 <__adddf3+0x52>
 800170c:	442c      	add	r4, r5
 800170e:	ea80 0202 	eor.w	r2, r0, r2
 8001712:	ea81 0303 	eor.w	r3, r1, r3
 8001716:	ea82 0000 	eor.w	r0, r2, r0
 800171a:	ea83 0101 	eor.w	r1, r3, r1
 800171e:	ea80 0202 	eor.w	r2, r0, r2
 8001722:	ea81 0303 	eor.w	r3, r1, r3
 8001726:	2d36      	cmp	r5, #54	@ 0x36
 8001728:	bf88      	it	hi
 800172a:	bd30      	pophi	{r4, r5, pc}
 800172c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8001730:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001734:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8001738:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800173c:	d002      	beq.n	8001744 <__adddf3+0x70>
 800173e:	4240      	negs	r0, r0
 8001740:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001744:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8001748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800174c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8001750:	d002      	beq.n	8001758 <__adddf3+0x84>
 8001752:	4252      	negs	r2, r2
 8001754:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001758:	ea94 0f05 	teq	r4, r5
 800175c:	f000 80a7 	beq.w	80018ae <__adddf3+0x1da>
 8001760:	f1a4 0401 	sub.w	r4, r4, #1
 8001764:	f1d5 0e20 	rsbs	lr, r5, #32
 8001768:	db0d      	blt.n	8001786 <__adddf3+0xb2>
 800176a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800176e:	fa22 f205 	lsr.w	r2, r2, r5
 8001772:	1880      	adds	r0, r0, r2
 8001774:	f141 0100 	adc.w	r1, r1, #0
 8001778:	fa03 f20e 	lsl.w	r2, r3, lr
 800177c:	1880      	adds	r0, r0, r2
 800177e:	fa43 f305 	asr.w	r3, r3, r5
 8001782:	4159      	adcs	r1, r3
 8001784:	e00e      	b.n	80017a4 <__adddf3+0xd0>
 8001786:	f1a5 0520 	sub.w	r5, r5, #32
 800178a:	f10e 0e20 	add.w	lr, lr, #32
 800178e:	2a01      	cmp	r2, #1
 8001790:	fa03 fc0e 	lsl.w	ip, r3, lr
 8001794:	bf28      	it	cs
 8001796:	f04c 0c02 	orrcs.w	ip, ip, #2
 800179a:	fa43 f305 	asr.w	r3, r3, r5
 800179e:	18c0      	adds	r0, r0, r3
 80017a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80017a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80017a8:	d507      	bpl.n	80017ba <__adddf3+0xe6>
 80017aa:	f04f 0e00 	mov.w	lr, #0
 80017ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80017b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80017b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80017ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80017be:	d31b      	bcc.n	80017f8 <__adddf3+0x124>
 80017c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80017c4:	d30c      	bcc.n	80017e0 <__adddf3+0x10c>
 80017c6:	0849      	lsrs	r1, r1, #1
 80017c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80017cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80017d0:	f104 0401 	add.w	r4, r4, #1
 80017d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80017d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80017dc:	f080 809a 	bcs.w	8001914 <__adddf3+0x240>
 80017e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80017e4:	bf08      	it	eq
 80017e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80017ea:	f150 0000 	adcs.w	r0, r0, #0
 80017ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80017f2:	ea41 0105 	orr.w	r1, r1, r5
 80017f6:	bd30      	pop	{r4, r5, pc}
 80017f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80017fc:	4140      	adcs	r0, r0
 80017fe:	eb41 0101 	adc.w	r1, r1, r1
 8001802:	3c01      	subs	r4, #1
 8001804:	bf28      	it	cs
 8001806:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800180a:	d2e9      	bcs.n	80017e0 <__adddf3+0x10c>
 800180c:	f091 0f00 	teq	r1, #0
 8001810:	bf04      	itt	eq
 8001812:	4601      	moveq	r1, r0
 8001814:	2000      	moveq	r0, #0
 8001816:	fab1 f381 	clz	r3, r1
 800181a:	bf08      	it	eq
 800181c:	3320      	addeq	r3, #32
 800181e:	f1a3 030b 	sub.w	r3, r3, #11
 8001822:	f1b3 0220 	subs.w	r2, r3, #32
 8001826:	da0c      	bge.n	8001842 <__adddf3+0x16e>
 8001828:	320c      	adds	r2, #12
 800182a:	dd08      	ble.n	800183e <__adddf3+0x16a>
 800182c:	f102 0c14 	add.w	ip, r2, #20
 8001830:	f1c2 020c 	rsb	r2, r2, #12
 8001834:	fa01 f00c 	lsl.w	r0, r1, ip
 8001838:	fa21 f102 	lsr.w	r1, r1, r2
 800183c:	e00c      	b.n	8001858 <__adddf3+0x184>
 800183e:	f102 0214 	add.w	r2, r2, #20
 8001842:	bfd8      	it	le
 8001844:	f1c2 0c20 	rsble	ip, r2, #32
 8001848:	fa01 f102 	lsl.w	r1, r1, r2
 800184c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8001850:	bfdc      	itt	le
 8001852:	ea41 010c 	orrle.w	r1, r1, ip
 8001856:	4090      	lslle	r0, r2
 8001858:	1ae4      	subs	r4, r4, r3
 800185a:	bfa2      	ittt	ge
 800185c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8001860:	4329      	orrge	r1, r5
 8001862:	bd30      	popge	{r4, r5, pc}
 8001864:	ea6f 0404 	mvn.w	r4, r4
 8001868:	3c1f      	subs	r4, #31
 800186a:	da1c      	bge.n	80018a6 <__adddf3+0x1d2>
 800186c:	340c      	adds	r4, #12
 800186e:	dc0e      	bgt.n	800188e <__adddf3+0x1ba>
 8001870:	f104 0414 	add.w	r4, r4, #20
 8001874:	f1c4 0220 	rsb	r2, r4, #32
 8001878:	fa20 f004 	lsr.w	r0, r0, r4
 800187c:	fa01 f302 	lsl.w	r3, r1, r2
 8001880:	ea40 0003 	orr.w	r0, r0, r3
 8001884:	fa21 f304 	lsr.w	r3, r1, r4
 8001888:	ea45 0103 	orr.w	r1, r5, r3
 800188c:	bd30      	pop	{r4, r5, pc}
 800188e:	f1c4 040c 	rsb	r4, r4, #12
 8001892:	f1c4 0220 	rsb	r2, r4, #32
 8001896:	fa20 f002 	lsr.w	r0, r0, r2
 800189a:	fa01 f304 	lsl.w	r3, r1, r4
 800189e:	ea40 0003 	orr.w	r0, r0, r3
 80018a2:	4629      	mov	r1, r5
 80018a4:	bd30      	pop	{r4, r5, pc}
 80018a6:	fa21 f004 	lsr.w	r0, r1, r4
 80018aa:	4629      	mov	r1, r5
 80018ac:	bd30      	pop	{r4, r5, pc}
 80018ae:	f094 0f00 	teq	r4, #0
 80018b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80018b6:	bf06      	itte	eq
 80018b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80018bc:	3401      	addeq	r4, #1
 80018be:	3d01      	subne	r5, #1
 80018c0:	e74e      	b.n	8001760 <__adddf3+0x8c>
 80018c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80018c6:	bf18      	it	ne
 80018c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80018cc:	d029      	beq.n	8001922 <__adddf3+0x24e>
 80018ce:	ea94 0f05 	teq	r4, r5
 80018d2:	bf08      	it	eq
 80018d4:	ea90 0f02 	teqeq	r0, r2
 80018d8:	d005      	beq.n	80018e6 <__adddf3+0x212>
 80018da:	ea54 0c00 	orrs.w	ip, r4, r0
 80018de:	bf04      	itt	eq
 80018e0:	4619      	moveq	r1, r3
 80018e2:	4610      	moveq	r0, r2
 80018e4:	bd30      	pop	{r4, r5, pc}
 80018e6:	ea91 0f03 	teq	r1, r3
 80018ea:	bf1e      	ittt	ne
 80018ec:	2100      	movne	r1, #0
 80018ee:	2000      	movne	r0, #0
 80018f0:	bd30      	popne	{r4, r5, pc}
 80018f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80018f6:	d105      	bne.n	8001904 <__adddf3+0x230>
 80018f8:	0040      	lsls	r0, r0, #1
 80018fa:	4149      	adcs	r1, r1
 80018fc:	bf28      	it	cs
 80018fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8001902:	bd30      	pop	{r4, r5, pc}
 8001904:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8001908:	bf3c      	itt	cc
 800190a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800190e:	bd30      	popcc	{r4, r5, pc}
 8001910:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8001914:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8001918:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800191c:	f04f 0000 	mov.w	r0, #0
 8001920:	bd30      	pop	{r4, r5, pc}
 8001922:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8001926:	bf1a      	itte	ne
 8001928:	4619      	movne	r1, r3
 800192a:	4610      	movne	r0, r2
 800192c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8001930:	bf1c      	itt	ne
 8001932:	460b      	movne	r3, r1
 8001934:	4602      	movne	r2, r0
 8001936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800193a:	bf06      	itte	eq
 800193c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8001940:	ea91 0f03 	teqeq	r1, r3
 8001944:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8001948:	bd30      	pop	{r4, r5, pc}
 800194a:	bf00      	nop

0800194c <__aeabi_ui2d>:
 800194c:	f090 0f00 	teq	r0, #0
 8001950:	bf04      	itt	eq
 8001952:	2100      	moveq	r1, #0
 8001954:	4770      	bxeq	lr
 8001956:	b530      	push	{r4, r5, lr}
 8001958:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800195c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8001960:	f04f 0500 	mov.w	r5, #0
 8001964:	f04f 0100 	mov.w	r1, #0
 8001968:	e750      	b.n	800180c <__adddf3+0x138>
 800196a:	bf00      	nop

0800196c <__aeabi_i2d>:
 800196c:	f090 0f00 	teq	r0, #0
 8001970:	bf04      	itt	eq
 8001972:	2100      	moveq	r1, #0
 8001974:	4770      	bxeq	lr
 8001976:	b530      	push	{r4, r5, lr}
 8001978:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800197c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8001980:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8001984:	bf48      	it	mi
 8001986:	4240      	negmi	r0, r0
 8001988:	f04f 0100 	mov.w	r1, #0
 800198c:	e73e      	b.n	800180c <__adddf3+0x138>
 800198e:	bf00      	nop

08001990 <__aeabi_f2d>:
 8001990:	0042      	lsls	r2, r0, #1
 8001992:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8001996:	ea4f 0131 	mov.w	r1, r1, rrx
 800199a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800199e:	bf1f      	itttt	ne
 80019a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80019a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80019a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80019ac:	4770      	bxne	lr
 80019ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80019b2:	bf08      	it	eq
 80019b4:	4770      	bxeq	lr
 80019b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80019ba:	bf04      	itt	eq
 80019bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80019c0:	4770      	bxeq	lr
 80019c2:	b530      	push	{r4, r5, lr}
 80019c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80019c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80019cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80019d0:	e71c      	b.n	800180c <__adddf3+0x138>
 80019d2:	bf00      	nop

080019d4 <__aeabi_ul2d>:
 80019d4:	ea50 0201 	orrs.w	r2, r0, r1
 80019d8:	bf08      	it	eq
 80019da:	4770      	bxeq	lr
 80019dc:	b530      	push	{r4, r5, lr}
 80019de:	f04f 0500 	mov.w	r5, #0
 80019e2:	e00a      	b.n	80019fa <__aeabi_l2d+0x16>

080019e4 <__aeabi_l2d>:
 80019e4:	ea50 0201 	orrs.w	r2, r0, r1
 80019e8:	bf08      	it	eq
 80019ea:	4770      	bxeq	lr
 80019ec:	b530      	push	{r4, r5, lr}
 80019ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80019f2:	d502      	bpl.n	80019fa <__aeabi_l2d+0x16>
 80019f4:	4240      	negs	r0, r0
 80019f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80019fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80019fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8001a02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8001a06:	f43f aed8 	beq.w	80017ba <__adddf3+0xe6>
 8001a0a:	f04f 0203 	mov.w	r2, #3
 8001a0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001a12:	bf18      	it	ne
 8001a14:	3203      	addne	r2, #3
 8001a16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001a1a:	bf18      	it	ne
 8001a1c:	3203      	addne	r2, #3
 8001a1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8001a22:	f1c2 0320 	rsb	r3, r2, #32
 8001a26:	fa00 fc03 	lsl.w	ip, r0, r3
 8001a2a:	fa20 f002 	lsr.w	r0, r0, r2
 8001a2e:	fa01 fe03 	lsl.w	lr, r1, r3
 8001a32:	ea40 000e 	orr.w	r0, r0, lr
 8001a36:	fa21 f102 	lsr.w	r1, r1, r2
 8001a3a:	4414      	add	r4, r2
 8001a3c:	e6bd      	b.n	80017ba <__adddf3+0xe6>
 8001a3e:	bf00      	nop

08001a40 <__aeabi_dmul>:
 8001a40:	b570      	push	{r4, r5, r6, lr}
 8001a42:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8001a46:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8001a4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001a4e:	bf1d      	ittte	ne
 8001a50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001a54:	ea94 0f0c 	teqne	r4, ip
 8001a58:	ea95 0f0c 	teqne	r5, ip
 8001a5c:	f000 f8de 	bleq	8001c1c <__aeabi_dmul+0x1dc>
 8001a60:	442c      	add	r4, r5
 8001a62:	ea81 0603 	eor.w	r6, r1, r3
 8001a66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8001a6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8001a6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8001a72:	bf18      	it	ne
 8001a74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8001a78:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8001a7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a80:	d038      	beq.n	8001af4 <__aeabi_dmul+0xb4>
 8001a82:	fba0 ce02 	umull	ip, lr, r0, r2
 8001a86:	f04f 0500 	mov.w	r5, #0
 8001a8a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8001a8e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8001a92:	fbe0 e503 	umlal	lr, r5, r0, r3
 8001a96:	f04f 0600 	mov.w	r6, #0
 8001a9a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8001a9e:	f09c 0f00 	teq	ip, #0
 8001aa2:	bf18      	it	ne
 8001aa4:	f04e 0e01 	orrne.w	lr, lr, #1
 8001aa8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8001aac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8001ab0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8001ab4:	d204      	bcs.n	8001ac0 <__aeabi_dmul+0x80>
 8001ab6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8001aba:	416d      	adcs	r5, r5
 8001abc:	eb46 0606 	adc.w	r6, r6, r6
 8001ac0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8001ac4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8001ac8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8001acc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8001ad0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8001ad4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8001ad8:	bf88      	it	hi
 8001ada:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8001ade:	d81e      	bhi.n	8001b1e <__aeabi_dmul+0xde>
 8001ae0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8001ae4:	bf08      	it	eq
 8001ae6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8001aea:	f150 0000 	adcs.w	r0, r0, #0
 8001aee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001af2:	bd70      	pop	{r4, r5, r6, pc}
 8001af4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8001af8:	ea46 0101 	orr.w	r1, r6, r1
 8001afc:	ea40 0002 	orr.w	r0, r0, r2
 8001b00:	ea81 0103 	eor.w	r1, r1, r3
 8001b04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001b08:	bfc2      	ittt	gt
 8001b0a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001b0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001b12:	bd70      	popgt	{r4, r5, r6, pc}
 8001b14:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8001b18:	f04f 0e00 	mov.w	lr, #0
 8001b1c:	3c01      	subs	r4, #1
 8001b1e:	f300 80ab 	bgt.w	8001c78 <__aeabi_dmul+0x238>
 8001b22:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8001b26:	bfde      	ittt	le
 8001b28:	2000      	movle	r0, #0
 8001b2a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8001b2e:	bd70      	pople	{r4, r5, r6, pc}
 8001b30:	f1c4 0400 	rsb	r4, r4, #0
 8001b34:	3c20      	subs	r4, #32
 8001b36:	da35      	bge.n	8001ba4 <__aeabi_dmul+0x164>
 8001b38:	340c      	adds	r4, #12
 8001b3a:	dc1b      	bgt.n	8001b74 <__aeabi_dmul+0x134>
 8001b3c:	f104 0414 	add.w	r4, r4, #20
 8001b40:	f1c4 0520 	rsb	r5, r4, #32
 8001b44:	fa00 f305 	lsl.w	r3, r0, r5
 8001b48:	fa20 f004 	lsr.w	r0, r0, r4
 8001b4c:	fa01 f205 	lsl.w	r2, r1, r5
 8001b50:	ea40 0002 	orr.w	r0, r0, r2
 8001b54:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8001b58:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8001b5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001b60:	fa21 f604 	lsr.w	r6, r1, r4
 8001b64:	eb42 0106 	adc.w	r1, r2, r6
 8001b68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001b6c:	bf08      	it	eq
 8001b6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001b72:	bd70      	pop	{r4, r5, r6, pc}
 8001b74:	f1c4 040c 	rsb	r4, r4, #12
 8001b78:	f1c4 0520 	rsb	r5, r4, #32
 8001b7c:	fa00 f304 	lsl.w	r3, r0, r4
 8001b80:	fa20 f005 	lsr.w	r0, r0, r5
 8001b84:	fa01 f204 	lsl.w	r2, r1, r4
 8001b88:	ea40 0002 	orr.w	r0, r0, r2
 8001b8c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8001b90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001b94:	f141 0100 	adc.w	r1, r1, #0
 8001b98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001b9c:	bf08      	it	eq
 8001b9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001ba2:	bd70      	pop	{r4, r5, r6, pc}
 8001ba4:	f1c4 0520 	rsb	r5, r4, #32
 8001ba8:	fa00 f205 	lsl.w	r2, r0, r5
 8001bac:	ea4e 0e02 	orr.w	lr, lr, r2
 8001bb0:	fa20 f304 	lsr.w	r3, r0, r4
 8001bb4:	fa01 f205 	lsl.w	r2, r1, r5
 8001bb8:	ea43 0302 	orr.w	r3, r3, r2
 8001bbc:	fa21 f004 	lsr.w	r0, r1, r4
 8001bc0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8001bc4:	fa21 f204 	lsr.w	r2, r1, r4
 8001bc8:	ea20 0002 	bic.w	r0, r0, r2
 8001bcc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8001bd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001bd4:	bf08      	it	eq
 8001bd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001bda:	bd70      	pop	{r4, r5, r6, pc}
 8001bdc:	f094 0f00 	teq	r4, #0
 8001be0:	d10f      	bne.n	8001c02 <__aeabi_dmul+0x1c2>
 8001be2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8001be6:	0040      	lsls	r0, r0, #1
 8001be8:	eb41 0101 	adc.w	r1, r1, r1
 8001bec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8001bf0:	bf08      	it	eq
 8001bf2:	3c01      	subeq	r4, #1
 8001bf4:	d0f7      	beq.n	8001be6 <__aeabi_dmul+0x1a6>
 8001bf6:	ea41 0106 	orr.w	r1, r1, r6
 8001bfa:	f095 0f00 	teq	r5, #0
 8001bfe:	bf18      	it	ne
 8001c00:	4770      	bxne	lr
 8001c02:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8001c06:	0052      	lsls	r2, r2, #1
 8001c08:	eb43 0303 	adc.w	r3, r3, r3
 8001c0c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8001c10:	bf08      	it	eq
 8001c12:	3d01      	subeq	r5, #1
 8001c14:	d0f7      	beq.n	8001c06 <__aeabi_dmul+0x1c6>
 8001c16:	ea43 0306 	orr.w	r3, r3, r6
 8001c1a:	4770      	bx	lr
 8001c1c:	ea94 0f0c 	teq	r4, ip
 8001c20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001c24:	bf18      	it	ne
 8001c26:	ea95 0f0c 	teqne	r5, ip
 8001c2a:	d00c      	beq.n	8001c46 <__aeabi_dmul+0x206>
 8001c2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001c30:	bf18      	it	ne
 8001c32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001c36:	d1d1      	bne.n	8001bdc <__aeabi_dmul+0x19c>
 8001c38:	ea81 0103 	eor.w	r1, r1, r3
 8001c3c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8001c40:	f04f 0000 	mov.w	r0, #0
 8001c44:	bd70      	pop	{r4, r5, r6, pc}
 8001c46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001c4a:	bf06      	itte	eq
 8001c4c:	4610      	moveq	r0, r2
 8001c4e:	4619      	moveq	r1, r3
 8001c50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001c54:	d019      	beq.n	8001c8a <__aeabi_dmul+0x24a>
 8001c56:	ea94 0f0c 	teq	r4, ip
 8001c5a:	d102      	bne.n	8001c62 <__aeabi_dmul+0x222>
 8001c5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001c60:	d113      	bne.n	8001c8a <__aeabi_dmul+0x24a>
 8001c62:	ea95 0f0c 	teq	r5, ip
 8001c66:	d105      	bne.n	8001c74 <__aeabi_dmul+0x234>
 8001c68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001c6c:	bf1c      	itt	ne
 8001c6e:	4610      	movne	r0, r2
 8001c70:	4619      	movne	r1, r3
 8001c72:	d10a      	bne.n	8001c8a <__aeabi_dmul+0x24a>
 8001c74:	ea81 0103 	eor.w	r1, r1, r3
 8001c78:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8001c7c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8001c80:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8001c84:	f04f 0000 	mov.w	r0, #0
 8001c88:	bd70      	pop	{r4, r5, r6, pc}
 8001c8a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8001c8e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8001c92:	bd70      	pop	{r4, r5, r6, pc}

08001c94 <__aeabi_ddiv>:
 8001c94:	b570      	push	{r4, r5, r6, lr}
 8001c96:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8001c9a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8001c9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001ca2:	bf1d      	ittte	ne
 8001ca4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001ca8:	ea94 0f0c 	teqne	r4, ip
 8001cac:	ea95 0f0c 	teqne	r5, ip
 8001cb0:	f000 f8a7 	bleq	8001e02 <__aeabi_ddiv+0x16e>
 8001cb4:	eba4 0405 	sub.w	r4, r4, r5
 8001cb8:	ea81 0e03 	eor.w	lr, r1, r3
 8001cbc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001cc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001cc4:	f000 8088 	beq.w	8001dd8 <__aeabi_ddiv+0x144>
 8001cc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001ccc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8001cd0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8001cd4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8001cd8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8001cdc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8001ce0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8001ce4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8001ce8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8001cec:	429d      	cmp	r5, r3
 8001cee:	bf08      	it	eq
 8001cf0:	4296      	cmpeq	r6, r2
 8001cf2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8001cf6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8001cfa:	d202      	bcs.n	8001d02 <__aeabi_ddiv+0x6e>
 8001cfc:	085b      	lsrs	r3, r3, #1
 8001cfe:	ea4f 0232 	mov.w	r2, r2, rrx
 8001d02:	1ab6      	subs	r6, r6, r2
 8001d04:	eb65 0503 	sbc.w	r5, r5, r3
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8001d0e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001d12:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8001d16:	ebb6 0e02 	subs.w	lr, r6, r2
 8001d1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001d1e:	bf22      	ittt	cs
 8001d20:	1ab6      	subcs	r6, r6, r2
 8001d22:	4675      	movcs	r5, lr
 8001d24:	ea40 000c 	orrcs.w	r0, r0, ip
 8001d28:	085b      	lsrs	r3, r3, #1
 8001d2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8001d2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001d32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001d36:	bf22      	ittt	cs
 8001d38:	1ab6      	subcs	r6, r6, r2
 8001d3a:	4675      	movcs	r5, lr
 8001d3c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001d40:	085b      	lsrs	r3, r3, #1
 8001d42:	ea4f 0232 	mov.w	r2, r2, rrx
 8001d46:	ebb6 0e02 	subs.w	lr, r6, r2
 8001d4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001d4e:	bf22      	ittt	cs
 8001d50:	1ab6      	subcs	r6, r6, r2
 8001d52:	4675      	movcs	r5, lr
 8001d54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001d58:	085b      	lsrs	r3, r3, #1
 8001d5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8001d5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001d62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001d66:	bf22      	ittt	cs
 8001d68:	1ab6      	subcs	r6, r6, r2
 8001d6a:	4675      	movcs	r5, lr
 8001d6c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001d70:	ea55 0e06 	orrs.w	lr, r5, r6
 8001d74:	d018      	beq.n	8001da8 <__aeabi_ddiv+0x114>
 8001d76:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8001d7a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001d7e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8001d82:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001d86:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8001d8a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8001d8e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8001d92:	d1c0      	bne.n	8001d16 <__aeabi_ddiv+0x82>
 8001d94:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8001d98:	d10b      	bne.n	8001db2 <__aeabi_ddiv+0x11e>
 8001d9a:	ea41 0100 	orr.w	r1, r1, r0
 8001d9e:	f04f 0000 	mov.w	r0, #0
 8001da2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8001da6:	e7b6      	b.n	8001d16 <__aeabi_ddiv+0x82>
 8001da8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8001dac:	bf04      	itt	eq
 8001dae:	4301      	orreq	r1, r0
 8001db0:	2000      	moveq	r0, #0
 8001db2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8001db6:	bf88      	it	hi
 8001db8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8001dbc:	f63f aeaf 	bhi.w	8001b1e <__aeabi_dmul+0xde>
 8001dc0:	ebb5 0c03 	subs.w	ip, r5, r3
 8001dc4:	bf04      	itt	eq
 8001dc6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8001dca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001dce:	f150 0000 	adcs.w	r0, r0, #0
 8001dd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}
 8001dd8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8001ddc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001de0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8001de4:	bfc2      	ittt	gt
 8001de6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001dea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001dee:	bd70      	popgt	{r4, r5, r6, pc}
 8001df0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8001df4:	f04f 0e00 	mov.w	lr, #0
 8001df8:	3c01      	subs	r4, #1
 8001dfa:	e690      	b.n	8001b1e <__aeabi_dmul+0xde>
 8001dfc:	ea45 0e06 	orr.w	lr, r5, r6
 8001e00:	e68d      	b.n	8001b1e <__aeabi_dmul+0xde>
 8001e02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001e06:	ea94 0f0c 	teq	r4, ip
 8001e0a:	bf08      	it	eq
 8001e0c:	ea95 0f0c 	teqeq	r5, ip
 8001e10:	f43f af3b 	beq.w	8001c8a <__aeabi_dmul+0x24a>
 8001e14:	ea94 0f0c 	teq	r4, ip
 8001e18:	d10a      	bne.n	8001e30 <__aeabi_ddiv+0x19c>
 8001e1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001e1e:	f47f af34 	bne.w	8001c8a <__aeabi_dmul+0x24a>
 8001e22:	ea95 0f0c 	teq	r5, ip
 8001e26:	f47f af25 	bne.w	8001c74 <__aeabi_dmul+0x234>
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	e72c      	b.n	8001c8a <__aeabi_dmul+0x24a>
 8001e30:	ea95 0f0c 	teq	r5, ip
 8001e34:	d106      	bne.n	8001e44 <__aeabi_ddiv+0x1b0>
 8001e36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001e3a:	f43f aefd 	beq.w	8001c38 <__aeabi_dmul+0x1f8>
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	e722      	b.n	8001c8a <__aeabi_dmul+0x24a>
 8001e44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001e48:	bf18      	it	ne
 8001e4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001e4e:	f47f aec5 	bne.w	8001bdc <__aeabi_dmul+0x19c>
 8001e52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8001e56:	f47f af0d 	bne.w	8001c74 <__aeabi_dmul+0x234>
 8001e5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001e5e:	f47f aeeb 	bne.w	8001c38 <__aeabi_dmul+0x1f8>
 8001e62:	e712      	b.n	8001c8a <__aeabi_dmul+0x24a>

08001e64 <__aeabi_d2f>:
 8001e64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8001e68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8001e6c:	bf24      	itt	cs
 8001e6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8001e72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8001e76:	d90d      	bls.n	8001e94 <__aeabi_d2f+0x30>
 8001e78:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001e7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8001e80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8001e84:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001e88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8001e8c:	bf08      	it	eq
 8001e8e:	f020 0001 	biceq.w	r0, r0, #1
 8001e92:	4770      	bx	lr
 8001e94:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8001e98:	d121      	bne.n	8001ede <__aeabi_d2f+0x7a>
 8001e9a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8001e9e:	bfbc      	itt	lt
 8001ea0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8001ea4:	4770      	bxlt	lr
 8001ea6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8001eaa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8001eae:	f1c2 0218 	rsb	r2, r2, #24
 8001eb2:	f1c2 0c20 	rsb	ip, r2, #32
 8001eb6:	fa10 f30c 	lsls.w	r3, r0, ip
 8001eba:	fa20 f002 	lsr.w	r0, r0, r2
 8001ebe:	bf18      	it	ne
 8001ec0:	f040 0001 	orrne.w	r0, r0, #1
 8001ec4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001ec8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001ecc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8001ed0:	ea40 000c 	orr.w	r0, r0, ip
 8001ed4:	fa23 f302 	lsr.w	r3, r3, r2
 8001ed8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001edc:	e7cc      	b.n	8001e78 <__aeabi_d2f+0x14>
 8001ede:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8001ee2:	d107      	bne.n	8001ef4 <__aeabi_d2f+0x90>
 8001ee4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8001ee8:	bf1e      	ittt	ne
 8001eea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8001eee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8001ef2:	4770      	bxne	lr
 8001ef4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8001ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8001efc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop

08001f04 <__aeabi_f2uiz>:
 8001f04:	0042      	lsls	r2, r0, #1
 8001f06:	d20e      	bcs.n	8001f26 <__aeabi_f2uiz+0x22>
 8001f08:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001f0c:	d30b      	bcc.n	8001f26 <__aeabi_f2uiz+0x22>
 8001f0e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001f12:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001f16:	d409      	bmi.n	8001f2c <__aeabi_f2uiz+0x28>
 8001f18:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001f1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f20:	fa23 f002 	lsr.w	r0, r3, r2
 8001f24:	4770      	bx	lr
 8001f26:	f04f 0000 	mov.w	r0, #0
 8001f2a:	4770      	bx	lr
 8001f2c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001f30:	d101      	bne.n	8001f36 <__aeabi_f2uiz+0x32>
 8001f32:	0242      	lsls	r2, r0, #9
 8001f34:	d102      	bne.n	8001f3c <__aeabi_f2uiz+0x38>
 8001f36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f3a:	4770      	bx	lr
 8001f3c:	f04f 0000 	mov.w	r0, #0
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop

08001f44 <memset>:
 8001f44:	0783      	lsls	r3, r0, #30
 8001f46:	b530      	push	{r4, r5, lr}
 8001f48:	d047      	beq.n	8001fda <memset+0x96>
 8001f4a:	1e54      	subs	r4, r2, #1
 8001f4c:	2a00      	cmp	r2, #0
 8001f4e:	d03e      	beq.n	8001fce <memset+0x8a>
 8001f50:	b2ca      	uxtb	r2, r1
 8001f52:	4603      	mov	r3, r0
 8001f54:	e001      	b.n	8001f5a <memset+0x16>
 8001f56:	3c01      	subs	r4, #1
 8001f58:	d339      	bcc.n	8001fce <memset+0x8a>
 8001f5a:	f803 2b01 	strb.w	r2, [r3], #1
 8001f5e:	079d      	lsls	r5, r3, #30
 8001f60:	d1f9      	bne.n	8001f56 <memset+0x12>
 8001f62:	2c03      	cmp	r4, #3
 8001f64:	d92c      	bls.n	8001fc0 <memset+0x7c>
 8001f66:	b2cd      	uxtb	r5, r1
 8001f68:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 8001f6c:	2c0f      	cmp	r4, #15
 8001f6e:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8001f72:	d935      	bls.n	8001fe0 <memset+0x9c>
 8001f74:	f1a4 0210 	sub.w	r2, r4, #16
 8001f78:	f022 0c0f 	bic.w	ip, r2, #15
 8001f7c:	f103 0e10 	add.w	lr, r3, #16
 8001f80:	44e6      	add	lr, ip
 8001f82:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8001f86:	461a      	mov	r2, r3
 8001f88:	e9c2 5500 	strd	r5, r5, [r2]
 8001f8c:	e9c2 5502 	strd	r5, r5, [r2, #8]
 8001f90:	3210      	adds	r2, #16
 8001f92:	4572      	cmp	r2, lr
 8001f94:	d1f8      	bne.n	8001f88 <memset+0x44>
 8001f96:	f10c 0201 	add.w	r2, ip, #1
 8001f9a:	f014 0f0c 	tst.w	r4, #12
 8001f9e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001fa2:	f004 0c0f 	and.w	ip, r4, #15
 8001fa6:	d013      	beq.n	8001fd0 <memset+0x8c>
 8001fa8:	f1ac 0304 	sub.w	r3, ip, #4
 8001fac:	f023 0303 	bic.w	r3, r3, #3
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f842 5b04 	str.w	r5, [r2], #4
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d1fb      	bne.n	8001fb4 <memset+0x70>
 8001fbc:	f00c 0403 	and.w	r4, ip, #3
 8001fc0:	b12c      	cbz	r4, 8001fce <memset+0x8a>
 8001fc2:	b2c9      	uxtb	r1, r1
 8001fc4:	441c      	add	r4, r3
 8001fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8001fca:	42a3      	cmp	r3, r4
 8001fcc:	d1fb      	bne.n	8001fc6 <memset+0x82>
 8001fce:	bd30      	pop	{r4, r5, pc}
 8001fd0:	4664      	mov	r4, ip
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	2c00      	cmp	r4, #0
 8001fd6:	d1f4      	bne.n	8001fc2 <memset+0x7e>
 8001fd8:	e7f9      	b.n	8001fce <memset+0x8a>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4614      	mov	r4, r2
 8001fde:	e7c0      	b.n	8001f62 <memset+0x1e>
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	46a4      	mov	ip, r4
 8001fe4:	e7e0      	b.n	8001fa8 <memset+0x64>
 8001fe6:	bf00      	nop

08001fe8 <memcpy>:
 8001fe8:	4684      	mov	ip, r0
 8001fea:	ea41 0300 	orr.w	r3, r1, r0
 8001fee:	f013 0303 	ands.w	r3, r3, #3
 8001ff2:	d16d      	bne.n	80020d0 <memcpy+0xe8>
 8001ff4:	3a40      	subs	r2, #64	@ 0x40
 8001ff6:	d341      	bcc.n	800207c <memcpy+0x94>
 8001ff8:	f851 3b04 	ldr.w	r3, [r1], #4
 8001ffc:	f840 3b04 	str.w	r3, [r0], #4
 8002000:	f851 3b04 	ldr.w	r3, [r1], #4
 8002004:	f840 3b04 	str.w	r3, [r0], #4
 8002008:	f851 3b04 	ldr.w	r3, [r1], #4
 800200c:	f840 3b04 	str.w	r3, [r0], #4
 8002010:	f851 3b04 	ldr.w	r3, [r1], #4
 8002014:	f840 3b04 	str.w	r3, [r0], #4
 8002018:	f851 3b04 	ldr.w	r3, [r1], #4
 800201c:	f840 3b04 	str.w	r3, [r0], #4
 8002020:	f851 3b04 	ldr.w	r3, [r1], #4
 8002024:	f840 3b04 	str.w	r3, [r0], #4
 8002028:	f851 3b04 	ldr.w	r3, [r1], #4
 800202c:	f840 3b04 	str.w	r3, [r0], #4
 8002030:	f851 3b04 	ldr.w	r3, [r1], #4
 8002034:	f840 3b04 	str.w	r3, [r0], #4
 8002038:	f851 3b04 	ldr.w	r3, [r1], #4
 800203c:	f840 3b04 	str.w	r3, [r0], #4
 8002040:	f851 3b04 	ldr.w	r3, [r1], #4
 8002044:	f840 3b04 	str.w	r3, [r0], #4
 8002048:	f851 3b04 	ldr.w	r3, [r1], #4
 800204c:	f840 3b04 	str.w	r3, [r0], #4
 8002050:	f851 3b04 	ldr.w	r3, [r1], #4
 8002054:	f840 3b04 	str.w	r3, [r0], #4
 8002058:	f851 3b04 	ldr.w	r3, [r1], #4
 800205c:	f840 3b04 	str.w	r3, [r0], #4
 8002060:	f851 3b04 	ldr.w	r3, [r1], #4
 8002064:	f840 3b04 	str.w	r3, [r0], #4
 8002068:	f851 3b04 	ldr.w	r3, [r1], #4
 800206c:	f840 3b04 	str.w	r3, [r0], #4
 8002070:	f851 3b04 	ldr.w	r3, [r1], #4
 8002074:	f840 3b04 	str.w	r3, [r0], #4
 8002078:	3a40      	subs	r2, #64	@ 0x40
 800207a:	d2bd      	bcs.n	8001ff8 <memcpy+0x10>
 800207c:	3230      	adds	r2, #48	@ 0x30
 800207e:	d311      	bcc.n	80020a4 <memcpy+0xbc>
 8002080:	f851 3b04 	ldr.w	r3, [r1], #4
 8002084:	f840 3b04 	str.w	r3, [r0], #4
 8002088:	f851 3b04 	ldr.w	r3, [r1], #4
 800208c:	f840 3b04 	str.w	r3, [r0], #4
 8002090:	f851 3b04 	ldr.w	r3, [r1], #4
 8002094:	f840 3b04 	str.w	r3, [r0], #4
 8002098:	f851 3b04 	ldr.w	r3, [r1], #4
 800209c:	f840 3b04 	str.w	r3, [r0], #4
 80020a0:	3a10      	subs	r2, #16
 80020a2:	d2ed      	bcs.n	8002080 <memcpy+0x98>
 80020a4:	320c      	adds	r2, #12
 80020a6:	d305      	bcc.n	80020b4 <memcpy+0xcc>
 80020a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80020ac:	f840 3b04 	str.w	r3, [r0], #4
 80020b0:	3a04      	subs	r2, #4
 80020b2:	d2f9      	bcs.n	80020a8 <memcpy+0xc0>
 80020b4:	3204      	adds	r2, #4
 80020b6:	d008      	beq.n	80020ca <memcpy+0xe2>
 80020b8:	07d2      	lsls	r2, r2, #31
 80020ba:	bf1c      	itt	ne
 80020bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80020c0:	f800 3b01 	strbne.w	r3, [r0], #1
 80020c4:	d301      	bcc.n	80020ca <memcpy+0xe2>
 80020c6:	880b      	ldrh	r3, [r1, #0]
 80020c8:	8003      	strh	r3, [r0, #0]
 80020ca:	4660      	mov	r0, ip
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	2a08      	cmp	r2, #8
 80020d2:	d313      	bcc.n	80020fc <memcpy+0x114>
 80020d4:	078b      	lsls	r3, r1, #30
 80020d6:	d08d      	beq.n	8001ff4 <memcpy+0xc>
 80020d8:	f010 0303 	ands.w	r3, r0, #3
 80020dc:	d08a      	beq.n	8001ff4 <memcpy+0xc>
 80020de:	f1c3 0304 	rsb	r3, r3, #4
 80020e2:	1ad2      	subs	r2, r2, r3
 80020e4:	07db      	lsls	r3, r3, #31
 80020e6:	bf1c      	itt	ne
 80020e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80020ec:	f800 3b01 	strbne.w	r3, [r0], #1
 80020f0:	d380      	bcc.n	8001ff4 <memcpy+0xc>
 80020f2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80020f6:	f820 3b02 	strh.w	r3, [r0], #2
 80020fa:	e77b      	b.n	8001ff4 <memcpy+0xc>
 80020fc:	3a04      	subs	r2, #4
 80020fe:	d3d9      	bcc.n	80020b4 <memcpy+0xcc>
 8002100:	3a01      	subs	r2, #1
 8002102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002106:	f800 3b01 	strb.w	r3, [r0], #1
 800210a:	d2f9      	bcs.n	8002100 <memcpy+0x118>
 800210c:	780b      	ldrb	r3, [r1, #0]
 800210e:	7003      	strb	r3, [r0, #0]
 8002110:	784b      	ldrb	r3, [r1, #1]
 8002112:	7043      	strb	r3, [r0, #1]
 8002114:	788b      	ldrb	r3, [r1, #2]
 8002116:	7083      	strb	r3, [r0, #2]
 8002118:	4660      	mov	r0, ip
 800211a:	4770      	bx	lr
 800211c:	0000      	movs	r0, r0
	...

08002120 <_ctl>:
  switch (operation) {
  case CHN_CTL_NOP:
    osalDbgCheck(arg == NULL);
    break;
  case CHN_CTL_INVALID:
    return HAL_RET_UNKNOWN_CTL;
 8002120:	2901      	cmp	r1, #1
#else
    return HAL_RET_UNKNOWN_CTL;
#endif
  }
  return HAL_RET_SUCCESS;
}
 8002122:	bf14      	ite	ne
 8002124:	f06f 0013 	mvnne.w	r0, #19
 8002128:	2000      	moveq	r0, #0
 800212a:	4770      	bx	lr
 800212c:	0000      	movs	r0, r0
	...

08002130 <dac_lld_put_channel>:
    osalDbgAssert(dacp->grpp->num_channels == 1 && channel == 1,
                                          "channel busy");
  }
#endif /* STM32_DAC_DUAL_MODE */

  switch (dacp->config->datamode) {
 8002130:	6903      	ldr	r3, [r0, #16]
 8002132:	791b      	ldrb	r3, [r3, #4]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d014      	beq.n	8002162 <dac_lld_put_channel+0x32>
 8002138:	2b02      	cmp	r3, #2
 800213a:	d008      	beq.n	800214e <dac_lld_put_channel+0x1e>
 800213c:	b983      	cbnz	r3, 8002160 <dac_lld_put_channel+0x30>
#endif
    if (channel == 0U) {
#if STM32_DAC_DUAL_MODE
      dacp->params->dac->DHR12R1 = (uint32_t)sample;
#else
      *(&dacp->params->dac->DHR12R1 + dacp->params->dataoffset) = (uint32_t)sample;
 800213e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002140:	6803      	ldr	r3, [r0, #0]
    if (channel == 0U) {
 8002142:	b9c1      	cbnz	r1, 8002176 <dac_lld_put_channel+0x46>
      *(&dacp->params->dac->DHR12R1 + dacp->params->dataoffset) = (uint32_t)sample;
 8002144:	3308      	adds	r3, #8
 8002146:	6841      	ldr	r1, [r0, #4]
 8002148:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800214c:	4770      	bx	lr
 800214e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002150:	6803      	ldr	r3, [r0, #0]
    break;
  case DAC_DHRM_8BIT_RIGHT:
#if STM32_DAC_DUAL_MODE
  case DAC_DHRM_8BIT_RIGHT_DUAL:
#endif
    if (channel == 0U) {
 8002152:	b921      	cbnz	r1, 800215e <dac_lld_put_channel+0x2e>
#if STM32_DAC_DUAL_MODE
      dacp->params->dac->DHR8R1 = (uint32_t)sample;
#else
      *(&dacp->params->dac->DHR8R1 + dacp->params->dataoffset) = (uint32_t)sample;
 8002154:	3310      	adds	r3, #16
 8002156:	6841      	ldr	r1, [r0, #4]
 8002158:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800215c:	4770      	bx	lr
#endif
    }
#if (STM32_HAS_DAC1_CH2 || STM32_HAS_DAC2_CH2 ||                            \
     STM32_HAS_DAC3_CH2 || STM32_HAS_DAC4_CH2)
    else {
      dacp->params->dac->DHR8R2 = (uint32_t)sample;
 800215e:	61da      	str	r2, [r3, #28]
    break;
  default:
    osalDbgAssert(false, "unexpected DAC mode");
    break;
  }
}
 8002160:	4770      	bx	lr
      *(&dacp->params->dac->DHR12R1 + dacp->params->dataoffset) = (uint32_t)sample;
 8002162:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002164:	6803      	ldr	r3, [r0, #0]
    if (channel == 0U) {
 8002166:	b921      	cbnz	r1, 8002172 <dac_lld_put_channel+0x42>
      *(&dacp->params->dac->DHR12L1 + dacp->params->dataoffset) = (uint32_t)sample;
 8002168:	330c      	adds	r3, #12
 800216a:	6841      	ldr	r1, [r0, #4]
 800216c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002170:	4770      	bx	lr
      dacp->params->dac->DHR12L2 = (uint32_t)sample;
 8002172:	619a      	str	r2, [r3, #24]
 8002174:	4770      	bx	lr
      dacp->params->dac->DHR12R2 = (uint32_t)sample;
 8002176:	615a      	str	r2, [r3, #20]
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	0000      	movs	r0, r0
	...

08002180 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8002180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8002184:	f002 0503 	and.w	r5, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8002188:	09d4      	lsrs	r4, r2, #7
  uint32_t bit     = 0;
 800218a:	f04f 0c00 	mov.w	ip, #0
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 800218e:	f04f 0801 	mov.w	r8, #1
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8002192:	46ae      	mov	lr, r5
      m2 = 3 << (bit * 2);
 8002194:	2703      	movs	r7, #3
      m4 = 15 << ((bit & 7) * 4);
 8002196:	260f      	movs	r6, #15
    if ((mask & 1) != 0) {
 8002198:	f001 0301 	and.w	r3, r1, #1
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
 800219c:	0849      	lsrs	r1, r1, #1
    if ((mask & 1) != 0) {
 800219e:	b3ab      	cbz	r3, 800220c <_pal_lld_setgroupmode+0x8c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80021a0:	f8d0 a004 	ldr.w	sl, [r0, #4]
      m1 = 1 << bit;
 80021a4:	fa08 f90c 	lsl.w	r9, r8, ip
      m2 = 3 << (bit * 2);
 80021a8:	ea4f 034c 	mov.w	r3, ip, lsl #1
      altrmask = altr << ((bit & 7) * 4);
 80021ac:	f00c 0207 	and.w	r2, ip, #7
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80021b0:	ea2a 0909 	bic.w	r9, sl, r9
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80021b4:	2d02      	cmp	r5, #2
      m2 = 3 << (bit * 2);
 80021b6:	fa07 f303 	lsl.w	r3, r7, r3
      altrmask = altr << ((bit & 7) * 4);
 80021ba:	ea4f 0282 	mov.w	r2, r2, lsl #2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80021be:	f8c0 9004 	str.w	r9, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80021c2:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80021c6:	ea29 0903 	bic.w	r9, r9, r3
 80021ca:	f8c0 9008 	str.w	r9, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80021ce:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80021d2:	ea29 0903 	bic.w	r9, r9, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80021d6:	ea6f 0303 	mvn.w	r3, r3
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80021da:	f8c0 900c 	str.w	r9, [r0, #12]
      m4 = 15 << ((bit & 7) * 4);
 80021de:	fa06 f902 	lsl.w	r9, r6, r2
      altrmask = altr << ((bit & 7) * 4);
 80021e2:	fa04 f202 	lsl.w	r2, r4, r2
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80021e6:	ea6f 0909 	mvn.w	r9, r9
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80021ea:	d014      	beq.n	8002216 <_pal_lld_setgroupmode+0x96>
        port->MODER   = (port->MODER & ~m2) | moder;
 80021ec:	f8d0 a000 	ldr.w	sl, [r0]
        if (bit < 8)
 80021f0:	f1bc 0f07 	cmp.w	ip, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 80021f4:	ea03 030a 	and.w	r3, r3, sl
 80021f8:	ea43 030e 	orr.w	r3, r3, lr
 80021fc:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 80021fe:	d81d      	bhi.n	800223c <_pal_lld_setgroupmode+0xbc>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8002200:	6a03      	ldr	r3, [r0, #32]
 8002202:	ea03 0309 	and.w	r3, r3, r9
 8002206:	4313      	orrs	r3, r2
 8002208:	6203      	str	r3, [r0, #32]
    if (!mask)
 800220a:	b1a9      	cbz	r1, 8002238 <_pal_lld_setgroupmode+0xb8>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 800220c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 8002210:	f10c 0c01 	add.w	ip, ip, #1
    if ((mask & 1) != 0) {
 8002214:	e7c0      	b.n	8002198 <_pal_lld_setgroupmode+0x18>
        if (bit < 8)
 8002216:	f1bc 0f07 	cmp.w	ip, #7
 800221a:	d815      	bhi.n	8002248 <_pal_lld_setgroupmode+0xc8>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800221c:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8002220:	ea0a 0909 	and.w	r9, sl, r9
 8002224:	ea49 0202 	orr.w	r2, r9, r2
 8002228:	6202      	str	r2, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 800222a:	6802      	ldr	r2, [r0, #0]
 800222c:	4013      	ands	r3, r2
 800222e:	ea43 030e 	orr.w	r3, r3, lr
 8002232:	6003      	str	r3, [r0, #0]
    if (!mask)
 8002234:	2900      	cmp	r1, #0
 8002236:	d1e9      	bne.n	800220c <_pal_lld_setgroupmode+0x8c>
  }
}
 8002238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 800223c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800223e:	ea03 0309 	and.w	r3, r3, r9
 8002242:	4313      	orrs	r3, r2
 8002244:	6243      	str	r3, [r0, #36]	@ 0x24
 8002246:	e7e0      	b.n	800220a <_pal_lld_setgroupmode+0x8a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8002248:	f8d0 a024 	ldr.w	sl, [r0, #36]	@ 0x24
 800224c:	ea0a 0909 	and.w	r9, sl, r9
 8002250:	ea49 0202 	orr.w	r2, r9, r2
 8002254:	6242      	str	r2, [r0, #36]	@ 0x24
 8002256:	e7e8      	b.n	800222a <_pal_lld_setgroupmode+0xaa>
	...

08002260 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8002260:	4a02      	ldr	r2, [pc, #8]	@ (800226c <notify3+0xc>)
 8002262:	6813      	ldr	r3, [r2, #0]
 8002264:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002268:	6013      	str	r3, [r2, #0]
}
 800226a:	4770      	bx	lr
 800226c:	40004800 	.word	0x40004800

08002270 <notify5>:

#if STM32_SERIAL_USE_UART5 || defined(__DOXYGEN__)
static void notify5(io_queue_t *qp) {

  (void)qp;
  UART5->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8002270:	4a02      	ldr	r2, [pc, #8]	@ (800227c <notify5+0xc>)
 8002272:	6813      	ldr	r3, [r2, #0]
 8002274:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002278:	6013      	str	r3, [r2, #0]
}
 800227a:	4770      	bx	lr
 800227c:	40005000 	.word	0x40005000

08002280 <__idle_thread>:
 */
static void __idle_thread(void *p) {

  (void)p;

  while (true) {
 8002280:	e7fe      	b.n	8002280 <__idle_thread>
 8002282:	bf00      	nop
	...

08002290 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8002290:	4b01      	ldr	r3, [pc, #4]	@ (8002298 <chTMStartMeasurementX+0x8>)
 8002292:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8002294:	6083      	str	r3, [r0, #8]
}
 8002296:	4770      	bx	lr
 8002298:	e0001000 	.word	0xe0001000
 800229c:	00000000 	.word	0x00000000

080022a0 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 80022a0:	4a0e      	ldr	r2, [pc, #56]	@ (80022dc <chTMStopMeasurementX+0x3c>)
 80022a2:	4b0f      	ldr	r3, [pc, #60]	@ (80022e0 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
 80022a4:	6881      	ldr	r1, [r0, #8]
 80022a6:	685b      	ldr	r3, [r3, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80022a8:	b410      	push	{r4}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 80022aa:	6894      	ldr	r4, [r2, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80022ac:	6902      	ldr	r2, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 80022ae:	1b1b      	subs	r3, r3, r4
  tmp->n++;
 80022b0:	68c4      	ldr	r4, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 80022b2:	1a5b      	subs	r3, r3, r1
  tmp->cumulative += (rttime_t)tmp->last;
 80022b4:	6941      	ldr	r1, [r0, #20]
  tmp->n++;
 80022b6:	3401      	adds	r4, #1
  tmp->cumulative += (rttime_t)tmp->last;
 80022b8:	18d2      	adds	r2, r2, r3
 80022ba:	6102      	str	r2, [r0, #16]
 80022bc:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 80022c0:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 80022c2:	6141      	str	r1, [r0, #20]
  if (tmp->last > tmp->worst) {
 80022c4:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80022c6:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 80022c8:	bf88      	it	hi
 80022ca:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 80022cc:	4293      	cmp	r3, r2
  tmp->n++;
 80022ce:	e9c0 3402 	strd	r3, r4, [r0, #8]
    tmp->best = tmp->last;
 80022d2:	bf38      	it	cc
 80022d4:	6003      	strcc	r3, [r0, #0]
}
 80022d6:	bc10      	pop	{r4}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	240002dc 	.word	0x240002dc
 80022e0:	e0001000 	.word	0xe0001000
	...

080022f0 <chCoreAllocFromTop>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80022f0:	2330      	movs	r3, #48	@ 0x30
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80022f2:	b410      	push	{r4}
 80022f4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80022f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002328 <chCoreAllocFromTop+0x38>)
 80022fa:	4249      	negs	r1, r1
 80022fc:	685c      	ldr	r4, [r3, #4]
 80022fe:	1a20      	subs	r0, r4, r0
 8002300:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8002302:	6819      	ldr	r1, [r3, #0]
  prev = p - offset;
 8002304:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8002306:	428a      	cmp	r2, r1
 8002308:	d307      	bcc.n	800231a <chCoreAllocFromTop+0x2a>
 800230a:	4294      	cmp	r4, r2
 800230c:	d305      	bcc.n	800231a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	2300      	movs	r3, #0
 8002312:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8002316:	bc10      	pop	{r4}
 8002318:	4770      	bx	lr
    return NULL;
 800231a:	2000      	movs	r0, #0
 800231c:	2300      	movs	r3, #0
 800231e:	f383 8811 	msr	BASEPRI, r3
}
 8002322:	bc10      	pop	{r4}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	240002d4 	.word	0x240002d4
 800232c:	00000000 	.word	0x00000000

08002330 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8002330:	4b06      	ldr	r3, [pc, #24]	@ (800234c <chCoreAllocAlignedI+0x1c>)
 8002332:	4249      	negs	r1, r1
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	1a10      	subs	r0, r2, r0
 8002338:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800233a:	6819      	ldr	r1, [r3, #0]
 800233c:	4288      	cmp	r0, r1
 800233e:	d303      	bcc.n	8002348 <chCoreAllocAlignedI+0x18>
 8002340:	4282      	cmp	r2, r0
 8002342:	d301      	bcc.n	8002348 <chCoreAllocAlignedI+0x18>
  ch_memcore.topmem = prev;
 8002344:	6058      	str	r0, [r3, #4]
  return p;
 8002346:	4770      	bx	lr
    return NULL;
 8002348:	2000      	movs	r0, #0
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 800234a:	4770      	bx	lr
 800234c:	240002d4 	.word	0x240002d4

08002350 <long_to_string_with_divisor.constprop.0>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8002350:	b530      	push	{r4, r5, lr}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8002352:	f100 050b 	add.w	r5, r0, #11
 8002356:	462b      	mov	r3, r5
  do {
    i = (int)(l % radix);
 8002358:	468c      	mov	ip, r1
 800235a:	fbb1 f1f2 	udiv	r1, r1, r2
 800235e:	fb02 c411 	mls	r4, r2, r1, ip
    i += '0';
 8002362:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
    if (i > '9') {
 8002366:	f1be 0f39 	cmp.w	lr, #57	@ 0x39
      i += 'A' - '0' - 10;
 800236a:	bfc8      	it	gt
 800236c:	f104 0e37 	addgt.w	lr, r4, #55	@ 0x37
    }
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 8002370:	4562      	cmp	r2, ip
    *--q = i;
 8002372:	f803 ed01 	strb.w	lr, [r3, #-1]!
  } while ((ll /= radix) != 0);
 8002376:	d9ef      	bls.n	8002358 <long_to_string_with_divisor.constprop.0+0x8>
 8002378:	1e42      	subs	r2, r0, #1

  i = (int)(p + MAX_FILLER - q);
 800237a:	1aec      	subs	r4, r5, r3
  do
    *p++ = *q++;
 800237c:	f813 1b01 	ldrb.w	r1, [r3], #1
  while (--i);
 8002380:	429d      	cmp	r5, r3
    *p++ = *q++;
 8002382:	f802 1f01 	strb.w	r1, [r2, #1]!
  while (--i);
 8002386:	d1f9      	bne.n	800237c <long_to_string_with_divisor.constprop.0+0x2c>

  return p;
}
 8002388:	4420      	add	r0, r4
 800238a:	bd30      	pop	{r4, r5, pc}
 800238c:	0000      	movs	r0, r0
	...

08002390 <dacStart.constprop.0.isra.0>:
 *
 * @return              The operation status.
 *
 * @api
 */
msg_t dacStart(DACDriver *dacp, const DACConfig *config) {
 8002390:	b538      	push	{r3, r4, r5, lr}
 8002392:	2330      	movs	r3, #48	@ 0x30
 8002394:	4604      	mov	r4, r0
 8002396:	f383 8811 	msr	BASEPRI, r3
  if (dacp->state == DAC_STOP) {
 800239a:	7801      	ldrb	r1, [r0, #0]
  osalSysLock();

  osalDbgAssert((dacp->state == DAC_STOP) || (dacp->state == DAC_READY),
                "invalid state");

  dacp->config = config;
 800239c:	4b1c      	ldr	r3, [pc, #112]	@ (8002410 <dacStart.constprop.0.isra.0+0x80>)
 800239e:	2901      	cmp	r1, #1
 80023a0:	6103      	str	r3, [r0, #16]
 80023a2:	d005      	beq.n	80023b0 <dacStart.constprop.0.isra.0+0x20>
#else
  dac_lld_start(dacp);
  msg = HAL_RET_SUCCESS;
#endif
  if (msg == HAL_RET_SUCCESS) {
    dacp->state = DAC_READY;
 80023a4:	2202      	movs	r2, #2
 80023a6:	2300      	movs	r3, #0
 80023a8:	7022      	strb	r2, [r4, #0]
 80023aa:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return msg;
}
 80023ae:	bd38      	pop	{r3, r4, r5, pc}
    if (&DACD1 == dacp) {
 80023b0:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <dacStart.constprop.0.isra.0+0x84>)
 80023b2:	4298      	cmp	r0, r3
 80023b4:	d021      	beq.n	80023fa <dacStart.constprop.0.isra.0+0x6a>
    if (&DACD2 == dacp) {
 80023b6:	4b18      	ldr	r3, [pc, #96]	@ (8002418 <dacStart.constprop.0.isra.0+0x88>)
 80023b8:	4298      	cmp	r0, r3
 80023ba:	d013      	beq.n	80023e4 <dacStart.constprop.0.isra.0+0x54>
    dacchannel_t channel = 0;
 80023bc:	2100      	movs	r1, #0
      reg = dacp->params->dac->MCR & dacp->params->regmask;
 80023be:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80023c0:	6828      	ldr	r0, [r5, #0]
        ((dacp->config->mcr & CONFIG_SINGLE_MASK) << dacp->params->regshift);
 80023c2:	e9d5 5202 	ldrd	r5, r2, [r5, #8]
      reg = dacp->params->dac->MCR & dacp->params->regmask;
 80023c6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80023c8:	4013      	ands	r3, r2
      dacp->params->dac->MCR = reg |
 80023ca:	63c3      	str	r3, [r0, #60]	@ 0x3c
      reg |= (DAC_CR_EN1 | (dacp->config->cr & CONFIG_SINGLE_MASK)) <<
 80023cc:	2301      	movs	r3, #1
 80023ce:	40ab      	lsls	r3, r5
      reg = dacp->params->dac->CR;
 80023d0:	6805      	ldr	r5, [r0, #0]
      reg &= dacp->params->regmask;
 80023d2:	402a      	ands	r2, r5
      reg |= (DAC_CR_EN1 | (dacp->config->cr & CONFIG_SINGLE_MASK)) <<
 80023d4:	4313      	orrs	r3, r2
      dac_lld_put_channel(dacp, channel, (dacsample_t)dacp->config->init);
 80023d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
      dacp->params->dac->CR = reg;
 80023da:	6003      	str	r3, [r0, #0]
      dac_lld_put_channel(dacp, channel, (dacsample_t)dacp->config->init);
 80023dc:	4620      	mov	r0, r4
 80023de:	f7ff fea7 	bl	8002130 <dac_lld_put_channel>
}
 80023e2:	e7df      	b.n	80023a4 <dacStart.constprop.0.isra.0+0x14>
 */
__STATIC_INLINE void rccEnableAPB1L(uint32_t mask, bool lp) {

#if STM32_TARGET_CORE == 1
  /* Allocating and enabling the peripherals.*/
  RCC_C1->APB1LENR |= mask;
 80023e4:	4b0d      	ldr	r3, [pc, #52]	@ (800241c <dacStart.constprop.0.isra.0+0x8c>)
 80023e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80023e8:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80023ec:	649a      	str	r2, [r3, #72]	@ 0x48
  if (lp) {
    RCC_C1->APB1LLPENR |= mask;
 80023ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80023f0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80023f4:	671a      	str	r2, [r3, #112]	@ 0x70
  }
  else {
    RCC_C1->APB1LLPENR &= ~mask;
  }
  (void)RCC_C1->APB1LLPENR;
 80023f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f8:	e7e1      	b.n	80023be <dacStart.constprop.0.isra.0+0x2e>
  RCC_C1->APB1LENR |= mask;
 80023fa:	4b08      	ldr	r3, [pc, #32]	@ (800241c <dacStart.constprop.0.isra.0+0x8c>)
 80023fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80023fe:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002402:	649a      	str	r2, [r3, #72]	@ 0x48
    RCC_C1->APB1LLPENR |= mask;
 8002404:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002406:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800240a:	671a      	str	r2, [r3, #112]	@ 0x70
  (void)RCC_C1->APB1LLPENR;
 800240c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240e:	e7d5      	b.n	80023bc <dacStart.constprop.0.isra.0+0x2c>
 8002410:	080053cc 	.word	0x080053cc
 8002414:	240002a4 	.word	0x240002a4
 8002418:	24000274 	.word	0x24000274
 800241c:	58024500 	.word	0x58024500

08002420 <spi_lld_serve_interrupt.part.0>:
/**
 * @brief   Shared SPI service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 */
static void spi_lld_serve_interrupt(SPIDriver *spip) {
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	4604      	mov	r4, r0
  if (spip->is_bdma)
 8002424:	f890 3020 	ldrb.w	r3, [r0, #32]
    bdmaStreamDisable(spip->tx.bdma);
 8002428:	6a80      	ldr	r0, [r0, #40]	@ 0x28
    bdmaStreamDisable(spip->rx.bdma);
 800242a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  if (spip->is_bdma)
 800242c:	2b00      	cmp	r3, #0
 800242e:	d054      	beq.n	80024da <spi_lld_serve_interrupt.part.0+0xba>
    bdmaStreamDisable(spip->tx.bdma);
 8002430:	6842      	ldr	r2, [r0, #4]
 8002432:	6813      	ldr	r3, [r2, #0]
 8002434:	f023 030f 	bic.w	r3, r3, #15
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	230e      	movs	r3, #14
 800243c:	7a02      	ldrb	r2, [r0, #8]
 800243e:	6800      	ldr	r0, [r0, #0]
 8002440:	fa03 f202 	lsl.w	r2, r3, r2
 8002444:	6042      	str	r2, [r0, #4]
    bdmaStreamDisable(spip->rx.bdma);
 8002446:	6848      	ldr	r0, [r1, #4]
 8002448:	6802      	ldr	r2, [r0, #0]
 800244a:	f022 020f 	bic.w	r2, r2, #15
 800244e:	6002      	str	r2, [r0, #0]
 8002450:	7a08      	ldrb	r0, [r1, #8]
 8002452:	680a      	ldr	r2, [r1, #0]
 8002454:	4083      	lsls	r3, r0
 8002456:	6053      	str	r3, [r2, #4]
  else if (&SPID1 == spip) {
 8002458:	4b3e      	ldr	r3, [pc, #248]	@ (8002554 <spi_lld_serve_interrupt.part.0+0x134>)
 800245a:	429c      	cmp	r4, r3
 800245c:	d05a      	beq.n	8002514 <spi_lld_serve_interrupt.part.0+0xf4>
  else if (&SPID6 == spip) {
 800245e:	4b3e      	ldr	r3, [pc, #248]	@ (8002558 <spi_lld_serve_interrupt.part.0+0x138>)
 8002460:	429c      	cmp	r4, r3
 8002462:	d067      	beq.n	8002534 <spi_lld_serve_interrupt.part.0+0x114>
  spi_lld_configure(spip);
 8002464:	6861      	ldr	r1, [r4, #4]
  spip->spi->CR1  = 0U;
 8002466:	2200      	movs	r2, #0
 8002468:	69e3      	ldr	r3, [r4, #28]
  spip->spi->IER  = SPI_IER_OVRIE;
 800246a:	2040      	movs	r0, #64	@ 0x40
                    SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN;
 800246c:	694d      	ldr	r5, [r1, #20]
  spip->spi->CR1  = 0U;
 800246e:	601a      	str	r2, [r3, #0]
  spip->spi->CR2  = 0U;
 8002470:	605a      	str	r2, [r3, #4]
                    SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN;
 8002472:	4a3a      	ldr	r2, [pc, #232]	@ (800255c <spi_lld_serve_interrupt.part.0+0x13c>)
  spip->spi->IER  = SPI_IER_OVRIE;
 8002474:	6118      	str	r0, [r3, #16]
  spip->spi->IFCR = 0xFFFFFFFFU;
 8002476:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
                    SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN;
 800247a:	402a      	ands	r2, r5
  spip->spi->IFCR = 0xFFFFFFFFU;
 800247c:	6198      	str	r0, [r3, #24]
                    SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN;
 800247e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
    spip->spi->CFG2 = spip->config->cfg2 & ~SPI_CFG2_COMM_Msk;
 8002482:	6988      	ldr	r0, [r1, #24]
  spip->spi->CFG1 = (spip->config->cfg1 & ~SPI_CFG1_FTHLV_Msk) |
 8002484:	609a      	str	r2, [r3, #8]
  if (spip->config->slave) {
 8002486:	784a      	ldrb	r2, [r1, #1]
 8002488:	b30a      	cbz	r2, 80024ce <spi_lld_serve_interrupt.part.0+0xae>
    spip->spi->CFG2 = spip->config->cfg2 & ~SPI_CFG2_COMM_Msk;
 800248a:	f420 20c0 	bic.w	r0, r0, #393216	@ 0x60000
 800248e:	60d8      	str	r0, [r3, #12]
  spip->spi->CR1  = SPI_CR1_MASRX | SPI_CR1_SPE;
 8002490:	f240 1001 	movw	r0, #257	@ 0x101

    /* Aborting the transfer.*/
    spi_lld_stop_abort(spip);

    /* Reporting the failure.*/
    __spi_isr_error_code(spip, HAL_RET_HW_FAILURE);
 8002494:	688a      	ldr	r2, [r1, #8]
  spip->spi->CR1  = SPI_CR1_MASRX | SPI_CR1_SPE;
 8002496:	6018      	str	r0, [r3, #0]
    __spi_isr_error_code(spip, HAL_RET_HW_FAILURE);
 8002498:	b10a      	cbz	r2, 800249e <spi_lld_serve_interrupt.part.0+0x7e>
 800249a:	4620      	mov	r0, r4
 800249c:	4790      	blx	r2
 800249e:	2330      	movs	r3, #48	@ 0x30
 80024a0:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80024a4:	68a3      	ldr	r3, [r4, #8]
 80024a6:	b173      	cbz	r3, 80024c6 <spi_lld_serve_interrupt.part.0+0xa6>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 80024a8:	2100      	movs	r1, #0

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80024aa:	691a      	ldr	r2, [r3, #16]
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
  } while (unlikely(pqp->prio >= p->prio));
 80024ac:	6898      	ldr	r0, [r3, #8]
 80024ae:	60a1      	str	r1, [r4, #8]
    tp->u.rdymsg = msg;
 80024b0:	6359      	str	r1, [r3, #52]	@ 0x34
  tp->state = CH_STATE_READY;
 80024b2:	7719      	strb	r1, [r3, #28]
    pqp = pqp->next;
 80024b4:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80024b6:	6891      	ldr	r1, [r2, #8]
 80024b8:	4281      	cmp	r1, r0
 80024ba:	d2fb      	bcs.n	80024b4 <spi_lld_serve_interrupt.part.0+0x94>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 80024bc:	6851      	ldr	r1, [r2, #4]
 80024be:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 80024c2:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 80024c4:	6053      	str	r3, [r2, #4]
 80024c6:	2300      	movs	r3, #0
 80024c8:	f383 8811 	msr	BASEPRI, r3
  }
}
 80024cc:	bd38      	pop	{r3, r4, r5, pc}
    spip->spi->CFG2 = (spip->config->cfg2 | SPI_CFG2_MASTER | SPI_CFG2_SSOE) &
 80024ce:	4a24      	ldr	r2, [pc, #144]	@ (8002560 <spi_lld_serve_interrupt.part.0+0x140>)
 80024d0:	4002      	ands	r2, r0
 80024d2:	f042 5201 	orr.w	r2, r2, #541065216	@ 0x20400000
 80024d6:	60da      	str	r2, [r3, #12]
 80024d8:	e7da      	b.n	8002490 <spi_lld_serve_interrupt.part.0+0x70>
    dmaStreamDisable(spip->tx.dma);
 80024da:	6802      	ldr	r2, [r0, #0]
 80024dc:	6813      	ldr	r3, [r2, #0]
 80024de:	f023 031f 	bic.w	r3, r3, #31
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	6813      	ldr	r3, [r2, #0]
 80024e6:	07dd      	lsls	r5, r3, #31
 80024e8:	d4fc      	bmi.n	80024e4 <spi_lld_serve_interrupt.part.0+0xc4>
 80024ea:	7b02      	ldrb	r2, [r0, #12]
 80024ec:	233d      	movs	r3, #61	@ 0x3d
 80024ee:	6840      	ldr	r0, [r0, #4]
 80024f0:	4093      	lsls	r3, r2
    dmaStreamDisable(spip->rx.dma);
 80024f2:	680a      	ldr	r2, [r1, #0]
    dmaStreamDisable(spip->tx.dma);
 80024f4:	6003      	str	r3, [r0, #0]
    dmaStreamDisable(spip->rx.dma);
 80024f6:	6813      	ldr	r3, [r2, #0]
 80024f8:	f023 031f 	bic.w	r3, r3, #31
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	6813      	ldr	r3, [r2, #0]
 8002500:	07db      	lsls	r3, r3, #31
 8002502:	d4fc      	bmi.n	80024fe <spi_lld_serve_interrupt.part.0+0xde>
 8002504:	7b08      	ldrb	r0, [r1, #12]
 8002506:	233d      	movs	r3, #61	@ 0x3d
 8002508:	684a      	ldr	r2, [r1, #4]
 800250a:	4083      	lsls	r3, r0
 800250c:	6013      	str	r3, [r2, #0]
  else if (&SPID1 == spip) {
 800250e:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <spi_lld_serve_interrupt.part.0+0x134>)
 8002510:	429c      	cmp	r4, r3
 8002512:	d1a4      	bne.n	800245e <spi_lld_serve_interrupt.part.0+0x3e>
  RCC->APB2RSTR |= mask;
 8002514:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <spi_lld_serve_interrupt.part.0+0x144>)
 8002516:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800251a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800251e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  RCC->APB2RSTR &= ~mask;
 8002522:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002526:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800252a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  (void)RCC->APB2RSTR;
 800252e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
  osalDbgAssert((RCC_C2->APB2ENR & mask) == mask, "peripherals not allocated");
#endif
#endif

  __rccResetAPB2(mask);
}
 8002532:	e797      	b.n	8002464 <spi_lld_serve_interrupt.part.0+0x44>
  RCC->APB4RSTR |= mask;
 8002534:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <spi_lld_serve_interrupt.part.0+0x144>)
 8002536:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800253a:	f042 0220 	orr.w	r2, r2, #32
 800253e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  RCC->APB4RSTR &= ~mask;
 8002542:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002546:	f022 0220 	bic.w	r2, r2, #32
 800254a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  (void)RCC->APB4RSTR;
 800254e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
  osalDbgAssert((RCC_C2->APB4ENR & mask) == mask, "peripherals not allocated");
#endif
#endif

  __rccResetAPB4(mask);
}
 8002552:	e787      	b.n	8002464 <spi_lld_serve_interrupt.part.0+0x44>
 8002554:	24000324 	.word	0x24000324
 8002558:	240002e8 	.word	0x240002e8
 800255c:	ffff3e1f 	.word	0xffff3e1f
 8002560:	dfb9ffff 	.word	0xdfb9ffff
 8002564:	58024400 	.word	0x58024400
	...

08002570 <__sch_wakeup>:
 8002570:	2330      	movs	r3, #48	@ 0x30
 8002572:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = threadref(p);

  (void)vtp;

  chSysLockFromISR();
  switch (tp->state) {
 8002576:	7f0b      	ldrb	r3, [r1, #28]
 8002578:	2b0c      	cmp	r3, #12
 800257a:	d810      	bhi.n	800259e <__sch_wakeup+0x2e>
 800257c:	e8df f003 	tbb	[pc, r3]
 8002580:	250f0f29 	.word	0x250f0f29
 8002584:	0b0f070b 	.word	0x0b0f070b
 8002588:	0f0f0f0f 	.word	0x0f0f0f0f
 800258c:	0b          	.byte	0x0b
 800258d:	00          	.byte	0x00
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 800258e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8002590:	6893      	ldr	r3, [r2, #8]
 8002592:	3301      	adds	r3, #1
 8002594:	6093      	str	r3, [r2, #8]
  p->prev->next = p->next;
 8002596:	e9d1 3200 	ldrd	r3, r2, [r1]
 800259a:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800259c:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 800259e:	2200      	movs	r2, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80025a0:	690b      	ldr	r3, [r1, #16]
  } while (unlikely(pqp->prio >= p->prio));
 80025a2:	6888      	ldr	r0, [r1, #8]
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 80025a4:	b410      	push	{r4}
    /* Any other state, nothing to do.*/
    break;
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 80025a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
  tp->state = CH_STATE_READY;
 80025aa:	770a      	strb	r2, [r1, #28]
  tp->u.rdymsg = MSG_TIMEOUT;
 80025ac:	634c      	str	r4, [r1, #52]	@ 0x34
    pqp = pqp->next;
 80025ae:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	4282      	cmp	r2, r0
 80025b4:	d2fb      	bcs.n	80025ae <__sch_wakeup+0x3e>
  p->prev       = pqp->prev;
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	2000      	movs	r0, #0
  p->next       = pqp;
 80025ba:	600b      	str	r3, [r1, #0]
  p->prev       = pqp->prev;
 80025bc:	604a      	str	r2, [r1, #4]
  p->prev->next = p;
 80025be:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 80025c0:	6059      	str	r1, [r3, #4]
 80025c2:	f380 8811 	msr	BASEPRI, r0
  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
  chSysUnlockFromISR();

  return;
}
 80025c6:	bc10      	pop	{r4}
 80025c8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80025ca:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
    break;
 80025d0:	e7e5      	b.n	800259e <__sch_wakeup+0x2e>
 80025d2:	2300      	movs	r3, #0
 80025d4:	f383 8811 	msr	BASEPRI, r3
    return;
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	0000      	movs	r0, r0
	...

080025e0 <chEvtBroadcastFlagsI>:
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 80025e0:	6803      	ldr	r3, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80025e2:	4298      	cmp	r0, r3
 80025e4:	d039      	beq.n	800265a <chEvtBroadcastFlagsI+0x7a>
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80025e6:	b4f0      	push	{r4, r5, r6, r7}
    tp->u.rdymsg = MSG_OK;
 80025e8:	2500      	movs	r5, #0
  /*lint -restore*/
    elp->flags |= flags;
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80025f0:	b159      	cbz	r1, 800260a <chEvtBroadcastFlagsI+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 80025f2:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 80025f4:	4211      	tst	r1, r2
 80025f6:	d108      	bne.n	800260a <chEvtBroadcastFlagsI+0x2a>
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 80025f8:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 80025fa:	4298      	cmp	r0, r3
 80025fc:	d015      	beq.n	800262a <chEvtBroadcastFlagsI+0x4a>
    elp->flags |= flags;
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	430a      	orrs	r2, r1
 8002602:	60da      	str	r2, [r3, #12]
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8002604:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8002606:	4211      	tst	r1, r2
 8002608:	d0f6      	beq.n	80025f8 <chEvtBroadcastFlagsI+0x18>
  tp->epending |= events;
 800260a:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 800260e:	6c56      	ldr	r6, [r2, #68]	@ 0x44
  if (((tp->state == CH_STATE_WTOREVT) &&
 8002610:	f892 c01c 	ldrb.w	ip, [r2, #28]
  tp->epending |= events;
 8002614:	4334      	orrs	r4, r6
  if (((tp->state == CH_STATE_WTOREVT) &&
 8002616:	f1bc 0f0a 	cmp.w	ip, #10
  tp->epending |= events;
 800261a:	6454      	str	r4, [r2, #68]	@ 0x44
  if (((tp->state == CH_STATE_WTOREVT) &&
 800261c:	d007      	beq.n	800262e <chEvtBroadcastFlagsI+0x4e>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800261e:	f1bc 0f0b 	cmp.w	ip, #11
 8002622:	d015      	beq.n	8002650 <chEvtBroadcastFlagsI+0x70>
    elp = elp->next;
 8002624:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8002626:	4298      	cmp	r0, r3
 8002628:	d1df      	bne.n	80025ea <chEvtBroadcastFlagsI+0xa>
  }
}
 800262a:	bcf0      	pop	{r4, r5, r6, r7}
 800262c:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800262e:	6b56      	ldr	r6, [r2, #52]	@ 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8002630:	4234      	tst	r4, r6
 8002632:	d0f7      	beq.n	8002624 <chEvtBroadcastFlagsI+0x44>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002634:	6914      	ldr	r4, [r2, #16]
  } while (unlikely(pqp->prio >= p->prio));
 8002636:	6897      	ldr	r7, [r2, #8]
    tp->u.rdymsg = MSG_OK;
 8002638:	6355      	str	r5, [r2, #52]	@ 0x34
  tp->state = CH_STATE_READY;
 800263a:	7715      	strb	r5, [r2, #28]
    pqp = pqp->next;
 800263c:	6824      	ldr	r4, [r4, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800263e:	68a6      	ldr	r6, [r4, #8]
 8002640:	42be      	cmp	r6, r7
 8002642:	d2fb      	bcs.n	800263c <chEvtBroadcastFlagsI+0x5c>
  p->prev       = pqp->prev;
 8002644:	6866      	ldr	r6, [r4, #4]
 8002646:	e9c2 4600 	strd	r4, r6, [r2]
  p->prev->next = p;
 800264a:	6032      	str	r2, [r6, #0]
  pqp->prev     = p;
 800264c:	6062      	str	r2, [r4, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800264e:	e7e9      	b.n	8002624 <chEvtBroadcastFlagsI+0x44>
      ((tp->state == CH_STATE_WTANDEVT) &&
 8002650:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 8002652:	ea36 0404 	bics.w	r4, r6, r4
 8002656:	d1e5      	bne.n	8002624 <chEvtBroadcastFlagsI+0x44>
 8002658:	e7ec      	b.n	8002634 <chEvtBroadcastFlagsI+0x54>
 800265a:	4770      	bx	lr
 800265c:	0000      	movs	r0, r0
	...

08002660 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 8002660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
 8002664:	6d46      	ldr	r6, [r0, #84]	@ 0x54
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 8002666:	4604      	mov	r4, r0
  uint32_t cr1;
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
 8002668:	69f5      	ldr	r5, [r6, #28]
  u->ICR = isr;

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 800266a:	072a      	lsls	r2, r5, #28
  u->ICR = isr;
 800266c:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 800266e:	f040 80b1 	bne.w	80027d4 <sd_lld_serve_interrupt+0x174>
    set_error(sdp, isr);

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
 8002672:	05e8      	lsls	r0, r5, #23
 8002674:	f100 80a2 	bmi.w	80027bc <sd_lld_serve_interrupt+0x15c>
  /* Data available, note it is a while in order to handle two situations:
     1) Another byte arrived after removing the previous one, this would cause
        an extra interrupt to serve.
     2) FIFO mode is enabled on devices that support it, we need to empty
        the FIFO.*/
  while (isr & USART_ISR_RXNE) {
 8002678:	06aa      	lsls	r2, r5, #26
 800267a:	d546      	bpl.n	800270a <sd_lld_serve_interrupt+0xaa>
 800267c:	2730      	movs	r7, #48	@ 0x30

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 800267e:	1d20      	adds	r0, r4, #4

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8002680:	f04f 0800 	mov.w	r8, #0
 8002684:	e028      	b.n	80026d8 <sd_lld_serve_interrupt+0x78>

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
    iqp->q_counter++;
 8002686:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8002688:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 800268a:	3201      	adds	r2, #1
    *iqp->q_wrptr++ = b;
 800268c:	6221      	str	r1, [r4, #32]
    iqp->q_counter++;
 800268e:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8002690:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8002692:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002696:	429a      	cmp	r2, r3
 8002698:	d301      	bcc.n	800269e <sd_lld_serve_interrupt+0x3e>
      iqp->q_wrptr = iqp->q_buffer;
 800269a:	69a3      	ldr	r3, [r4, #24]
 800269c:	6223      	str	r3, [r4, #32]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (ch_queue_notempty(&tqp->queue)) {
 800269e:	f104 010c 	add.w	r1, r4, #12
  return (bool)(qp->next != qp);
 80026a2:	68e3      	ldr	r3, [r4, #12]
 80026a4:	4299      	cmp	r1, r3
 80026a6:	d012      	beq.n	80026ce <sd_lld_serve_interrupt+0x6e>
  qp->next       = p->next;
 80026a8:	681d      	ldr	r5, [r3, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
  } while (unlikely(pqp->prio >= p->prio));
 80026ac:	f8d3 c008 	ldr.w	ip, [r3, #8]
  qp->next       = p->next;
 80026b0:	60e5      	str	r5, [r4, #12]
  qp->next->prev = qp;
 80026b2:	6069      	str	r1, [r5, #4]
 80026b4:	f8c3 8034 	str.w	r8, [r3, #52]	@ 0x34
  tp->state = CH_STATE_READY;
 80026b8:	f883 801c 	strb.w	r8, [r3, #28]
    pqp = pqp->next;
 80026bc:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80026be:	6891      	ldr	r1, [r2, #8]
 80026c0:	4561      	cmp	r1, ip
 80026c2:	d2fb      	bcs.n	80026bc <sd_lld_serve_interrupt+0x5c>
  p->prev       = pqp->prev;
 80026c4:	6851      	ldr	r1, [r2, #4]
 80026c6:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 80026ca:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 80026cc:	6053      	str	r3, [r2, #4]
 80026ce:	f388 8811 	msr	BASEPRI, r8
    osalSysLockFromISR();
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
    osalSysUnlockFromISR();

    isr = u->ISR;
 80026d2:	69f5      	ldr	r5, [r6, #28]
  while (isr & USART_ISR_RXNE) {
 80026d4:	06a9      	lsls	r1, r5, #26
 80026d6:	d518      	bpl.n	800270a <sd_lld_serve_interrupt+0xaa>
 80026d8:	f387 8811 	msr	BASEPRI, r7
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
 80026dc:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 80026de:	f894 505c 	ldrb.w	r5, [r4, #92]	@ 0x5c
  if (iqIsEmptyI(&sdp->iqueue))
 80026e2:	6963      	ldr	r3, [r4, #20]
 80026e4:	4015      	ands	r5, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d064      	beq.n	80027b4 <sd_lld_serve_interrupt+0x154>
  if (!iqIsFullI(iqp)) {
 80026ea:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d1c9      	bne.n	8002686 <sd_lld_serve_interrupt+0x26>
 80026f2:	6962      	ldr	r2, [r4, #20]
 80026f4:	2a00      	cmp	r2, #0
 80026f6:	d0c6      	beq.n	8002686 <sd_lld_serve_interrupt+0x26>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80026f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80026fc:	f7ff ff70 	bl	80025e0 <chEvtBroadcastFlagsI>
 8002700:	f388 8811 	msr	BASEPRI, r8
    isr = u->ISR;
 8002704:	69f5      	ldr	r5, [r6, #28]
  while (isr & USART_ISR_RXNE) {
 8002706:	06a9      	lsls	r1, r5, #26
 8002708:	d4e6      	bmi.n	80026d8 <sd_lld_serve_interrupt+0x78>
  }

  /* Caching CR1.*/
  cr1 = u->CR1;
 800270a:	6837      	ldr	r7, [r6, #0]
     situations:
     1) The data registers has been emptied immediately after writing it, this
        would cause an extra interrupt to serve.
     2) FIFO mode is enabled on devices that support it, we need to fill
        the FIFO.*/
  if (cr1 & USART_CR1_TXEIE) {
 800270c:	063b      	lsls	r3, r7, #24
 800270e:	d540      	bpl.n	8002792 <sd_lld_serve_interrupt+0x132>
    while (isr & USART_ISR_TXE) {
 8002710:	0629      	lsls	r1, r5, #24
 8002712:	d53e      	bpl.n	8002792 <sd_lld_serve_interrupt+0x132>
 8002714:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 8002718:	2100      	movs	r1, #0
 800271a:	eb04 0c0e 	add.w	ip, r4, lr
 800271e:	e026      	b.n	800276e <sd_lld_serve_interrupt+0x10e>

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
    uint8_t b;

    oqp->q_counter++;
 8002720:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    b = *oqp->q_rdptr++;
 8002722:	1c5d      	adds	r5, r3, #1
    if (oqp->q_rdptr >= oqp->q_top) {
 8002724:	6c20      	ldr	r0, [r4, #64]	@ 0x40
    oqp->q_counter++;
 8002726:	3201      	adds	r2, #1
    b = *oqp->q_rdptr++;
 8002728:	64a5      	str	r5, [r4, #72]	@ 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 800272a:	4285      	cmp	r5, r0
    oqp->q_counter++;
 800272c:	63a2      	str	r2, [r4, #56]	@ 0x38
    b = *oqp->q_rdptr++;
 800272e:	f893 8000 	ldrb.w	r8, [r3]
    if (oqp->q_rdptr >= oqp->q_top) {
 8002732:	d301      	bcc.n	8002738 <sd_lld_serve_interrupt+0xd8>
      oqp->q_rdptr = oqp->q_buffer;
 8002734:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002736:	64a3      	str	r3, [r4, #72]	@ 0x48
  return (bool)(qp->next != qp);
 8002738:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800273a:	459c      	cmp	ip, r3
 800273c:	d010      	beq.n	8002760 <sd_lld_serve_interrupt+0x100>
  qp->next       = p->next;
 800273e:	681a      	ldr	r2, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002740:	689d      	ldr	r5, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002742:	6918      	ldr	r0, [r3, #16]
  qp->next       = p->next;
 8002744:	6322      	str	r2, [r4, #48]	@ 0x30
  qp->next->prev = qp;
 8002746:	f8c2 c004 	str.w	ip, [r2, #4]
 800274a:	6359      	str	r1, [r3, #52]	@ 0x34
  tp->state = CH_STATE_READY;
 800274c:	7719      	strb	r1, [r3, #28]
    pqp = pqp->next;
 800274e:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002750:	6882      	ldr	r2, [r0, #8]
 8002752:	42aa      	cmp	r2, r5
 8002754:	d2fb      	bcs.n	800274e <sd_lld_serve_interrupt+0xee>
  p->prev       = pqp->prev;
 8002756:	6842      	ldr	r2, [r0, #4]
 8002758:	e9c3 0200 	strd	r0, r2, [r3]
  p->prev->next = p;
 800275c:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 800275e:	6043      	str	r3, [r0, #4]
        chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
        cr1 &= ~USART_CR1_TXEIE;
        osalSysUnlockFromISR();
        break;
      }
      u->TDR = b;
 8002760:	f8c6 8028 	str.w	r8, [r6, #40]	@ 0x28
 8002764:	f381 8811 	msr	BASEPRI, r1
      osalSysUnlockFromISR();

      isr = u->ISR;
 8002768:	69f5      	ldr	r5, [r6, #28]
    while (isr & USART_ISR_TXE) {
 800276a:	0628      	lsls	r0, r5, #24
 800276c:	d511      	bpl.n	8002792 <sd_lld_serve_interrupt+0x132>
 800276e:	f38e 8811 	msr	BASEPRI, lr
  if (!oqIsEmptyI(oqp)) {
 8002772:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8002776:	429a      	cmp	r2, r3
 8002778:	d1d2      	bne.n	8002720 <sd_lld_serve_interrupt+0xc0>
 800277a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800277c:	2a00      	cmp	r2, #0
 800277e:	d0cf      	beq.n	8002720 <sd_lld_serve_interrupt+0xc0>
 8002780:	2108      	movs	r1, #8
 8002782:	1d20      	adds	r0, r4, #4
 8002784:	f7ff ff2c 	bl	80025e0 <chEvtBroadcastFlagsI>
        cr1 &= ~USART_CR1_TXEIE;
 8002788:	f027 0780 	bic.w	r7, r7, #128	@ 0x80
 800278c:	2300      	movs	r3, #0
 800278e:	f383 8811 	msr	BASEPRI, r3
    }
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (isr & USART_ISR_TC)) {
 8002792:	067a      	lsls	r2, r7, #25
 8002794:	d50b      	bpl.n	80027ae <sd_lld_serve_interrupt+0x14e>
 8002796:	066b      	lsls	r3, r5, #25
 8002798:	d509      	bpl.n	80027ae <sd_lld_serve_interrupt+0x14e>
 800279a:	2330      	movs	r3, #48	@ 0x30
 800279c:	f383 8811 	msr	BASEPRI, r3
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue)) {
 80027a0:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d02b      	beq.n	8002800 <sd_lld_serve_interrupt+0x1a0>
 80027a8:	2300      	movs	r3, #0
 80027aa:	f383 8811 	msr	BASEPRI, r3
    }
    osalSysUnlockFromISR();
  }

  /* Writing CR1 once.*/
  u->CR1 = cr1;
 80027ae:	6037      	str	r7, [r6, #0]
}
 80027b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027b4:	2104      	movs	r1, #4
 80027b6:	f7ff ff13 	bl	80025e0 <chEvtBroadcastFlagsI>
}
 80027ba:	e796      	b.n	80026ea <sd_lld_serve_interrupt+0x8a>
 80027bc:	2330      	movs	r3, #48	@ 0x30
 80027be:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 80027c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027c6:	1d20      	adds	r0, r4, #4
 80027c8:	f7ff ff0a 	bl	80025e0 <chEvtBroadcastFlagsI>
 80027cc:	2300      	movs	r3, #0
 80027ce:	f383 8811 	msr	BASEPRI, r3
}
 80027d2:	e751      	b.n	8002678 <sd_lld_serve_interrupt+0x18>
  if (isr & USART_ISR_PE)
 80027d4:	0169      	lsls	r1, r5, #5
  if (isr & USART_ISR_FE)
 80027d6:	07ab      	lsls	r3, r5, #30
 80027d8:	f04f 0330 	mov.w	r3, #48	@ 0x30
  if (isr & USART_ISR_PE)
 80027dc:	f401 7190 	and.w	r1, r1, #288	@ 0x120
    sts |= SD_FRAMING_ERROR;
 80027e0:	bf48      	it	mi
 80027e2:	f041 0140 	orrmi.w	r1, r1, #64	@ 0x40
  if (isr & USART_ISR_NE)
 80027e6:	076f      	lsls	r7, r5, #29
    sts |= SD_NOISE_ERROR;
 80027e8:	bf48      	it	mi
 80027ea:	f041 0180 	orrmi.w	r1, r1, #128	@ 0x80
 80027ee:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 80027f2:	3004      	adds	r0, #4
 80027f4:	f7ff fef4 	bl	80025e0 <chEvtBroadcastFlagsI>
 80027f8:	2300      	movs	r3, #0
 80027fa:	f383 8811 	msr	BASEPRI, r3
}
 80027fe:	e738      	b.n	8002672 <sd_lld_serve_interrupt+0x12>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8002800:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0d0      	beq.n	80027a8 <sd_lld_serve_interrupt+0x148>
 8002806:	2110      	movs	r1, #16
 8002808:	1d20      	adds	r0, r4, #4
      cr1 &= ~USART_CR1_TCIE;
 800280a:	f027 0740 	bic.w	r7, r7, #64	@ 0x40
 800280e:	f7ff fee7 	bl	80025e0 <chEvtBroadcastFlagsI>
 8002812:	e7c9      	b.n	80027a8 <sd_lld_serve_interrupt+0x148>
	...

08002820 <vt_insert_first.constprop.0>:
                            sysinterval_t delay) {
  sysinterval_t currdelta;

  /* The delta list is empty, the current time becomes the new
     delta list base time, the timer is inserted.*/
  vtlp->lasttime = now;
 8002820:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <vt_insert_first.constprop.0+0x64>)
static void vt_insert_first(virtual_timers_list_t *vtlp,
 8002822:	b4f0      	push	{r4, r5, r6, r7}
static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
                                         ch_delta_list_t *dlp,
                                         sysinterval_t delta) {

  dlp->delta      = delta;
  dlp->prev       = dlhp;
 8002824:	f103 0410 	add.w	r4, r3, #16
  vtlp->lasttime = now;
 8002828:	61d9      	str	r1, [r3, #28]
static inline void st_lld_start_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
  STM32_ST_TIM->SR     = 0;
#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800282a:	2502      	movs	r5, #2
  STM32_ST_TIM->SR     = 0;
 800282c:	2600      	movs	r6, #0
 800282e:	e9c0 4201 	strd	r4, r2, [r0, #4]
  dlp->next       = dlp->prev->next;
 8002832:	691c      	ldr	r4, [r3, #16]
 8002834:	6004      	str	r4, [r0, #0]
  dlp->next->prev = dlp;
 8002836:	6060      	str	r0, [r4, #4]
  ch_dlist_insert_after(&vtlp->dlist, &vtp->dlist, delay);

  /* Initial delta is what is configured statically.*/
  currdelta = vtlp->lastdelta;
 8002838:	6a1c      	ldr	r4, [r3, #32]
  dlhp->next      = dlp;
 800283a:	6118      	str	r0, [r3, #16]
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800283c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000

  /* If the requested delay is lower than the minimum safe delta then it
     is raised to the minimum safe value.*/
  if (delay < currdelta) {
 8002840:	42a2      	cmp	r2, r4
 8002842:	bf38      	it	cc
 8002844:	4622      	movcc	r2, r4

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
 8002846:	188f      	adds	r7, r1, r2
 8002848:	6347      	str	r7, [r0, #52]	@ 0x34
  STM32_ST_TIM->SR     = 0;
 800284a:	6106      	str	r6, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800284c:	60c5      	str	r5, [r0, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 800284e:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8002850:	eba5 0c01 	sub.w	ip, r5, r1
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8002854:	4562      	cmp	r2, ip
 8002856:	d901      	bls.n	800285c <vt_insert_first.constprop.0+0x3c>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 8002858:	bcf0      	pop	{r4, r5, r6, r7}
 800285a:	4770      	bx	lr
  currdelta = vtlp->lastdelta;
 800285c:	4626      	mov	r6, r4
    currdelta += (sysinterval_t)1;
 800285e:	3601      	adds	r6, #1
  return systime + (systime_t)interval;
 8002860:	4431      	add	r1, r6
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002862:	6341      	str	r1, [r0, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8002864:	6a42      	ldr	r2, [r0, #36]	@ 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8002866:	1b51      	subs	r1, r2, r5
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8002868:	42b1      	cmp	r1, r6
 800286a:	d208      	bcs.n	800287e <vt_insert_first.constprop.0+0x5e>
  if (currdelta > vtlp->lastdelta) {
 800286c:	42b4      	cmp	r4, r6
 800286e:	d2f3      	bcs.n	8002858 <vt_insert_first.constprop.0+0x38>
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 8002870:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    vtlp->lastdelta = currdelta;
 8002872:	621e      	str	r6, [r3, #32]
 8002874:	f042 0201 	orr.w	r2, r2, #1
}
 8002878:	bcf0      	pop	{r4, r5, r6, r7}
 800287a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800287c:	4770      	bx	lr
 800287e:	4629      	mov	r1, r5
 8002880:	4615      	mov	r5, r2
 8002882:	e7ec      	b.n	800285e <vt_insert_first.constprop.0+0x3e>
 8002884:	240004f8 	.word	0x240004f8
	...

08002890 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  thread_t *tp = __instance_get_currthread(currcore);

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 8002894:	1c4b      	adds	r3, r1, #1
  thread_t *tp = __instance_get_currthread(currcore);
 8002896:	4d5e      	ldr	r5, [pc, #376]	@ (8002a10 <chSchGoSleepTimeoutS+0x180>)
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002898:	b086      	sub	sp, #24
 800289a:	4607      	mov	r7, r0
  thread_t *tp = __instance_get_currthread(currcore);
 800289c:	68ee      	ldr	r6, [r5, #12]
  if (TIME_INFINITE != timeout) {
 800289e:	d04a      	beq.n	8002936 <chSchGoSleepTimeoutS+0xa6>
  return (bool)(dlhp == dlhp->next);
 80028a0:	46a8      	mov	r8, r5
  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  /* Timer initialization.*/
  vtp->par     = par;
  vtp->func    = vtfunc;
 80028a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002a14 <chSchGoSleepTimeoutS+0x184>)
 80028a4:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 80028a8:	460a      	mov	r2, r1
 80028aa:	f858 0f10 	ldr.w	r0, [r8, #16]!
 80028ae:	e9cd 3603 	strd	r3, r6, [sp, #12]
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80028b2:	4540      	cmp	r0, r8
  vtp->reload  = (sysinterval_t)0;
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	9305      	str	r3, [sp, #20]
 80028ba:	f8dc 1024 	ldr.w	r1, [ip, #36]	@ 0x24
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80028be:	f000 8099 	beq.w	80029f4 <chSchGoSleepTimeoutS+0x164>
 80028c2:	69eb      	ldr	r3, [r5, #28]
    if (delta < vtlp->dlist.next->delta) {
 80028c4:	6884      	ldr	r4, [r0, #8]
 80028c6:	1acb      	subs	r3, r1, r3
      delta = delay;
 80028c8:	18d3      	adds	r3, r2, r3
 80028ca:	bf28      	it	cs
 80028cc:	4613      	movcs	r3, r2
    if (delta < vtlp->dlist.next->delta) {
 80028ce:	429c      	cmp	r4, r3
 80028d0:	d840      	bhi.n	8002954 <chSchGoSleepTimeoutS+0xc4>
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
 80028d2:	d204      	bcs.n	80028de <chSchGoSleepTimeoutS+0x4e>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
    dlp = dlp->next;
 80028d4:	6800      	ldr	r0, [r0, #0]
    delta -= dlp->delta;
 80028d6:	1b1b      	subs	r3, r3, r4
  while (likely(dlp->delta < delta)) {
 80028d8:	6884      	ldr	r4, [r0, #8]
 80028da:	429c      	cmp	r4, r3
 80028dc:	d3fa      	bcc.n	80028d4 <chSchGoSleepTimeoutS+0x44>
  dlp->delta      = delta;
 80028de:	9302      	str	r3, [sp, #8]
  dlp->prev->next = dlp;
 80028e0:	466c      	mov	r4, sp

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
 80028e2:	6882      	ldr	r2, [r0, #8]
  dlp->next       = dlhp;
 80028e4:	9000      	str	r0, [sp, #0]
  dlp->delta -= delta;
 80028e6:	1ad2      	subs	r2, r2, r3
  dlp->prev       = dlp->next->prev;
 80028e8:	6843      	ldr	r3, [r0, #4]
 80028ea:	9301      	str	r3, [sp, #4]
  dlp->prev->next = dlp;
 80028ec:	f8c3 d000 	str.w	sp, [r3]

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  dlhp->prev      = dlp;
 80028f4:	e9c0 4201 	strd	r4, r2, [r0, #4]
  dlhp->delta = (sysinterval_t)-1;
 80028f8:	61ab      	str	r3, [r5, #24]
  ch_priority_queue_t *p = pqp->next;
 80028fa:	6828      	ldr	r0, [r5, #0]
  ntp->state = CH_STATE_CURRENT;
 80028fc:	2201      	movs	r2, #1
  otp->state = newstate;
 80028fe:	7737      	strb	r7, [r6, #28]
  chSysSwitch(ntp, otp);
 8002900:	4631      	mov	r1, r6
  pqp->next       = p->next;
 8002902:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8002904:	605d      	str	r5, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8002906:	7702      	strb	r2, [r0, #28]
  pqp->next       = p->next;
 8002908:	602b      	str	r3, [r5, #0]
  __instance_set_currthread(oip, ntp);
 800290a:	60e8      	str	r0, [r5, #12]
  chSysSwitch(ntp, otp);
 800290c:	f7fd fd58 	bl	80003c0 <__port_switch>
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->dlist.next != NULL);
 8002910:	9b00      	ldr	r3, [sp, #0]
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt)) {
 8002912:	b163      	cbz	r3, 800292e <chSchGoSleepTimeoutS+0x9e>
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 8002914:	692a      	ldr	r2, [r5, #16]
 8002916:	42a2      	cmp	r2, r4
 8002918:	d03e      	beq.n	8002998 <chSchGoSleepTimeoutS+0x108>

    /* Removing the element from the delta list.*/
    (void) ch_dlist_dequeue(&vtp->dlist);

    /* Adding delta to the next element, if it is not the last one.*/
    vtp->dlist.next->delta += vtp->dlist.delta;
 800291a:	689a      	ldr	r2, [r3, #8]
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
 800291c:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8002920:	4402      	add	r2, r0
 8002922:	600b      	str	r3, [r1, #0]
 8002924:	e9c3 1201 	strd	r1, r2, [r3, #4]
    vtp->dlist.next = NULL;

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 8002928:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800292c:	61ab      	str	r3, [r5, #24]
  else {
    chSchGoSleepS(newstate);
  }

  return tp->u.rdymsg;
}
 800292e:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8002930:	b006      	add	sp, #24
 8002932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ch_priority_queue_t *p = pqp->next;
 8002936:	6828      	ldr	r0, [r5, #0]
  ntp->state = CH_STATE_CURRENT;
 8002938:	2201      	movs	r2, #1
  otp->state = newstate;
 800293a:	7737      	strb	r7, [r6, #28]
  chSysSwitch(ntp, otp);
 800293c:	4631      	mov	r1, r6
  pqp->next       = p->next;
 800293e:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8002940:	605d      	str	r5, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8002942:	7702      	strb	r2, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8002944:	60e8      	str	r0, [r5, #12]
  pqp->next       = p->next;
 8002946:	602b      	str	r3, [r5, #0]
  chSysSwitch(ntp, otp);
 8002948:	f7fd fd3a 	bl	80003c0 <__port_switch>
}
 800294c:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 800294e:	b006      	add	sp, #24
 8002950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  currdelta = vtlp->lastdelta;
 8002954:	6a2c      	ldr	r4, [r5, #32]
  if (delay < currdelta) {
 8002956:	42a2      	cmp	r2, r4
 8002958:	bf38      	it	cc
 800295a:	4622      	movcc	r2, r4
  return systime + (systime_t)interval;
 800295c:	eb01 0e02 	add.w	lr, r1, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002960:	f8cc e034 	str.w	lr, [ip, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8002964:	f8dc e024 	ldr.w	lr, [ip, #36]	@ 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8002968:	ebae 0101 	sub.w	r1, lr, r1
    if (likely(nowdelta < delay)) {
 800296c:	428a      	cmp	r2, r1
 800296e:	d8b6      	bhi.n	80028de <chSchGoSleepTimeoutS+0x4e>
 8002970:	4622      	mov	r2, r4
    currdelta += (sysinterval_t)1;
 8002972:	3201      	adds	r2, #1
  return systime + (systime_t)interval;
 8002974:	eb0e 0102 	add.w	r1, lr, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002978:	f8cc 1034 	str.w	r1, [ip, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800297c:	f8dc 1024 	ldr.w	r1, [ip, #36]	@ 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8002980:	eba1 0e0e 	sub.w	lr, r1, lr
    if (likely(nowdelta < delay)) {
 8002984:	4596      	cmp	lr, r2
 8002986:	d23e      	bcs.n	8002a06 <chSchGoSleepTimeoutS+0x176>
  if (currdelta > vtlp->lastdelta) {
 8002988:	4294      	cmp	r4, r2
 800298a:	d2a8      	bcs.n	80028de <chSchGoSleepTimeoutS+0x4e>
    vtlp->lastdelta = currdelta;
 800298c:	622a      	str	r2, [r5, #32]
 800298e:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	63ea      	str	r2, [r5, #60]	@ 0x3c
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
 8002996:	e7a2      	b.n	80028de <chSchGoSleepTimeoutS+0x4e>
    return;
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  ch_dlist_remove_first(&vtlp->dlist);
  vtp->dlist.next = NULL;
 8002998:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 800299a:	4543      	cmp	r3, r8
  dlhp->next       = dlp->next;
 800299c:	612b      	str	r3, [r5, #16]
  vtp->dlist.next = NULL;
 800299e:	9200      	str	r2, [sp, #0]
  dlhp->next->prev = dlhp;
 80029a0:	f8c3 8004 	str.w	r8, [r3, #4]
  if (ch_dlist_isempty(&vtlp->dlist)) {
 80029a4:	d02b      	beq.n	80029fe <chSchGoSleepTimeoutS+0x16e>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80029ac:	9902      	ldr	r1, [sp, #8]
 80029ae:	440a      	add	r2, r1
 80029b0:	609a      	str	r2, [r3, #8]

  /* Distance in ticks between the last alarm event and current time.*/
  now = chVTGetSystemTimeX();
  nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80029b2:	69eb      	ldr	r3, [r5, #28]
 80029b4:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80029b6:	1acc      	subs	r4, r1, r3

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 80029b8:	42a2      	cmp	r2, r4
 80029ba:	d9b8      	bls.n	800292e <chSchGoSleepTimeoutS+0x9e>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;
 80029bc:	1a5b      	subs	r3, r3, r1
  currdelta = vtlp->lastdelta;
 80029be:	6a2c      	ldr	r4, [r5, #32]
  delta = vtlp->dlist.next->delta - nowdelta;
 80029c0:	4413      	add	r3, r2
  if (delay < currdelta) {
 80029c2:	42a3      	cmp	r3, r4
 80029c4:	bf38      	it	cc
 80029c6:	4623      	movcc	r3, r4
  return systime + (systime_t)interval;
 80029c8:	18ca      	adds	r2, r1, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80029ca:	6342      	str	r2, [r0, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80029cc:	6a42      	ldr	r2, [r0, #36]	@ 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80029ce:	1a51      	subs	r1, r2, r1
    if (likely(nowdelta < delay)) {
 80029d0:	4299      	cmp	r1, r3
 80029d2:	d3ac      	bcc.n	800292e <chSchGoSleepTimeoutS+0x9e>
 80029d4:	4621      	mov	r1, r4
    currdelta += (sysinterval_t)1;
 80029d6:	3101      	adds	r1, #1
  return systime + (systime_t)interval;
 80029d8:	1853      	adds	r3, r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80029da:	6343      	str	r3, [r0, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80029dc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80029de:	1a9a      	subs	r2, r3, r2
    if (likely(nowdelta < delay)) {
 80029e0:	428a      	cmp	r2, r1
 80029e2:	d212      	bcs.n	8002a0a <chSchGoSleepTimeoutS+0x17a>
  if (currdelta > vtlp->lastdelta) {
 80029e4:	428c      	cmp	r4, r1
 80029e6:	d2a2      	bcs.n	800292e <chSchGoSleepTimeoutS+0x9e>
  currcore->rfcu.mask |= mask;
 80029e8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    vtlp->lastdelta = currdelta;
 80029ea:	6229      	str	r1, [r5, #32]
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	63eb      	str	r3, [r5, #60]	@ 0x3c
}
 80029f2:	e79c      	b.n	800292e <chSchGoSleepTimeoutS+0x9e>
      vt_insert_first(vtlp, vtp, now, delay);
 80029f4:	4668      	mov	r0, sp
 80029f6:	466c      	mov	r4, sp
 80029f8:	f7ff ff12 	bl	8002820 <vt_insert_first.constprop.0>
      return;
 80029fc:	e77d      	b.n	80028fa <chSchGoSleepTimeoutS+0x6a>
  STM32_ST_TIM->DIER = 0U;
 80029fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a02:	60da      	str	r2, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 8002a04:	e793      	b.n	800292e <chSchGoSleepTimeoutS+0x9e>
 8002a06:	468e      	mov	lr, r1
 8002a08:	e7b3      	b.n	8002972 <chSchGoSleepTimeoutS+0xe2>
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	e7e3      	b.n	80029d6 <chSchGoSleepTimeoutS+0x146>
 8002a0e:	bf00      	nop
 8002a10:	240004f8 	.word	0x240004f8
 8002a14:	08002571 	.word	0x08002571
	...

08002a20 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8002a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a24:	b085      	sub	sp, #20
 8002a26:	4616      	mov	r6, r2
  qnotify_t nfy = iqp->q_notify;
 8002a28:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8002a2c:	f04f 0930 	mov.w	r9, #48	@ 0x30
                     size_t n, sysinterval_t timeout) {
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002a36:	b382      	cbz	r2, 8002a9a <iqReadTimeout+0x7a>
  return __sch_get_currthread();
 8002a38:	4646      	mov	r6, r8
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	4692      	mov	sl, r2
 8002a3e:	f04f 0b00 	mov.w	fp, #0
 8002a42:	4688      	mov	r8, r1
 8002a44:	9203      	str	r2, [sp, #12]
  if (n > iqGetFullI(iqp)) {
 8002a46:	68a2      	ldr	r2, [r4, #8]
 8002a48:	4552      	cmp	r2, sl
 8002a4a:	d22d      	bcs.n	8002aa8 <iqReadTimeout+0x88>
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002a4c:	69a1      	ldr	r1, [r4, #24]
 8002a4e:	6927      	ldr	r7, [r4, #16]
    n = iqGetFullI(iqp);
 8002a50:	68a5      	ldr	r5, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002a52:	1a7f      	subs	r7, r7, r1
  if (n < s1) {
 8002a54:	42af      	cmp	r7, r5
 8002a56:	d82d      	bhi.n	8002ab4 <iqReadTimeout+0x94>
  else if (n > s1) {
 8002a58:	d233      	bcs.n	8002ac2 <iqReadTimeout+0xa2>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002a5a:	463a      	mov	r2, r7
 8002a5c:	4640      	mov	r0, r8
 8002a5e:	f7ff fac3 	bl	8001fe8 <memcpy>
    s2 = n - s1;
 8002a62:	1bea      	subs	r2, r5, r7
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8002a64:	68e1      	ldr	r1, [r4, #12]
 8002a66:	eb08 0007 	add.w	r0, r8, r7
 8002a6a:	9202      	str	r2, [sp, #8]
 8002a6c:	f7ff fabc 	bl	8001fe8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002a70:	68e1      	ldr	r1, [r4, #12]
 8002a72:	9a02      	ldr	r2, [sp, #8]
 8002a74:	440a      	add	r2, r1
  iqp->q_counter -= n;
 8002a76:	68a1      	ldr	r1, [r4, #8]
 8002a78:	1b49      	subs	r1, r1, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002a7a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8002a7c:	60a1      	str	r1, [r4, #8]
      if (nfy != NULL) {
 8002a7e:	b10e      	cbz	r6, 8002a84 <iqReadTimeout+0x64>
        nfy(iqp);
 8002a80:	4620      	mov	r0, r4
 8002a82:	47b0      	blx	r6
 8002a84:	f38b 8811 	msr	BASEPRI, fp
      n  -= done;
 8002a88:	ebaa 0a05 	sub.w	sl, sl, r5
      bp += done;
 8002a8c:	44a8      	add	r8, r5
 8002a8e:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002a92:	f1ba 0f00 	cmp.w	sl, #0
 8002a96:	d1d6      	bne.n	8002a46 <iqReadTimeout+0x26>
 8002a98:	9e03      	ldr	r6, [sp, #12]
 8002a9a:	4630      	mov	r0, r6
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f383 8811 	msr	BASEPRI, r3
}
 8002aa2:	b005      	add	sp, #20
 8002aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002aa8:	69a1      	ldr	r1, [r4, #24]
 8002aaa:	4655      	mov	r5, sl
 8002aac:	6927      	ldr	r7, [r4, #16]
 8002aae:	1a7f      	subs	r7, r7, r1
  if (n < s1) {
 8002ab0:	42af      	cmp	r7, r5
 8002ab2:	d9d1      	bls.n	8002a58 <iqReadTimeout+0x38>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002ab4:	462a      	mov	r2, r5
 8002ab6:	4640      	mov	r0, r8
 8002ab8:	f7ff fa96 	bl	8001fe8 <memcpy>
    iqp->q_rdptr += n;
 8002abc:	69a1      	ldr	r1, [r4, #24]
 8002abe:	4429      	add	r1, r5
 8002ac0:	e004      	b.n	8002acc <iqReadTimeout+0xac>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002ac2:	462a      	mov	r2, r5
 8002ac4:	4640      	mov	r0, r8
 8002ac6:	f7ff fa8f 	bl	8001fe8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002aca:	68e1      	ldr	r1, [r4, #12]
  iqp->q_counter -= n;
 8002acc:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr += n;
 8002ace:	61a1      	str	r1, [r4, #24]
  iqp->q_counter -= n;
 8002ad0:	1b52      	subs	r2, r2, r5
 8002ad2:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002ad4:	2d00      	cmp	r5, #0
 8002ad6:	d1d2      	bne.n	8002a7e <iqReadTimeout+0x5e>
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <iqReadTimeout+0xe8>)
 8002ada:	68da      	ldr	r2, [r3, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002adc:	9b01      	ldr	r3, [sp, #4]
 8002ade:	b153      	cbz	r3, 8002af6 <iqReadTimeout+0xd6>
  p->prev       = qp->prev;
 8002ae0:	6861      	ldr	r1, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002ae2:	2004      	movs	r0, #4
 8002ae4:	e9c2 4100 	strd	r4, r1, [r2]
  p->prev->next = p;
 8002ae8:	600a      	str	r2, [r1, #0]
 8002aea:	9901      	ldr	r1, [sp, #4]
  qp->prev      = p;
 8002aec:	6062      	str	r2, [r4, #4]
 8002aee:	f7ff fecf 	bl	8002890 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8002af2:	2800      	cmp	r0, #0
 8002af4:	d0a7      	beq.n	8002a46 <iqReadTimeout+0x26>
  return max - n;
 8002af6:	9e03      	ldr	r6, [sp, #12]
 8002af8:	2300      	movs	r3, #0
 8002afa:	eba6 000a 	sub.w	r0, r6, sl
 8002afe:	f383 8811 	msr	BASEPRI, r3
}
 8002b02:	b005      	add	sp, #20
 8002b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b08:	240004f8 	.word	0x240004f8
 8002b0c:	00000000 	.word	0x00000000

08002b10 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b14:	300c      	adds	r0, #12
 8002b16:	f7ff bf83 	b.w	8002a20 <iqReadTimeout>
 8002b1a:	bf00      	nop
 8002b1c:	0000      	movs	r0, r0
	...

08002b20 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002b20:	300c      	adds	r0, #12
 8002b22:	f7ff bf7d 	b.w	8002a20 <iqReadTimeout>
 8002b26:	bf00      	nop
	...

08002b30 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	2330      	movs	r3, #48	@ 0x30
 8002b34:	4604      	mov	r4, r0
 8002b36:	f383 8811 	msr	BASEPRI, r3
  while (iqIsEmptyI(iqp)) {
 8002b3a:	6883      	ldr	r3, [r0, #8]
 8002b3c:	b9cb      	cbnz	r3, 8002b72 <iqGetTimeout+0x42>
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002b3e:	460d      	mov	r5, r1
 8002b40:	b929      	cbnz	r1, 8002b4e <iqGetTimeout+0x1e>
    return MSG_TIMEOUT;
 8002b42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b46:	2300      	movs	r3, #0
 8002b48:	f383 8811 	msr	BASEPRI, r3
}
 8002b4c:	bd70      	pop	{r4, r5, r6, pc}
 8002b4e:	4e13      	ldr	r6, [pc, #76]	@ (8002b9c <iqGetTimeout+0x6c>)
 8002b50:	68f3      	ldr	r3, [r6, #12]
 8002b52:	e000      	b.n	8002b56 <iqGetTimeout+0x26>
 8002b54:	68f3      	ldr	r3, [r6, #12]
  p->prev       = qp->prev;
 8002b56:	6862      	ldr	r2, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002b58:	4629      	mov	r1, r5
  p->next       = qp;
 8002b5a:	601c      	str	r4, [r3, #0]
 8002b5c:	2004      	movs	r0, #4
  p->prev       = qp->prev;
 8002b5e:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8002b60:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8002b62:	6063      	str	r3, [r4, #4]
 8002b64:	f7ff fe94 	bl	8002890 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	dbec      	blt.n	8002b46 <iqGetTimeout+0x16>
  while (iqIsEmptyI(iqp)) {
 8002b6c:	68a3      	ldr	r3, [r4, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <iqGetTimeout+0x24>
  iqp->q_counter--;
 8002b72:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8002b74:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8002b76:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
 8002b78:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8002b7a:	60a3      	str	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8002b7c:	6923      	ldr	r3, [r4, #16]
  b = *iqp->q_rdptr++;
 8002b7e:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
 8002b80:	429a      	cmp	r2, r3
  b = *iqp->q_rdptr++;
 8002b82:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 8002b84:	d301      	bcc.n	8002b8a <iqGetTimeout+0x5a>
    iqp->q_rdptr = iqp->q_buffer;
 8002b86:	68e3      	ldr	r3, [r4, #12]
 8002b88:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 8002b8a:	69e3      	ldr	r3, [r4, #28]
 8002b8c:	b10b      	cbz	r3, 8002b92 <iqGetTimeout+0x62>
    iqp->q_notify(iqp);
 8002b8e:	4620      	mov	r0, r4
 8002b90:	4798      	blx	r3
 8002b92:	2300      	movs	r3, #0
 8002b94:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8002b98:	4628      	mov	r0, r5
}
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
 8002b9c:	240004f8 	.word	0x240004f8

08002ba0 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002ba0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ba4:	300c      	adds	r0, #12
 8002ba6:	f7ff bfc3 	b.w	8002b30 <iqGetTimeout>
 8002baa:	bf00      	nop
 8002bac:	0000      	movs	r0, r0
	...

08002bb0 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002bb0:	300c      	adds	r0, #12
 8002bb2:	f7ff bfbd 	b.w	8002b30 <iqGetTimeout>
 8002bb6:	bf00      	nop
	...

08002bc0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8002bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bc4:	2330      	movs	r3, #48	@ 0x30
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	4688      	mov	r8, r1
 8002bca:	f383 8811 	msr	BASEPRI, r3
  while (oqIsFullI(oqp)) {
 8002bce:	6883      	ldr	r3, [r0, #8]
 8002bd0:	b9d3      	cbnz	r3, 8002c08 <oqPutTimeout+0x48>
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002bd2:	4616      	mov	r6, r2
 8002bd4:	b932      	cbnz	r2, 8002be4 <oqPutTimeout+0x24>
    return MSG_TIMEOUT;
 8002bd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f383 8811 	msr	BASEPRI, r3
}
 8002be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002be4:	4f14      	ldr	r7, [pc, #80]	@ (8002c38 <oqPutTimeout+0x78>)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	e000      	b.n	8002bec <oqPutTimeout+0x2c>
 8002bea:	68fb      	ldr	r3, [r7, #12]
  p->prev       = qp->prev;
 8002bec:	6865      	ldr	r5, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002bee:	4631      	mov	r1, r6
  p->next       = qp;
 8002bf0:	601c      	str	r4, [r3, #0]
 8002bf2:	2004      	movs	r0, #4
  p->prev       = qp->prev;
 8002bf4:	605d      	str	r5, [r3, #4]
  p->prev->next = p;
 8002bf6:	602b      	str	r3, [r5, #0]
  qp->prev      = p;
 8002bf8:	6063      	str	r3, [r4, #4]
 8002bfa:	f7ff fe49 	bl	8002890 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	dbeb      	blt.n	8002bda <oqPutTimeout+0x1a>
  while (oqIsFullI(oqp)) {
 8002c02:	68a3      	ldr	r3, [r4, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <oqPutTimeout+0x2a>
  *oqp->q_wrptr++ = b;
 8002c08:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8002c0a:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002c0c:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8002c0e:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8002c10:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8002c12:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002c14:	f882 8000 	strb.w	r8, [r2]
  if (oqp->q_wrptr >= oqp->q_top) {
 8002c18:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d301      	bcc.n	8002c24 <oqPutTimeout+0x64>
    oqp->q_wrptr = oqp->q_buffer;
 8002c20:	68e3      	ldr	r3, [r4, #12]
 8002c22:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8002c24:	69e3      	ldr	r3, [r4, #28]
 8002c26:	b10b      	cbz	r3, 8002c2c <oqPutTimeout+0x6c>
    oqp->q_notify(oqp);
 8002c28:	4620      	mov	r0, r4
 8002c2a:	4798      	blx	r3
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f380 8811 	msr	BASEPRI, r0
}
 8002c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c36:	bf00      	nop
 8002c38:	240004f8 	.word	0x240004f8
 8002c3c:	00000000 	.word	0x00000000

08002c40 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002c40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c44:	3030      	adds	r0, #48	@ 0x30
 8002c46:	f7ff bfbb 	b.w	8002bc0 <oqPutTimeout>
 8002c4a:	bf00      	nop
 8002c4c:	0000      	movs	r0, r0
	...

08002c50 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002c50:	3030      	adds	r0, #48	@ 0x30
 8002c52:	f7ff bfb5 	b.w	8002bc0 <oqPutTimeout>
 8002c56:	bf00      	nop
	...

08002c60 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c64:	b085      	sub	sp, #20
 8002c66:	4616      	mov	r6, r2
  qnotify_t nfy = oqp->q_notify;
 8002c68:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8002c6c:	f04f 0930 	mov.w	r9, #48	@ 0x30
                      size_t n, sysinterval_t timeout) {
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8002c76:	b382      	cbz	r2, 8002cda <oqWriteTimeout+0x7a>
 8002c78:	4646      	mov	r6, r8
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	4692      	mov	sl, r2
 8002c7e:	f04f 0b00 	mov.w	fp, #0
 8002c82:	4688      	mov	r8, r1
 8002c84:	9203      	str	r2, [sp, #12]
  if (n > oqGetEmptyI(oqp)) {
 8002c86:	68a2      	ldr	r2, [r4, #8]
 8002c88:	4552      	cmp	r2, sl
 8002c8a:	d22d      	bcs.n	8002ce8 <oqWriteTimeout+0x88>
    n = oqGetEmptyI(oqp);
 8002c8c:	68a5      	ldr	r5, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002c8e:	e9d4 7004 	ldrd	r7, r0, [r4, #16]
 8002c92:	1a3f      	subs	r7, r7, r0
  if (n < s1) {
 8002c94:	42af      	cmp	r7, r5
 8002c96:	d82d      	bhi.n	8002cf4 <oqWriteTimeout+0x94>
  else if (n > s1) {
 8002c98:	d233      	bcs.n	8002d02 <oqWriteTimeout+0xa2>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002c9a:	463a      	mov	r2, r7
 8002c9c:	4641      	mov	r1, r8
 8002c9e:	f7ff f9a3 	bl	8001fe8 <memcpy>
    s2 = n - s1;
 8002ca2:	1bea      	subs	r2, r5, r7
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8002ca4:	eb08 0107 	add.w	r1, r8, r7
 8002ca8:	68e0      	ldr	r0, [r4, #12]
 8002caa:	9202      	str	r2, [sp, #8]
 8002cac:	f7ff f99c 	bl	8001fe8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002cb0:	68e1      	ldr	r1, [r4, #12]
 8002cb2:	9a02      	ldr	r2, [sp, #8]
 8002cb4:	440a      	add	r2, r1
  oqp->q_counter -= n;
 8002cb6:	68a1      	ldr	r1, [r4, #8]
 8002cb8:	1b49      	subs	r1, r1, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002cba:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8002cbc:	60a1      	str	r1, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8002cbe:	b10e      	cbz	r6, 8002cc4 <oqWriteTimeout+0x64>
        nfy(oqp);
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	47b0      	blx	r6
 8002cc4:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8002cc8:	ebaa 0a05 	sub.w	sl, sl, r5
      bp += done;
 8002ccc:	44a8      	add	r8, r5
 8002cce:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002cd2:	f1ba 0f00 	cmp.w	sl, #0
 8002cd6:	d1d6      	bne.n	8002c86 <oqWriteTimeout+0x26>
 8002cd8:	9e03      	ldr	r6, [sp, #12]
 8002cda:	4630      	mov	r0, r6
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8002ce2:	b005      	add	sp, #20
 8002ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002ce8:	e9d4 7004 	ldrd	r7, r0, [r4, #16]
 8002cec:	4655      	mov	r5, sl
 8002cee:	1a3f      	subs	r7, r7, r0
  if (n < s1) {
 8002cf0:	42af      	cmp	r7, r5
 8002cf2:	d9d1      	bls.n	8002c98 <oqWriteTimeout+0x38>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002cf4:	4641      	mov	r1, r8
 8002cf6:	462a      	mov	r2, r5
 8002cf8:	f7ff f976 	bl	8001fe8 <memcpy>
    oqp->q_wrptr += n;
 8002cfc:	6961      	ldr	r1, [r4, #20]
 8002cfe:	4429      	add	r1, r5
 8002d00:	e004      	b.n	8002d0c <oqWriteTimeout+0xac>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002d02:	4641      	mov	r1, r8
 8002d04:	462a      	mov	r2, r5
 8002d06:	f7ff f96f 	bl	8001fe8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8002d0a:	68e1      	ldr	r1, [r4, #12]
  oqp->q_counter -= n;
 8002d0c:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr += n;
 8002d0e:	6161      	str	r1, [r4, #20]
  oqp->q_counter -= n;
 8002d10:	1b52      	subs	r2, r2, r5
 8002d12:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002d14:	2d00      	cmp	r5, #0
 8002d16:	d1d2      	bne.n	8002cbe <oqWriteTimeout+0x5e>
 8002d18:	4b0b      	ldr	r3, [pc, #44]	@ (8002d48 <oqWriteTimeout+0xe8>)
 8002d1a:	68da      	ldr	r2, [r3, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002d1c:	9b01      	ldr	r3, [sp, #4]
 8002d1e:	b153      	cbz	r3, 8002d36 <oqWriteTimeout+0xd6>
  p->prev       = qp->prev;
 8002d20:	6861      	ldr	r1, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002d22:	2004      	movs	r0, #4
 8002d24:	e9c2 4100 	strd	r4, r1, [r2]
  p->prev->next = p;
 8002d28:	600a      	str	r2, [r1, #0]
 8002d2a:	9901      	ldr	r1, [sp, #4]
  qp->prev      = p;
 8002d2c:	6062      	str	r2, [r4, #4]
 8002d2e:	f7ff fdaf 	bl	8002890 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8002d32:	2800      	cmp	r0, #0
 8002d34:	d0a7      	beq.n	8002c86 <oqWriteTimeout+0x26>
  return max - n;
 8002d36:	9e03      	ldr	r6, [sp, #12]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	eba6 000a 	sub.w	r0, r6, sl
 8002d3e:	f383 8811 	msr	BASEPRI, r3
}
 8002d42:	b005      	add	sp, #20
 8002d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d48:	240004f8 	.word	0x240004f8
 8002d4c:	00000000 	.word	0x00000000

08002d50 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d54:	3030      	adds	r0, #48	@ 0x30
 8002d56:	f7ff bf83 	b.w	8002c60 <oqWriteTimeout>
 8002d5a:	bf00      	nop
 8002d5c:	0000      	movs	r0, r0
	...

08002d60 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002d60:	3030      	adds	r0, #48	@ 0x30
 8002d62:	f7ff bf7d 	b.w	8002c60 <oqWriteTimeout>
 8002d66:	bf00      	nop
	...

08002d70 <chprintf.constprop.0>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002d70:	b40e      	push	{r1, r2, r3}
 8002d72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d76:	b086      	sub	sp, #24
    c = *fmt++;
 8002d78:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 8002fa8 <chprintf.constprop.0+0x238>
  int n = 0;
 8002d7c:	f04f 0800 	mov.w	r8, #0
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002d80:	4604      	mov	r4, r0
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002d82:	ab10      	add	r3, sp, #64	@ 0x40
    c = *fmt++;
 8002d84:	2173      	movs	r1, #115	@ 0x73
  va_start(ap, fmt);
 8002d86:	f109 35ff 	add.w	r5, r9, #4294967295	@ 0xffffffff
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	9302      	str	r3, [sp, #8]
 8002d8e:	e00c      	b.n	8002daa <chprintf.constprop.0+0x3a>
      streamPut(chp, (uint8_t)c);
 8002d90:	6823      	ldr	r3, [r4, #0]
      n++;
 8002d92:	f108 0801 	add.w	r8, r8, #1
    c = *fmt++;
 8002d96:	464d      	mov	r5, r9
      streamPut(chp, (uint8_t)c);
 8002d98:	4620      	mov	r0, r4
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4798      	blx	r3
    c = *fmt++;
 8002d9e:	46a9      	mov	r9, r5
 8002da0:	f819 1b01 	ldrb.w	r1, [r9], #1
    if (c == 0) {
 8002da4:	2900      	cmp	r1, #0
 8002da6:	f000 80e1 	beq.w	8002f6c <chprintf.constprop.0+0x1fc>
    if (c != '%') {
 8002daa:	2925      	cmp	r1, #37	@ 0x25
 8002dac:	d1f0      	bne.n	8002d90 <chprintf.constprop.0+0x20>
    if (*fmt == '-') {
 8002dae:	786b      	ldrb	r3, [r5, #1]
 8002db0:	2b2d      	cmp	r3, #45	@ 0x2d
 8002db2:	f000 80c1 	beq.w	8002f38 <chprintf.constprop.0+0x1c8>
    left_align = false;
 8002db6:	2700      	movs	r7, #0
    if (*fmt == '+') {
 8002db8:	f899 2000 	ldrb.w	r2, [r9]
 8002dbc:	2a2b      	cmp	r2, #43	@ 0x2b
 8002dbe:	f000 80b5 	beq.w	8002f2c <chprintf.constprop.0+0x1bc>
    do_sign = false;
 8002dc2:	2000      	movs	r0, #0
    if (*fmt == '0') {
 8002dc4:	2a30      	cmp	r2, #48	@ 0x30
 8002dc6:	f000 80ab 	beq.w	8002f20 <chprintf.constprop.0+0x1b0>
    filler = ' ';
 8002dca:	2620      	movs	r6, #32
    if ( *fmt == '*') {
 8002dcc:	2a2a      	cmp	r2, #42	@ 0x2a
 8002dce:	d150      	bne.n	8002e72 <chprintf.constprop.0+0x102>
      width = va_arg(ap, int);
 8002dd0:	f8dd c000 	ldr.w	ip, [sp]
      c = *fmt++;
 8002dd4:	f109 0502 	add.w	r5, r9, #2
 8002dd8:	f899 2001 	ldrb.w	r2, [r9, #1]
      width = va_arg(ap, int);
 8002ddc:	f85c ab04 	ldr.w	sl, [ip], #4
    if (c == '.') {
 8002de0:	2a2e      	cmp	r2, #46	@ 0x2e
 8002de2:	f000 80ad 	beq.w	8002f40 <chprintf.constprop.0+0x1d0>
    precision = 0;
 8002de6:	2100      	movs	r1, #0
    if (c == 'l' || c == 'L') {
 8002de8:	f002 03df 	and.w	r3, r2, #223	@ 0xdf
 8002dec:	2b4c      	cmp	r3, #76	@ 0x4c
 8002dee:	d158      	bne.n	8002ea2 <chprintf.constprop.0+0x132>
      c = *fmt++;
 8002df0:	782a      	ldrb	r2, [r5, #0]
      if (c == 0) {
 8002df2:	2a00      	cmp	r2, #0
 8002df4:	f000 80ba 	beq.w	8002f6c <chprintf.constprop.0+0x1fc>
    switch (c) {
 8002df8:	f1a2 0344 	sub.w	r3, r2, #68	@ 0x44
      c = *fmt++;
 8002dfc:	3501      	adds	r5, #1
    switch (c) {
 8002dfe:	2b34      	cmp	r3, #52	@ 0x34
 8002e00:	f200 80ba 	bhi.w	8002f78 <chprintf.constprop.0+0x208>
 8002e04:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002e08:	00b8016b 	.word	0x00b8016b
 8002e0c:	00b800b8 	.word	0x00b800b8
 8002e10:	016b00b8 	.word	0x016b00b8
 8002e14:	00b800b8 	.word	0x00b800b8
 8002e18:	00b800b8 	.word	0x00b800b8
 8002e1c:	019c00b8 	.word	0x019c00b8
 8002e20:	00b80171 	.word	0x00b80171
 8002e24:	00b800b8 	.word	0x00b800b8
 8002e28:	019700b8 	.word	0x019700b8
 8002e2c:	00b800b8 	.word	0x00b800b8
 8002e30:	00b80171 	.word	0x00b80171
 8002e34:	00b800b8 	.word	0x00b800b8
 8002e38:	00b800b8 	.word	0x00b800b8
 8002e3c:	00b800b8 	.word	0x00b800b8
 8002e40:	00b800b8 	.word	0x00b800b8
 8002e44:	012900b8 	.word	0x012900b8
 8002e48:	00b8016b 	.word	0x00b8016b
 8002e4c:	00b800b8 	.word	0x00b800b8
 8002e50:	016b00b8 	.word	0x016b00b8
 8002e54:	00b800b8 	.word	0x00b800b8
 8002e58:	00b800b8 	.word	0x00b800b8
 8002e5c:	019c00b8 	.word	0x019c00b8
 8002e60:	00b80171 	.word	0x00b80171
 8002e64:	010b00b8 	.word	0x010b00b8
 8002e68:	019700b8 	.word	0x019700b8
 8002e6c:	00b800b8 	.word	0x00b800b8
 8002e70:	0171      	.short	0x0171
        c = *fmt++;
 8002e72:	f109 0901 	add.w	r9, r9, #1
        if (c == 0) {
 8002e76:	2a00      	cmp	r2, #0
 8002e78:	d078      	beq.n	8002f6c <chprintf.constprop.0+0x1fc>
      width = 0;
 8002e7a:	f04f 0a00 	mov.w	sl, #0
 8002e7e:	e005      	b.n	8002e8c <chprintf.constprop.0+0x11c>
        c = *fmt++;
 8002e80:	f819 2b01 	ldrb.w	r2, [r9], #1
          width = width * 10 + c;
 8002e84:	eb03 0a41 	add.w	sl, r3, r1, lsl #1
        if (c == 0) {
 8002e88:	2a00      	cmp	r2, #0
 8002e8a:	d06f      	beq.n	8002f6c <chprintf.constprop.0+0x1fc>
        if (c >= '0' && c <= '9') {
 8002e8c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8002e90:	464d      	mov	r5, r9
          width = width * 10 + c;
 8002e92:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
        if (c >= '0' && c <= '9') {
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b09      	cmp	r3, #9
 8002e9a:	d9f1      	bls.n	8002e80 <chprintf.constprop.0+0x110>
 8002e9c:	f8dd c000 	ldr.w	ip, [sp]
 8002ea0:	e79e      	b.n	8002de0 <chprintf.constprop.0+0x70>
      is_long = (c >= 'A') && (c <= 'Z');
 8002ea2:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 8002ea6:	fa5f fe83 	uxtb.w	lr, r3
    switch (c) {
 8002eaa:	f1a2 0344 	sub.w	r3, r2, #68	@ 0x44
 8002eae:	2b34      	cmp	r3, #52	@ 0x34
 8002eb0:	d862      	bhi.n	8002f78 <chprintf.constprop.0+0x208>
 8002eb2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002eb6:	00fd      	.short	0x00fd
 8002eb8:	00610061 	.word	0x00610061
 8002ebc:	00610061 	.word	0x00610061
 8002ec0:	006100fd 	.word	0x006100fd
 8002ec4:	00610061 	.word	0x00610061
 8002ec8:	00610061 	.word	0x00610061
 8002ecc:	0112012a 	.word	0x0112012a
 8002ed0:	00610061 	.word	0x00610061
 8002ed4:	00610061 	.word	0x00610061
 8002ed8:	0061007b 	.word	0x0061007b
 8002edc:	01120061 	.word	0x01120061
 8002ee0:	00610061 	.word	0x00610061
 8002ee4:	00610061 	.word	0x00610061
 8002ee8:	00610061 	.word	0x00610061
 8002eec:	00610061 	.word	0x00610061
 8002ef0:	00610061 	.word	0x00610061
 8002ef4:	00fd00d2 	.word	0x00fd00d2
 8002ef8:	00610061 	.word	0x00610061
 8002efc:	00610061 	.word	0x00610061
 8002f00:	006100fd 	.word	0x006100fd
 8002f04:	00610061 	.word	0x00610061
 8002f08:	00610061 	.word	0x00610061
 8002f0c:	0112012a 	.word	0x0112012a
 8002f10:	00610061 	.word	0x00610061
 8002f14:	006100b4 	.word	0x006100b4
 8002f18:	0061007b 	.word	0x0061007b
 8002f1c:	01120061 	.word	0x01120061
      fmt++;
 8002f20:	f109 0901 	add.w	r9, r9, #1
      filler = '0';
 8002f24:	4616      	mov	r6, r2
    if ( *fmt == '*') {
 8002f26:	f899 2000 	ldrb.w	r2, [r9]
 8002f2a:	e74f      	b.n	8002dcc <chprintf.constprop.0+0x5c>
    if (*fmt == '0') {
 8002f2c:	f899 2001 	ldrb.w	r2, [r9, #1]
      do_sign = true;
 8002f30:	2001      	movs	r0, #1
      fmt++;
 8002f32:	f109 0901 	add.w	r9, r9, #1
 8002f36:	e745      	b.n	8002dc4 <chprintf.constprop.0+0x54>
      fmt++;
 8002f38:	f105 0902 	add.w	r9, r5, #2
      left_align = true;
 8002f3c:	2701      	movs	r7, #1
 8002f3e:	e73b      	b.n	8002db8 <chprintf.constprop.0+0x48>
      c = *fmt++;
 8002f40:	782a      	ldrb	r2, [r5, #0]
      if (c == 0) {
 8002f42:	b19a      	cbz	r2, 8002f6c <chprintf.constprop.0+0x1fc>
      if (c == '*') {
 8002f44:	2a2a      	cmp	r2, #42	@ 0x2a
 8002f46:	d02a      	beq.n	8002f9e <chprintf.constprop.0+0x22e>
      c = *fmt++;
 8002f48:	f105 0e01 	add.w	lr, r5, #1
    precision = 0;
 8002f4c:	2100      	movs	r1, #0
        while (c >= '0' && c <= '9') {
 8002f4e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8002f52:	4675      	mov	r5, lr
          precision = precision * 10 + c;
 8002f54:	eb01 0981 	add.w	r9, r1, r1, lsl #2
        while (c >= '0' && c <= '9') {
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b09      	cmp	r3, #9
 8002f5c:	f63f af44 	bhi.w	8002de8 <chprintf.constprop.0+0x78>
          c = *fmt++;
 8002f60:	f81e 2b01 	ldrb.w	r2, [lr], #1
          precision = precision * 10 + c;
 8002f64:	eb03 0149 	add.w	r1, r3, r9, lsl #1
          if (c == 0) {
 8002f68:	2a00      	cmp	r2, #0
 8002f6a:	d1f0      	bne.n	8002f4e <chprintf.constprop.0+0x1de>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8002f6c:	4640      	mov	r0, r8
 8002f6e:	b006      	add	sp, #24
 8002f70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f74:	b003      	add	sp, #12
 8002f76:	4770      	bx	lr
      break;
 8002f78:	f8cd c000 	str.w	ip, [sp]
    if ((width -= i) < 0) {
 8002f7c:	f10a 39ff 	add.w	r9, sl, #4294967295	@ 0xffffffff
      *p++ = c;
 8002f80:	f88d 200c 	strb.w	r2, [sp, #12]
    if ((width -= i) < 0) {
 8002f84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    if (left_align == false) {
 8002f88:	2f00      	cmp	r7, #0
 8002f8a:	f040 808c 	bne.w	80030a6 <chprintf.constprop.0+0x336>
    if (width < 0) {
 8002f8e:	f1ba 0f01 	cmp.w	sl, #1
        i--;
 8002f92:	46ba      	mov	sl, r7
    if (width < 0) {
 8002f94:	dc6c      	bgt.n	8003070 <chprintf.constprop.0+0x300>
 8002f96:	f10d 0b0c 	add.w	fp, sp, #12
 8002f9a:	46b9      	mov	r9, r7
 8002f9c:	e023      	b.n	8002fe6 <chprintf.constprop.0+0x276>
        c = *fmt++;
 8002f9e:	786a      	ldrb	r2, [r5, #1]
 8002fa0:	3502      	adds	r5, #2
        precision = va_arg(ap, int);
 8002fa2:	f85c 1b04 	ldr.w	r1, [ip], #4
 8002fa6:	e71f      	b.n	8002de8 <chprintf.constprop.0+0x78>
 8002fa8:	0800517d 	.word	0x0800517d
      c = 10;
 8002fac:	220a      	movs	r2, #10
        l = va_arg(ap, int);
 8002fae:	f10c 0304 	add.w	r3, ip, #4
 8002fb2:	9300      	str	r3, [sp, #0]
  return long_to_string_with_divisor(p, num, radix, 0);
 8002fb4:	f10d 0b0c 	add.w	fp, sp, #12
        l = va_arg(ap, unsigned int);
 8002fb8:	f8dc 1000 	ldr.w	r1, [ip]
  return long_to_string_with_divisor(p, num, radix, 0);
 8002fbc:	4658      	mov	r0, fp
 8002fbe:	f7ff f9c7 	bl	8002350 <long_to_string_with_divisor.constprop.0>
    i = (int)(p - s);
 8002fc2:	eba0 020b 	sub.w	r2, r0, fp
    if ((width -= i) < 0) {
 8002fc6:	ebaa 0302 	sub.w	r3, sl, r2
    i = (int)(p - s);
 8002fca:	9201      	str	r2, [sp, #4]
    if ((width -= i) < 0) {
 8002fcc:	ea23 79e3 	bic.w	r9, r3, r3, asr #31
    if (left_align == false) {
 8002fd0:	2f00      	cmp	r7, #0
 8002fd2:	d148      	bne.n	8003066 <chprintf.constprop.0+0x2f6>
    if (width < 0) {
 8002fd4:	2b00      	cmp	r3, #0
        i--;
 8002fd6:	f102 3aff 	add.w	sl, r2, #4294967295	@ 0xffffffff
    if (width < 0) {
 8002fda:	dc4d      	bgt.n	8003078 <chprintf.constprop.0+0x308>
    while (--i >= 0) {
 8002fdc:	9b01      	ldr	r3, [sp, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f77f aedd 	ble.w	8002d9e <chprintf.constprop.0+0x2e>
      } while (++width != 0);
 8002fe4:	46b9      	mov	r9, r7
 8002fe6:	f10a 0701 	add.w	r7, sl, #1
 8002fea:	445f      	add	r7, fp
      streamPut(chp, (uint8_t)*s++);
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	4798      	blx	r3
    while (--i >= 0) {
 8002ff8:	455f      	cmp	r7, fp
 8002ffa:	d1f7      	bne.n	8002fec <chprintf.constprop.0+0x27c>
 8002ffc:	44c2      	add	sl, r8
 8002ffe:	f10a 0801 	add.w	r8, sl, #1
    while (width) {
 8003002:	f1b9 0f00 	cmp.w	r9, #0
 8003006:	f43f aeca 	beq.w	8002d9e <chprintf.constprop.0+0x2e>
 800300a:	464f      	mov	r7, r9
      streamPut(chp, (uint8_t)filler);
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	4631      	mov	r1, r6
 8003010:	4620      	mov	r0, r4
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4798      	blx	r3
    while (width) {
 8003016:	3f01      	subs	r7, #1
 8003018:	d1f8      	bne.n	800300c <chprintf.constprop.0+0x29c>
 800301a:	44c8      	add	r8, r9
 800301c:	e6bf      	b.n	8002d9e <chprintf.constprop.0+0x2e>
      if ((s = va_arg(ap, char *)) == 0) {
 800301e:	4663      	mov	r3, ip
 8003020:	f853 bb04 	ldr.w	fp, [r3], #4
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	f1bb 0f00 	cmp.w	fp, #0
 800302a:	d079      	beq.n	8003120 <chprintf.constprop.0+0x3b0>
        precision = 32767;
 800302c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8003030:	2900      	cmp	r1, #0
 8003032:	bf08      	it	eq
 8003034:	4619      	moveq	r1, r3
      for (p = s; *p && (--precision >= 0); p++)
 8003036:	f89b 3000 	ldrb.w	r3, [fp]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8085 	beq.w	800314a <chprintf.constprop.0+0x3da>
 8003040:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
        s = "(null)";
 8003044:	4658      	mov	r0, fp
 8003046:	440a      	add	r2, r1
 8003048:	e002      	b.n	8003050 <chprintf.constprop.0+0x2e0>
      for (p = s; *p && (--precision >= 0); p++)
 800304a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800304e:	b113      	cbz	r3, 8003056 <chprintf.constprop.0+0x2e6>
 8003050:	1a13      	subs	r3, r2, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	daf9      	bge.n	800304a <chprintf.constprop.0+0x2da>
      filler = ' ';
 8003056:	2620      	movs	r6, #32
 8003058:	e7b3      	b.n	8002fc2 <chprintf.constprop.0+0x252>
      *p++ = va_arg(ap, int);
 800305a:	4663      	mov	r3, ip
      filler = ' ';
 800305c:	2620      	movs	r6, #32
      *p++ = va_arg(ap, int);
 800305e:	f813 2b04 	ldrb.w	r2, [r3], #4
 8003062:	9300      	str	r3, [sp, #0]
      break;
 8003064:	e78a      	b.n	8002f7c <chprintf.constprop.0+0x20c>
    while (--i >= 0) {
 8003066:	9b01      	ldr	r3, [sp, #4]
 8003068:	f1b3 0a01 	subs.w	sl, r3, #1
 800306c:	d5bb      	bpl.n	8002fe6 <chprintf.constprop.0+0x276>
 800306e:	e7c8      	b.n	8003002 <chprintf.constprop.0+0x292>
    i = (int)(p - s);
 8003070:	2301      	movs	r3, #1
    if (width < 0) {
 8003072:	f10d 0b0c 	add.w	fp, sp, #12
    i = (int)(p - s);
 8003076:	9301      	str	r3, [sp, #4]
      if ((*s == '-' || *s == '+') && filler == '0') {
 8003078:	f89b 1000 	ldrb.w	r1, [fp]
 800307c:	292b      	cmp	r1, #43	@ 0x2b
 800307e:	bf18      	it	ne
 8003080:	292d      	cmpne	r1, #45	@ 0x2d
 8003082:	d101      	bne.n	8003088 <chprintf.constprop.0+0x318>
 8003084:	2e30      	cmp	r6, #48	@ 0x30
 8003086:	d035      	beq.n	80030f4 <chprintf.constprop.0+0x384>
      width = -width;
 8003088:	f1c9 0700 	rsb	r7, r9, #0
        streamPut(chp, (uint8_t)filler);
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	4631      	mov	r1, r6
 8003090:	4620      	mov	r0, r4
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4798      	blx	r3
      } while (++width != 0);
 8003096:	3701      	adds	r7, #1
 8003098:	d1f8      	bne.n	800308c <chprintf.constprop.0+0x31c>
    while (--i >= 0) {
 800309a:	9b01      	ldr	r3, [sp, #4]
 800309c:	44c8      	add	r8, r9
 800309e:	f1b3 0a01 	subs.w	sl, r3, #1
 80030a2:	d59f      	bpl.n	8002fe4 <chprintf.constprop.0+0x274>
 80030a4:	e67b      	b.n	8002d9e <chprintf.constprop.0+0x2e>
 80030a6:	f04f 0a00 	mov.w	sl, #0
    if (left_align == false) {
 80030aa:	f10d 0b0c 	add.w	fp, sp, #12
 80030ae:	e79a      	b.n	8002fe6 <chprintf.constprop.0+0x276>
        l = va_arg(ap, int);
 80030b0:	4663      	mov	r3, ip
      if (is_long) {
 80030b2:	f1be 0f19 	cmp.w	lr, #25
        l = va_arg(ap, int);
 80030b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80030ba:	9300      	str	r3, [sp, #0]
      if (is_long) {
 80030bc:	d911      	bls.n	80030e2 <chprintf.constprop.0+0x372>
      if (l < 0) {
 80030be:	2900      	cmp	r1, #0
 80030c0:	db25      	blt.n	800310e <chprintf.constprop.0+0x39e>
        if (do_sign) {
 80030c2:	b3a0      	cbz	r0, 800312e <chprintf.constprop.0+0x3be>
          *p++ = '+';
 80030c4:	232b      	movs	r3, #43	@ 0x2b
 80030c6:	f10d 000d 	add.w	r0, sp, #13
 80030ca:	f10d 0b0c 	add.w	fp, sp, #12
 80030ce:	f88d 300c 	strb.w	r3, [sp, #12]
  return long_to_string_with_divisor(p, num, radix, 0);
 80030d2:	220a      	movs	r2, #10
 80030d4:	f7ff f93c 	bl	8002350 <long_to_string_with_divisor.constprop.0>
      break;
 80030d8:	e773      	b.n	8002fc2 <chprintf.constprop.0+0x252>
      c = 16;
 80030da:	2210      	movs	r2, #16
 80030dc:	e767      	b.n	8002fae <chprintf.constprop.0+0x23e>
 80030de:	f10c 0304 	add.w	r3, ip, #4
        l = va_arg(ap, long);
 80030e2:	f8dc 1000 	ldr.w	r1, [ip]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	e7e9      	b.n	80030be <chprintf.constprop.0+0x34e>
        l = va_arg(ap, int);
 80030ea:	f10c 0304 	add.w	r3, ip, #4
      c = 16;
 80030ee:	2210      	movs	r2, #16
        l = va_arg(ap, int);
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	e75f      	b.n	8002fb4 <chprintf.constprop.0+0x244>
        streamPut(chp, (uint8_t)*s++);
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	4620      	mov	r0, r4
      n++;
 80030f8:	f108 0801 	add.w	r8, r8, #1
        streamPut(chp, (uint8_t)*s++);
 80030fc:	f10b 0b01 	add.w	fp, fp, #1
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4798      	blx	r3
        i--;
 8003104:	f8cd a004 	str.w	sl, [sp, #4]
 8003108:	e7be      	b.n	8003088 <chprintf.constprop.0+0x318>
    switch (c) {
 800310a:	2208      	movs	r2, #8
 800310c:	e74f      	b.n	8002fae <chprintf.constprop.0+0x23e>
        *p++ = '-';
 800310e:	232d      	movs	r3, #45	@ 0x2d
        l = -l;
 8003110:	4249      	negs	r1, r1
        *p++ = '-';
 8003112:	f10d 000d 	add.w	r0, sp, #13
 8003116:	f10d 0b0c 	add.w	fp, sp, #12
 800311a:	f88d 300c 	strb.w	r3, [sp, #12]
 800311e:	e7d8      	b.n	80030d2 <chprintf.constprop.0+0x362>
        s = "(null)";
 8003120:	f8df b040 	ldr.w	fp, [pc, #64]	@ 8003164 <chprintf.constprop.0+0x3f4>
      if (precision == 0) {
 8003124:	2900      	cmp	r1, #0
 8003126:	d186      	bne.n	8003036 <chprintf.constprop.0+0x2c6>
        precision = 32767;
 8003128:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800312c:	e788      	b.n	8003040 <chprintf.constprop.0+0x2d0>
    p = tmpbuf;
 800312e:	f10d 0b0c 	add.w	fp, sp, #12
 8003132:	4658      	mov	r0, fp
 8003134:	e7cd      	b.n	80030d2 <chprintf.constprop.0+0x362>
        l = va_arg(ap, int);
 8003136:	f10c 0304 	add.w	r3, ip, #4
      c = 10;
 800313a:	220a      	movs	r2, #10
        l = va_arg(ap, int);
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	e739      	b.n	8002fb4 <chprintf.constprop.0+0x244>
 8003140:	f10c 0304 	add.w	r3, ip, #4
 8003144:	2208      	movs	r2, #8
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	e734      	b.n	8002fb4 <chprintf.constprop.0+0x244>
    if ((width -= i) < 0) {
 800314a:	ea2a 79ea 	bic.w	r9, sl, sl, asr #31
    if (left_align == false) {
 800314e:	b937      	cbnz	r7, 800315e <chprintf.constprop.0+0x3ee>
    if (width < 0) {
 8003150:	f1ba 0f00 	cmp.w	sl, #0
 8003154:	f77f ae23 	ble.w	8002d9e <chprintf.constprop.0+0x2e>
      filler = ' ';
 8003158:	2620      	movs	r6, #32
    i = (int)(p - s);
 800315a:	9701      	str	r7, [sp, #4]
 800315c:	e794      	b.n	8003088 <chprintf.constprop.0+0x318>
      filler = ' ';
 800315e:	2620      	movs	r6, #32
 8003160:	e74f      	b.n	8003002 <chprintf.constprop.0+0x292>
 8003162:	bf00      	nop
 8003164:	08005194 	.word	0x08005194
	...

08003170 <__cpu_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __cpu_init(void) {
 8003170:	b510      	push	{r4, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003172:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003176:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800317a:	481c      	ldr	r0, [pc, #112]	@ (80031ec <__cpu_init+0x7c>)
 800317c:	2200      	movs	r2, #0
 800317e:	f8c0 2250 	str.w	r2, [r0, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003182:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003186:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800318a:	6943      	ldr	r3, [r0, #20]
 800318c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003190:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003192:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003196:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800319a:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800319e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80031a2:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80031a6:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80031aa:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80031ae:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 80031b2:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80031b6:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80031ba:	4673      	mov	r3, lr
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80031bc:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80031c0:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80031c2:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	d1f8      	bne.n	80031bc <__cpu_init+0x4c>
    } while(sets-- != 0U);
 80031ca:	f1ac 0c20 	sub.w	ip, ip, #32
 80031ce:	f11c 0f20 	cmn.w	ip, #32
 80031d2:	d1f0      	bne.n	80031b6 <__cpu_init+0x46>
 80031d4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80031d8:	6943      	ldr	r3, [r0, #20]
 80031da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031de:	6143      	str	r3, [r0, #20]
 80031e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80031e4:	f3bf 8f6f 	isb	sy

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	bf00      	nop
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
	...

08003200 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8003200:	e7fe      	b.n	8003200 <__default_exit>
 8003202:	bf00      	nop
	...

08003210 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	4d29      	ldr	r5, [pc, #164]	@ (80032b8 <__init_ram_areas+0xa8>)
 8003214:	f105 0480 	add.w	r4, r5, #128	@ 0x80
#if CRT0_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 8003218:	f855 2c10 	ldr.w	r2, [r5, #-16]
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800321c:	e955 0103 	ldrd	r0, r1, [r5, #-12]
 8003220:	4288      	cmp	r0, r1
 8003222:	d20d      	bcs.n	8003240 <__init_ram_areas+0x30>
 8003224:	3a04      	subs	r2, #4
    uint32_t *p = rap->init_area;
 8003226:	4603      	mov	r3, r0
      *p = *tp;
 8003228:	f852 6f04 	ldr.w	r6, [r2, #4]!
 800322c:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 8003230:	428b      	cmp	r3, r1
 8003232:	d3f9      	bcc.n	8003228 <__init_ram_areas+0x18>
 8003234:	3901      	subs	r1, #1
 8003236:	1d03      	adds	r3, r0, #4
 8003238:	1a09      	subs	r1, r1, r0
 800323a:	f021 0103 	bic.w	r1, r1, #3
 800323e:	18c8      	adds	r0, r1, r3
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8003240:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8003244:	4283      	cmp	r3, r0
 8003246:	d907      	bls.n	8003258 <__init_ram_areas+0x48>
      *p = 0;
 8003248:	3b01      	subs	r3, #1
 800324a:	2100      	movs	r1, #0
 800324c:	1a1b      	subs	r3, r3, r0
 800324e:	f023 0203 	bic.w	r2, r3, #3
 8003252:	3204      	adds	r2, #4
 8003254:	f7fe fe76 	bl	8001f44 <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8003258:	3510      	adds	r5, #16
 800325a:	42a5      	cmp	r5, r4
 800325c:	d1dc      	bne.n	8003218 <__init_ram_areas+0x8>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800325e:	4817      	ldr	r0, [pc, #92]	@ (80032bc <__init_ram_areas+0xac>)
 8003260:	2300      	movs	r3, #0
 8003262:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003266:	f3bf 8f4f 	dsb	sy
   __DSB();

    ccsidr = SCB->CCSIDR;
 800326a:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
                                            /* clean D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 800326e:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003272:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003276:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 800327a:	0164      	lsls	r4, r4, #5
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 800327c:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003280:	462b      	mov	r3, r5
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 8003282:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCCSW_WAY_Pos) & SCB_DCCSW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003286:	3b01      	subs	r3, #1
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 8003288:	f8c0 226c 	str.w	r2, [r0, #620]	@ 0x26c
      } while (ways-- != 0U);
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	d1f8      	bne.n	8003282 <__init_ram_areas+0x72>
    } while(sets-- != 0U);
 8003290:	3c20      	subs	r4, #32
 8003292:	f114 0f20 	cmn.w	r4, #32
 8003296:	d1f1      	bne.n	800327c <__init_ram_areas+0x6c>
 8003298:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800329c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 80032a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032a4:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	f8c0 3250 	str.w	r3, [r0, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80032ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032b2:	f3bf 8f6f 	isb	sy
     for self-modifying code.*/
  SCB_CleanDCache();
  SCB_InvalidateICache();
#endif
#endif
}
 80032b6:	bd70      	pop	{r4, r5, r6, pc}
 80032b8:	080053ec 	.word	0x080053ec
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 80032c0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART3
  sd_lld_serve_interrupt(&SD3);
 80032c2:	4810      	ldr	r0, [pc, #64]	@ (8003304 <VectorDC+0x44>)
 80032c4:	f7ff f9cc 	bl	8002660 <sd_lld_serve_interrupt>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80032c8:	2330      	movs	r3, #48	@ 0x30
 80032ca:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80032ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003308 <VectorDC+0x48>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 80032d6:	d102      	bne.n	80032de <VectorDC+0x1e>
 80032d8:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD3);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 80032dc:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80032de:	f3ef 8309 	mrs	r3, PSP

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)psp;

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 80032e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 80032e6:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80032e8:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80032ea:	f383 8809 	msr	PSP, r3
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80032ee:	4a07      	ldr	r2, [pc, #28]	@ (800330c <VectorDC+0x4c>)
 80032f0:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80032f2:	68d2      	ldr	r2, [r2, #12]
    /* Writing back the modified S-PSP value.*/
    __set_PSP(psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80032f4:	6889      	ldr	r1, [r1, #8]
 80032f6:	6892      	ldr	r2, [r2, #8]
 80032f8:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80032fa:	bf8c      	ite	hi
 80032fc:	4a04      	ldrhi	r2, [pc, #16]	@ (8003310 <VectorDC+0x50>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80032fe:	4a05      	ldrls	r2, [pc, #20]	@ (8003314 <VectorDC+0x54>)
 8003300:	619a      	str	r2, [r3, #24]
 8003302:	bd08      	pop	{r3, pc}
 8003304:	24000498 	.word	0x24000498
 8003308:	e000ed00 	.word	0xe000ed00
 800330c:	240004f8 	.word	0x240004f8
 8003310:	080003e3 	.word	0x080003e3
 8003314:	080003e6 	.word	0x080003e6
	...

08003320 <Vector114>:
/**
 * @brief   UART5 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART5_HANDLER) {
 8003320:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_UART5
  sd_lld_serve_interrupt(&SD5);
 8003322:	4810      	ldr	r0, [pc, #64]	@ (8003364 <Vector114+0x44>)
 8003324:	f7ff f99c 	bl	8002660 <sd_lld_serve_interrupt>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003328:	2330      	movs	r3, #48	@ 0x30
 800332a:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800332e:	4b0e      	ldr	r3, [pc, #56]	@ (8003368 <Vector114+0x48>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003336:	d102      	bne.n	800333e <Vector114+0x1e>
 8003338:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD5);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 800333c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800333e:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003342:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003346:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003348:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800334a:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 800334e:	4a07      	ldr	r2, [pc, #28]	@ (800336c <Vector114+0x4c>)
 8003350:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003352:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003354:	6889      	ldr	r1, [r1, #8]
 8003356:	6892      	ldr	r2, [r2, #8]
 8003358:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800335a:	bf8c      	ite	hi
 800335c:	4a04      	ldrhi	r2, [pc, #16]	@ (8003370 <Vector114+0x50>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 800335e:	4a05      	ldrls	r2, [pc, #20]	@ (8003374 <Vector114+0x54>)
 8003360:	619a      	str	r2, [r3, #24]
 8003362:	bd08      	pop	{r3, pc}
 8003364:	24000438 	.word	0x24000438
 8003368:	e000ed00 	.word	0xe000ed00
 800336c:	240004f8 	.word	0x240004f8
 8003370:	080003e3 	.word	0x080003e3
 8003374:	080003e6 	.word	0x080003e6
	...

08003380 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8003380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8003384:	f04f 4680 	mov.w	r6, #1073741824	@ 0x40000000
 8003388:	6933      	ldr	r3, [r6, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 800338a:	68f2      	ldr	r2, [r6, #12]
 800338c:	4013      	ands	r3, r2
 800338e:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;

  if ((sr & TIM_SR_CC1IF) != 0U)
 8003390:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8003392:	ea6f 0202 	mvn.w	r2, r2
 8003396:	6132      	str	r2, [r6, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8003398:	d40b      	bmi.n	80033b2 <VectorB0+0x32>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800339a:	2330      	movs	r3, #48	@ 0x30
 800339c:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80033a0:	4b4f      	ldr	r3, [pc, #316]	@ (80034e0 <VectorB0+0x160>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 80033a8:	d160      	bne.n	800346c <VectorB0+0xec>
 80033aa:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 80033ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033b2:	2330      	movs	r3, #48	@ 0x30
 80033b4:	f383 8811 	msr	BASEPRI, r3
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 80033b8:	4d4a      	ldr	r5, [pc, #296]	@ (80034e4 <VectorB0+0x164>)
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
    vtlp->lasttime = lasttime;

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
    vtp->dlist.next = NULL;
 80033ba:	f04f 0a00 	mov.w	sl, #0
 80033be:	f105 0710 	add.w	r7, r5, #16
 80033c2:	f04f 0830 	mov.w	r8, #48	@ 0x30
 80033c6:	e009      	b.n	80033dc <VectorB0+0x5c>
 80033c8:	f38a 8811 	msr	BASEPRI, sl
    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();

    vtp->func(vtp, vtp->par);
 80033cc:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 80033d0:	4620      	mov	r0, r4
 80033d2:	4798      	blx	r3
 80033d4:	f388 8811 	msr	BASEPRI, r8

    chSysLockFromISR();

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 80033d8:	6963      	ldr	r3, [r4, #20]
 80033da:	b9b3      	cbnz	r3, 800340a <VectorB0+0x8a>
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80033dc:	69ea      	ldr	r2, [r5, #28]
  return (systime_t)STM32_ST_TIM->CNT;
 80033de:	6a71      	ldr	r1, [r6, #36]	@ 0x24
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 80033e0:	692c      	ldr	r4, [r5, #16]
 80033e2:	1a88      	subs	r0, r1, r2
    if (nowdelta < vtp->dlist.delta) {
 80033e4:	68a3      	ldr	r3, [r4, #8]
 80033e6:	4298      	cmp	r0, r3
  return systime + (systime_t)interval;
 80033e8:	eb02 0903 	add.w	r9, r2, r3
 80033ec:	d32a      	bcc.n	8003444 <VectorB0+0xc4>
  dlp->prev->next = dlp->next;
 80033ee:	e9d4 3200 	ldrd	r3, r2, [r4]
    vtlp->lasttime = lasttime;
 80033f2:	f8c5 901c 	str.w	r9, [r5, #28]
 80033f6:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 80033f8:	605a      	str	r2, [r3, #4]
    vtp->dlist.next = NULL;
 80033fa:	f8c4 a000 	str.w	sl, [r4]
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80033fe:	692b      	ldr	r3, [r5, #16]
 8003400:	42bb      	cmp	r3, r7
 8003402:	d1e1      	bne.n	80033c8 <VectorB0+0x48>
  STM32_ST_TIM->DIER = 0U;
 8003404:	f8c6 a00c 	str.w	sl, [r6, #12]
 8003408:	e7de      	b.n	80033c8 <VectorB0+0x48>
  return (systime_t)STM32_ST_TIM->CNT;
 800340a:	6a71      	ldr	r1, [r6, #36]	@ 0x24
  return (bool)(dlhp == dlhp->next);
 800340c:	692a      	ldr	r2, [r5, #16]
  return (sysinterval_t)((systime_t)(end - start));
 800340e:	eba1 0009 	sub.w	r0, r1, r9
      now = chVTGetSystemTimeX();
      nowdelta = chTimeDiffX(lasttime, now);

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 8003412:	4283      	cmp	r3, r0
 8003414:	d33e      	bcc.n	8003494 <VectorB0+0x114>
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8003416:	42ba      	cmp	r2, r7
 8003418:	d056      	beq.n	80034c8 <VectorB0+0x148>
  while (likely(dlp->delta < delta)) {
 800341a:	6891      	ldr	r1, [r2, #8]
 800341c:	428b      	cmp	r3, r1
 800341e:	d904      	bls.n	800342a <VectorB0+0xaa>
    dlp = dlp->next;
 8003420:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 8003422:	1a5b      	subs	r3, r3, r1
  while (likely(dlp->delta < delta)) {
 8003424:	6891      	ldr	r1, [r2, #8]
 8003426:	4299      	cmp	r1, r3
 8003428:	d3fa      	bcc.n	8003420 <VectorB0+0xa0>
  dlp->delta      = delta;
 800342a:	60a3      	str	r3, [r4, #8]
  dlp->delta -= delta;
 800342c:	6891      	ldr	r1, [r2, #8]
  dlp->next       = dlhp;
 800342e:	6022      	str	r2, [r4, #0]
  dlp->delta -= delta;
 8003430:	1ac9      	subs	r1, r1, r3
  dlp->prev       = dlp->next->prev;
 8003432:	6853      	ldr	r3, [r2, #4]
 8003434:	6063      	str	r3, [r4, #4]
  dlp->prev->next = dlp;
 8003436:	601c      	str	r4, [r3, #0]
  dlhp->delta = (sysinterval_t)-1;
 8003438:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  dlp->delta -= delta;
 800343c:	e9c2 4101 	strd	r4, r1, [r2, #4]
  dlhp->delta = (sysinterval_t)-1;
 8003440:	61ab      	str	r3, [r5, #24]
}
 8003442:	e7be      	b.n	80033c2 <VectorB0+0x42>
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8003444:	42bc      	cmp	r4, r7
 8003446:	d00d      	beq.n	8003464 <VectorB0+0xe4>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  vtp->dlist.delta -= nowdelta;
 8003448:	1a5b      	subs	r3, r3, r1
  currdelta = vtlp->lastdelta;
 800344a:	6a28      	ldr	r0, [r5, #32]
  vtlp->lasttime += nowdelta;
 800344c:	61e9      	str	r1, [r5, #28]
  vtp->dlist.delta -= nowdelta;
 800344e:	4413      	add	r3, r2
  if (delay < currdelta) {
 8003450:	4283      	cmp	r3, r0
  vtp->dlist.delta -= nowdelta;
 8003452:	60a3      	str	r3, [r4, #8]
  if (delay < currdelta) {
 8003454:	bf38      	it	cc
 8003456:	4603      	movcc	r3, r0
  return systime + (systime_t)interval;
 8003458:	18ca      	adds	r2, r1, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800345a:	6372      	str	r2, [r6, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800345c:	6a72      	ldr	r2, [r6, #36]	@ 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800345e:	1a51      	subs	r1, r2, r1
    if (likely(nowdelta < delay)) {
 8003460:	428b      	cmp	r3, r1
 8003462:	d91f      	bls.n	80034a4 <VectorB0+0x124>
 8003464:	2300      	movs	r3, #0
 8003466:	f383 8811 	msr	BASEPRI, r3
}
 800346a:	e796      	b.n	800339a <VectorB0+0x1a>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800346c:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003470:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003474:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003476:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003478:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 800347c:	4a19      	ldr	r2, [pc, #100]	@ (80034e4 <VectorB0+0x164>)
 800347e:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003480:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003482:	6889      	ldr	r1, [r1, #8]
 8003484:	6892      	ldr	r2, [r2, #8]
 8003486:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003488:	bf8c      	ite	hi
 800348a:	4a17      	ldrhi	r2, [pc, #92]	@ (80034e8 <VectorB0+0x168>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 800348c:	4a17      	ldrls	r2, [pc, #92]	@ (80034ec <VectorB0+0x16c>)
 800348e:	619a      	str	r2, [r3, #24]
 8003490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  currcore->rfcu.mask |= mask;
 8003494:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8003496:	42ba      	cmp	r2, r7
 8003498:	f043 0302 	orr.w	r3, r3, #2
 800349c:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800349e:	d01a      	beq.n	80034d6 <VectorB0+0x156>
      delta = nowdelta + delay;
 80034a0:	4603      	mov	r3, r0
 80034a2:	e7ba      	b.n	800341a <VectorB0+0x9a>
    if (likely(nowdelta < delay)) {
 80034a4:	4601      	mov	r1, r0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80034a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
    currdelta += (sysinterval_t)1;
 80034aa:	3101      	adds	r1, #1
  return systime + (systime_t)interval;
 80034ac:	1854      	adds	r4, r2, r1
 80034ae:	635c      	str	r4, [r3, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80034b0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80034b2:	1aa2      	subs	r2, r4, r2
    if (likely(nowdelta < delay)) {
 80034b4:	428a      	cmp	r2, r1
 80034b6:	d210      	bcs.n	80034da <VectorB0+0x15a>
  if (currdelta > vtlp->lastdelta) {
 80034b8:	4288      	cmp	r0, r1
 80034ba:	d2d3      	bcs.n	8003464 <VectorB0+0xe4>
 80034bc:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    vtlp->lastdelta = currdelta;
 80034be:	6229      	str	r1, [r5, #32]
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	63eb      	str	r3, [r5, #60]	@ 0x3c
}
 80034c6:	e7cd      	b.n	8003464 <VectorB0+0xe4>
        delay = vtp->reload - nowdelta;
 80034c8:	1a5b      	subs	r3, r3, r1
 80034ca:	eb03 0209 	add.w	r2, r3, r9
        vt_insert_first(vtlp, vtp, now, delay);
 80034ce:	4620      	mov	r0, r4
 80034d0:	f7ff f9a6 	bl	8002820 <vt_insert_first.constprop.0>
        return;
 80034d4:	e7c6      	b.n	8003464 <VectorB0+0xe4>
        delay = (sysinterval_t)0;
 80034d6:	2200      	movs	r2, #0
 80034d8:	e7f9      	b.n	80034ce <VectorB0+0x14e>
 80034da:	4622      	mov	r2, r4
 80034dc:	e7e5      	b.n	80034aa <VectorB0+0x12a>
 80034de:	bf00      	nop
 80034e0:	e000ed00 	.word	0xe000ed00
 80034e4:	240004f8 	.word	0x240004f8
 80034e8:	080003e3 	.word	0x080003e3
 80034ec:	080003e6 	.word	0x080003e6

080034f0 <Vector118>:
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {
  uint32_t sr;

  sr  = gptp->tim->SR;
 80034f0:	481f      	ldr	r0, [pc, #124]	@ (8003570 <Vector118+0x80>)
 80034f2:	68c2      	ldr	r2, [r0, #12]
/**
 * @brief   TIM6 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM6_HANDLER) {
 80034f4:	b508      	push	{r3, lr}
 80034f6:	6913      	ldr	r3, [r2, #16]
  sr &= gptp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80034f8:	68d1      	ldr	r1, [r2, #12]
 80034fa:	400b      	ands	r3, r1
 80034fc:	b2d9      	uxtb	r1, r3
  gptp->tim->SR = ~sr;
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 80034fe:	07db      	lsls	r3, r3, #31
  gptp->tim->SR = ~sr;
 8003500:	ea6f 0101 	mvn.w	r1, r1
 8003504:	6111      	str	r1, [r2, #16]
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8003506:	d507      	bpl.n	8003518 <Vector118+0x28>
    _gpt_isr_invoke_cb(gptp);
 8003508:	7803      	ldrb	r3, [r0, #0]
 800350a:	2b04      	cmp	r3, #4
 800350c:	d022      	beq.n	8003554 <Vector118+0x64>
 800350e:	6843      	ldr	r3, [r0, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	b10b      	cbz	r3, 8003518 <Vector118+0x28>
 8003514:	4816      	ldr	r0, [pc, #88]	@ (8003570 <Vector118+0x80>)
 8003516:	4798      	blx	r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003518:	2330      	movs	r3, #48	@ 0x30
 800351a:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800351e:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <Vector118+0x84>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003526:	d102      	bne.n	800352e <Vector118+0x3e>
 8003528:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 800352c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800352e:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003532:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003536:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003538:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800353a:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 800353e:	4a0e      	ldr	r2, [pc, #56]	@ (8003578 <Vector118+0x88>)
 8003540:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003542:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003544:	6889      	ldr	r1, [r1, #8]
 8003546:	6892      	ldr	r2, [r2, #8]
 8003548:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800354a:	bf8c      	ite	hi
 800354c:	4a0b      	ldrhi	r2, [pc, #44]	@ (800357c <Vector118+0x8c>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 800354e:	4a0c      	ldrls	r2, [pc, #48]	@ (8003580 <Vector118+0x90>)
 8003550:	619a      	str	r2, [r3, #24]
 8003552:	bd08      	pop	{r3, pc}
  gptp->tim->CR1 = 0U;                          /* Initially stopped.       */
 8003554:	2300      	movs	r3, #0
    _gpt_isr_invoke_cb(gptp);
 8003556:	2102      	movs	r1, #2
 8003558:	7001      	strb	r1, [r0, #0]
  gptp->tim->CR1 = 0U;                          /* Initially stopped.       */
 800355a:	6013      	str	r3, [r2, #0]
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
 800355c:	6113      	str	r3, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 800355e:	68d3      	ldr	r3, [r2, #12]
 8003560:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003564:	60d3      	str	r3, [r2, #12]
    _gpt_isr_invoke_cb(gptp);
 8003566:	6843      	ldr	r3, [r0, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1d2      	bne.n	8003514 <Vector118+0x24>
 800356e:	e7d3      	b.n	8003518 <Vector118+0x28>
 8003570:	24000428 	.word	0x24000428
 8003574:	e000ed00 	.word	0xe000ed00
 8003578:	240004f8 	.word	0x240004f8
 800357c:	080003e3 	.word	0x080003e3
 8003580:	080003e6 	.word	0x080003e6
	...

08003590 <Vector244>:
/**
 * @brief   BDMA1 stream 0 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_BDMA1_CH0_HANDLER) {
 8003590:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (BDMA->ISR >> 0U) & STM32_BDMA_ISR_MASK;
 8003592:	4b14      	ldr	r3, [pc, #80]	@ (80035e4 <Vector244+0x54>)
  BDMA->IFCR = flags << 0U;
  if (bdma.streams[0].func)
 8003594:	4814      	ldr	r0, [pc, #80]	@ (80035e8 <Vector244+0x58>)
  flags = (BDMA->ISR >> 0U) & STM32_BDMA_ISR_MASK;
 8003596:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[0].func)
 8003598:	6842      	ldr	r2, [r0, #4]
  flags = (BDMA->ISR >> 0U) & STM32_BDMA_ISR_MASK;
 800359a:	f001 010e 	and.w	r1, r1, #14
  BDMA->IFCR = flags << 0U;
 800359e:	6059      	str	r1, [r3, #4]
  if (bdma.streams[0].func)
 80035a0:	b10a      	cbz	r2, 80035a6 <Vector244+0x16>
    bdma.streams[0].func(bdma.streams[0].param, flags);
 80035a2:	6880      	ldr	r0, [r0, #8]
 80035a4:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80035a6:	2330      	movs	r3, #48	@ 0x30
 80035a8:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80035ac:	4b0f      	ldr	r3, [pc, #60]	@ (80035ec <Vector244+0x5c>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 80035b4:	d102      	bne.n	80035bc <Vector244+0x2c>
 80035b6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80035ba:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80035bc:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80035c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 80035c4:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80035c6:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80035c8:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80035cc:	4a08      	ldr	r2, [pc, #32]	@ (80035f0 <Vector244+0x60>)
 80035ce:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80035d0:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80035d2:	6889      	ldr	r1, [r1, #8]
 80035d4:	6892      	ldr	r2, [r2, #8]
 80035d6:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80035d8:	bf8c      	ite	hi
 80035da:	4a06      	ldrhi	r2, [pc, #24]	@ (80035f4 <Vector244+0x64>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80035dc:	4a06      	ldrls	r2, [pc, #24]	@ (80035f8 <Vector244+0x68>)
 80035de:	619a      	str	r2, [r3, #24]
 80035e0:	bd08      	pop	{r3, pc}
 80035e2:	bf00      	nop
 80035e4:	58025400 	.word	0x58025400
 80035e8:	240003e4 	.word	0x240003e4
 80035ec:	e000ed00 	.word	0xe000ed00
 80035f0:	240004f8 	.word	0x240004f8
 80035f4:	080003e3 	.word	0x080003e3
 80035f8:	080003e6 	.word	0x080003e6
 80035fc:	00000000 	.word	0x00000000

08003600 <Vector248>:
OSAL_IRQ_HANDLER(STM32_BDMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (BDMA->ISR >> 4U) & STM32_BDMA_ISR_MASK;
 8003600:	4b15      	ldr	r3, [pc, #84]	@ (8003658 <Vector248+0x58>)
  BDMA->IFCR = flags << 4U;
  if (bdma.streams[1].func)
 8003602:	4816      	ldr	r0, [pc, #88]	@ (800365c <Vector248+0x5c>)
  flags = (BDMA->ISR >> 4U) & STM32_BDMA_ISR_MASK;
 8003604:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[1].func)
 8003606:	68c2      	ldr	r2, [r0, #12]
  flags = (BDMA->ISR >> 4U) & STM32_BDMA_ISR_MASK;
 8003608:	0909      	lsrs	r1, r1, #4
 800360a:	f001 010e 	and.w	r1, r1, #14
OSAL_IRQ_HANDLER(STM32_BDMA1_CH1_HANDLER) {
 800360e:	b510      	push	{r4, lr}
  BDMA->IFCR = flags << 4U;
 8003610:	010c      	lsls	r4, r1, #4
 8003612:	605c      	str	r4, [r3, #4]
  if (bdma.streams[1].func)
 8003614:	b10a      	cbz	r2, 800361a <Vector248+0x1a>
    bdma.streams[1].func(bdma.streams[1].param, flags);
 8003616:	6900      	ldr	r0, [r0, #16]
 8003618:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800361a:	2330      	movs	r3, #48	@ 0x30
 800361c:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003620:	4b0f      	ldr	r3, [pc, #60]	@ (8003660 <Vector248+0x60>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003628:	d102      	bne.n	8003630 <Vector248+0x30>
 800362a:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800362e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003630:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003634:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003638:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800363a:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800363c:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003640:	4a08      	ldr	r2, [pc, #32]	@ (8003664 <Vector248+0x64>)
 8003642:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003644:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003646:	6889      	ldr	r1, [r1, #8]
 8003648:	6892      	ldr	r2, [r2, #8]
 800364a:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800364c:	bf8c      	ite	hi
 800364e:	4a06      	ldrhi	r2, [pc, #24]	@ (8003668 <Vector248+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003650:	4a06      	ldrls	r2, [pc, #24]	@ (800366c <Vector248+0x6c>)
 8003652:	619a      	str	r2, [r3, #24]
 8003654:	bd10      	pop	{r4, pc}
 8003656:	bf00      	nop
 8003658:	58025400 	.word	0x58025400
 800365c:	240003e4 	.word	0x240003e4
 8003660:	e000ed00 	.word	0xe000ed00
 8003664:	240004f8 	.word	0x240004f8
 8003668:	080003e3 	.word	0x080003e3
 800366c:	080003e6 	.word	0x080003e6

08003670 <Vector24C>:
OSAL_IRQ_HANDLER(STM32_BDMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (BDMA->ISR >> 8U) & STM32_BDMA_ISR_MASK;
 8003670:	4b15      	ldr	r3, [pc, #84]	@ (80036c8 <Vector24C+0x58>)
  BDMA->IFCR = flags << 8U;
  if (bdma.streams[2].func)
 8003672:	4816      	ldr	r0, [pc, #88]	@ (80036cc <Vector24C+0x5c>)
  flags = (BDMA->ISR >> 8U) & STM32_BDMA_ISR_MASK;
 8003674:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[2].func)
 8003676:	6942      	ldr	r2, [r0, #20]
  flags = (BDMA->ISR >> 8U) & STM32_BDMA_ISR_MASK;
 8003678:	0a09      	lsrs	r1, r1, #8
 800367a:	f001 010e 	and.w	r1, r1, #14
OSAL_IRQ_HANDLER(STM32_BDMA1_CH2_HANDLER) {
 800367e:	b510      	push	{r4, lr}
  BDMA->IFCR = flags << 8U;
 8003680:	020c      	lsls	r4, r1, #8
 8003682:	605c      	str	r4, [r3, #4]
  if (bdma.streams[2].func)
 8003684:	b10a      	cbz	r2, 800368a <Vector24C+0x1a>
    bdma.streams[2].func(bdma.streams[2].param, flags);
 8003686:	6980      	ldr	r0, [r0, #24]
 8003688:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800368a:	2330      	movs	r3, #48	@ 0x30
 800368c:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003690:	4b0f      	ldr	r3, [pc, #60]	@ (80036d0 <Vector24C+0x60>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003698:	d102      	bne.n	80036a0 <Vector24C+0x30>
 800369a:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800369e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80036a0:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80036a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 80036a8:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80036aa:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80036ac:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80036b0:	4a08      	ldr	r2, [pc, #32]	@ (80036d4 <Vector24C+0x64>)
 80036b2:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80036b4:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80036b6:	6889      	ldr	r1, [r1, #8]
 80036b8:	6892      	ldr	r2, [r2, #8]
 80036ba:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80036bc:	bf8c      	ite	hi
 80036be:	4a06      	ldrhi	r2, [pc, #24]	@ (80036d8 <Vector24C+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80036c0:	4a06      	ldrls	r2, [pc, #24]	@ (80036dc <Vector24C+0x6c>)
 80036c2:	619a      	str	r2, [r3, #24]
 80036c4:	bd10      	pop	{r4, pc}
 80036c6:	bf00      	nop
 80036c8:	58025400 	.word	0x58025400
 80036cc:	240003e4 	.word	0x240003e4
 80036d0:	e000ed00 	.word	0xe000ed00
 80036d4:	240004f8 	.word	0x240004f8
 80036d8:	080003e3 	.word	0x080003e3
 80036dc:	080003e6 	.word	0x080003e6

080036e0 <Vector250>:
OSAL_IRQ_HANDLER(STM32_BDMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (BDMA->ISR >> 12U) & STM32_BDMA_ISR_MASK;
 80036e0:	4b15      	ldr	r3, [pc, #84]	@ (8003738 <Vector250+0x58>)
  BDMA->IFCR = flags << 12U;
  if (bdma.streams[3].func)
 80036e2:	4816      	ldr	r0, [pc, #88]	@ (800373c <Vector250+0x5c>)
  flags = (BDMA->ISR >> 12U) & STM32_BDMA_ISR_MASK;
 80036e4:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[3].func)
 80036e6:	69c2      	ldr	r2, [r0, #28]
  flags = (BDMA->ISR >> 12U) & STM32_BDMA_ISR_MASK;
 80036e8:	0b09      	lsrs	r1, r1, #12
 80036ea:	f001 010e 	and.w	r1, r1, #14
OSAL_IRQ_HANDLER(STM32_BDMA1_CH3_HANDLER) {
 80036ee:	b510      	push	{r4, lr}
  BDMA->IFCR = flags << 12U;
 80036f0:	030c      	lsls	r4, r1, #12
 80036f2:	605c      	str	r4, [r3, #4]
  if (bdma.streams[3].func)
 80036f4:	b10a      	cbz	r2, 80036fa <Vector250+0x1a>
    bdma.streams[3].func(bdma.streams[3].param, flags);
 80036f6:	6a00      	ldr	r0, [r0, #32]
 80036f8:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80036fa:	2330      	movs	r3, #48	@ 0x30
 80036fc:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003700:	4b0f      	ldr	r3, [pc, #60]	@ (8003740 <Vector250+0x60>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003708:	d102      	bne.n	8003710 <Vector250+0x30>
 800370a:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800370e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003710:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003714:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003718:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800371a:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800371c:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003720:	4a08      	ldr	r2, [pc, #32]	@ (8003744 <Vector250+0x64>)
 8003722:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003724:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003726:	6889      	ldr	r1, [r1, #8]
 8003728:	6892      	ldr	r2, [r2, #8]
 800372a:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800372c:	bf8c      	ite	hi
 800372e:	4a06      	ldrhi	r2, [pc, #24]	@ (8003748 <Vector250+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003730:	4a06      	ldrls	r2, [pc, #24]	@ (800374c <Vector250+0x6c>)
 8003732:	619a      	str	r2, [r3, #24]
 8003734:	bd10      	pop	{r4, pc}
 8003736:	bf00      	nop
 8003738:	58025400 	.word	0x58025400
 800373c:	240003e4 	.word	0x240003e4
 8003740:	e000ed00 	.word	0xe000ed00
 8003744:	240004f8 	.word	0x240004f8
 8003748:	080003e3 	.word	0x080003e3
 800374c:	080003e6 	.word	0x080003e6

08003750 <Vector254>:
OSAL_IRQ_HANDLER(STM32_BDMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (BDMA->ISR >> 16U) & STM32_BDMA_ISR_MASK;
 8003750:	4b15      	ldr	r3, [pc, #84]	@ (80037a8 <Vector254+0x58>)
  BDMA->IFCR = flags << 16U;
  if (bdma.streams[4].func)
 8003752:	4816      	ldr	r0, [pc, #88]	@ (80037ac <Vector254+0x5c>)
  flags = (BDMA->ISR >> 16U) & STM32_BDMA_ISR_MASK;
 8003754:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[4].func)
 8003756:	6a42      	ldr	r2, [r0, #36]	@ 0x24
  flags = (BDMA->ISR >> 16U) & STM32_BDMA_ISR_MASK;
 8003758:	0c09      	lsrs	r1, r1, #16
 800375a:	f001 010e 	and.w	r1, r1, #14
OSAL_IRQ_HANDLER(STM32_BDMA1_CH4_HANDLER) {
 800375e:	b510      	push	{r4, lr}
  BDMA->IFCR = flags << 16U;
 8003760:	040c      	lsls	r4, r1, #16
 8003762:	605c      	str	r4, [r3, #4]
  if (bdma.streams[4].func)
 8003764:	b10a      	cbz	r2, 800376a <Vector254+0x1a>
    bdma.streams[4].func(bdma.streams[4].param, flags);
 8003766:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003768:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800376a:	2330      	movs	r3, #48	@ 0x30
 800376c:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003770:	4b0f      	ldr	r3, [pc, #60]	@ (80037b0 <Vector254+0x60>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003778:	d102      	bne.n	8003780 <Vector254+0x30>
 800377a:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800377e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003780:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003784:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003788:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800378a:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800378c:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003790:	4a08      	ldr	r2, [pc, #32]	@ (80037b4 <Vector254+0x64>)
 8003792:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003794:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003796:	6889      	ldr	r1, [r1, #8]
 8003798:	6892      	ldr	r2, [r2, #8]
 800379a:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800379c:	bf8c      	ite	hi
 800379e:	4a06      	ldrhi	r2, [pc, #24]	@ (80037b8 <Vector254+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80037a0:	4a06      	ldrls	r2, [pc, #24]	@ (80037bc <Vector254+0x6c>)
 80037a2:	619a      	str	r2, [r3, #24]
 80037a4:	bd10      	pop	{r4, pc}
 80037a6:	bf00      	nop
 80037a8:	58025400 	.word	0x58025400
 80037ac:	240003e4 	.word	0x240003e4
 80037b0:	e000ed00 	.word	0xe000ed00
 80037b4:	240004f8 	.word	0x240004f8
 80037b8:	080003e3 	.word	0x080003e3
 80037bc:	080003e6 	.word	0x080003e6

080037c0 <Vector258>:
OSAL_IRQ_HANDLER(STM32_BDMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (BDMA->ISR >> 20U) & STM32_BDMA_ISR_MASK;
 80037c0:	4b15      	ldr	r3, [pc, #84]	@ (8003818 <Vector258+0x58>)
  BDMA->IFCR = flags << 20U;
  if (bdma.streams[5].func)
 80037c2:	4816      	ldr	r0, [pc, #88]	@ (800381c <Vector258+0x5c>)
  flags = (BDMA->ISR >> 20U) & STM32_BDMA_ISR_MASK;
 80037c4:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[5].func)
 80037c6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  flags = (BDMA->ISR >> 20U) & STM32_BDMA_ISR_MASK;
 80037c8:	0d09      	lsrs	r1, r1, #20
 80037ca:	f001 010e 	and.w	r1, r1, #14
OSAL_IRQ_HANDLER(STM32_BDMA1_CH5_HANDLER) {
 80037ce:	b510      	push	{r4, lr}
  BDMA->IFCR = flags << 20U;
 80037d0:	050c      	lsls	r4, r1, #20
 80037d2:	605c      	str	r4, [r3, #4]
  if (bdma.streams[5].func)
 80037d4:	b10a      	cbz	r2, 80037da <Vector258+0x1a>
    bdma.streams[5].func(bdma.streams[5].param, flags);
 80037d6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80037d8:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80037da:	2330      	movs	r3, #48	@ 0x30
 80037dc:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80037e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003820 <Vector258+0x60>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 80037e8:	d102      	bne.n	80037f0 <Vector258+0x30>
 80037ea:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80037ee:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80037f0:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80037f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 80037f8:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80037fa:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80037fc:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003800:	4a08      	ldr	r2, [pc, #32]	@ (8003824 <Vector258+0x64>)
 8003802:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003804:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003806:	6889      	ldr	r1, [r1, #8]
 8003808:	6892      	ldr	r2, [r2, #8]
 800380a:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800380c:	bf8c      	ite	hi
 800380e:	4a06      	ldrhi	r2, [pc, #24]	@ (8003828 <Vector258+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003810:	4a06      	ldrls	r2, [pc, #24]	@ (800382c <Vector258+0x6c>)
 8003812:	619a      	str	r2, [r3, #24]
 8003814:	bd10      	pop	{r4, pc}
 8003816:	bf00      	nop
 8003818:	58025400 	.word	0x58025400
 800381c:	240003e4 	.word	0x240003e4
 8003820:	e000ed00 	.word	0xe000ed00
 8003824:	240004f8 	.word	0x240004f8
 8003828:	080003e3 	.word	0x080003e3
 800382c:	080003e6 	.word	0x080003e6

08003830 <Vector25C>:
OSAL_IRQ_HANDLER(STM32_BDMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (BDMA->ISR >> 24U) & STM32_BDMA_ISR_MASK;
 8003830:	4b15      	ldr	r3, [pc, #84]	@ (8003888 <Vector25C+0x58>)
  BDMA->IFCR = flags << 24U;
  if (bdma.streams[6].func)
 8003832:	4816      	ldr	r0, [pc, #88]	@ (800388c <Vector25C+0x5c>)
  flags = (BDMA->ISR >> 24U) & STM32_BDMA_ISR_MASK;
 8003834:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[6].func)
 8003836:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  flags = (BDMA->ISR >> 24U) & STM32_BDMA_ISR_MASK;
 8003838:	0e09      	lsrs	r1, r1, #24
 800383a:	f001 010e 	and.w	r1, r1, #14
OSAL_IRQ_HANDLER(STM32_BDMA1_CH6_HANDLER) {
 800383e:	b510      	push	{r4, lr}
  BDMA->IFCR = flags << 24U;
 8003840:	060c      	lsls	r4, r1, #24
 8003842:	605c      	str	r4, [r3, #4]
  if (bdma.streams[6].func)
 8003844:	b10a      	cbz	r2, 800384a <Vector25C+0x1a>
    bdma.streams[6].func(bdma.streams[6].param, flags);
 8003846:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8003848:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800384a:	2330      	movs	r3, #48	@ 0x30
 800384c:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003850:	4b0f      	ldr	r3, [pc, #60]	@ (8003890 <Vector25C+0x60>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003858:	d102      	bne.n	8003860 <Vector25C+0x30>
 800385a:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800385e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003860:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003864:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003868:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800386a:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800386c:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003870:	4a08      	ldr	r2, [pc, #32]	@ (8003894 <Vector25C+0x64>)
 8003872:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003874:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003876:	6889      	ldr	r1, [r1, #8]
 8003878:	6892      	ldr	r2, [r2, #8]
 800387a:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800387c:	bf8c      	ite	hi
 800387e:	4a06      	ldrhi	r2, [pc, #24]	@ (8003898 <Vector25C+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003880:	4a06      	ldrls	r2, [pc, #24]	@ (800389c <Vector25C+0x6c>)
 8003882:	619a      	str	r2, [r3, #24]
 8003884:	bd10      	pop	{r4, pc}
 8003886:	bf00      	nop
 8003888:	58025400 	.word	0x58025400
 800388c:	240003e4 	.word	0x240003e4
 8003890:	e000ed00 	.word	0xe000ed00
 8003894:	240004f8 	.word	0x240004f8
 8003898:	080003e3 	.word	0x080003e3
 800389c:	080003e6 	.word	0x080003e6

080038a0 <Vector260>:
OSAL_IRQ_HANDLER(STM32_BDMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (BDMA->ISR >> 28U) & STM32_BDMA_ISR_MASK;
 80038a0:	4b15      	ldr	r3, [pc, #84]	@ (80038f8 <Vector260+0x58>)
  BDMA->IFCR = flags << 28U;
  if (bdma.streams[7].func)
 80038a2:	4816      	ldr	r0, [pc, #88]	@ (80038fc <Vector260+0x5c>)
  flags = (BDMA->ISR >> 28U) & STM32_BDMA_ISR_MASK;
 80038a4:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[7].func)
 80038a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  flags = (BDMA->ISR >> 28U) & STM32_BDMA_ISR_MASK;
 80038a8:	0f09      	lsrs	r1, r1, #28
 80038aa:	f001 010e 	and.w	r1, r1, #14
OSAL_IRQ_HANDLER(STM32_BDMA1_CH7_HANDLER) {
 80038ae:	b510      	push	{r4, lr}
  BDMA->IFCR = flags << 28U;
 80038b0:	070c      	lsls	r4, r1, #28
 80038b2:	605c      	str	r4, [r3, #4]
  if (bdma.streams[7].func)
 80038b4:	b10a      	cbz	r2, 80038ba <Vector260+0x1a>
    bdma.streams[7].func(bdma.streams[7].param, flags);
 80038b6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80038b8:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80038ba:	2330      	movs	r3, #48	@ 0x30
 80038bc:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80038c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003900 <Vector260+0x60>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 80038c8:	d102      	bne.n	80038d0 <Vector260+0x30>
 80038ca:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80038ce:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80038d0:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80038d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 80038d8:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80038da:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80038dc:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80038e0:	4a08      	ldr	r2, [pc, #32]	@ (8003904 <Vector260+0x64>)
 80038e2:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80038e4:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80038e6:	6889      	ldr	r1, [r1, #8]
 80038e8:	6892      	ldr	r2, [r2, #8]
 80038ea:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80038ec:	bf8c      	ite	hi
 80038ee:	4a06      	ldrhi	r2, [pc, #24]	@ (8003908 <Vector260+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80038f0:	4a06      	ldrls	r2, [pc, #24]	@ (800390c <Vector260+0x6c>)
 80038f2:	619a      	str	r2, [r3, #24]
 80038f4:	bd10      	pop	{r4, pc}
 80038f6:	bf00      	nop
 80038f8:	58025400 	.word	0x58025400
 80038fc:	240003e4 	.word	0x240003e4
 8003900:	e000ed00 	.word	0xe000ed00
 8003904:	240004f8 	.word	0x240004f8
 8003908:	080003e3 	.word	0x080003e3
 800390c:	080003e6 	.word	0x080003e6

08003910 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8003910:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003912:	4b14      	ldr	r3, [pc, #80]	@ (8003964 <Vector6C+0x54>)
  DMA1->LIFCR = flags << 0U;
  if (dma.streams[0].func)
 8003914:	4814      	ldr	r0, [pc, #80]	@ (8003968 <Vector6C+0x58>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003916:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8003918:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800391a:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
  DMA1->LIFCR = flags << 0U;
 800391e:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8003920:	b10a      	cbz	r2, 8003926 <Vector6C+0x16>
    dma.streams[0].func(dma.streams[0].param, flags);
 8003922:	6880      	ldr	r0, [r0, #8]
 8003924:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003926:	2330      	movs	r3, #48	@ 0x30
 8003928:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800392c:	4b0f      	ldr	r3, [pc, #60]	@ (800396c <Vector6C+0x5c>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003934:	d102      	bne.n	800393c <Vector6C+0x2c>
 8003936:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800393a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800393c:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003940:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003944:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003946:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003948:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 800394c:	4a08      	ldr	r2, [pc, #32]	@ (8003970 <Vector6C+0x60>)
 800394e:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003950:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003952:	6889      	ldr	r1, [r1, #8]
 8003954:	6892      	ldr	r2, [r2, #8]
 8003956:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003958:	bf8c      	ite	hi
 800395a:	4a06      	ldrhi	r2, [pc, #24]	@ (8003974 <Vector6C+0x64>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 800395c:	4a06      	ldrls	r2, [pc, #24]	@ (8003978 <Vector6C+0x68>)
 800395e:	619a      	str	r2, [r3, #24]
 8003960:	bd08      	pop	{r3, pc}
 8003962:	bf00      	nop
 8003964:	40020000 	.word	0x40020000
 8003968:	24000360 	.word	0x24000360
 800396c:	e000ed00 	.word	0xe000ed00
 8003970:	240004f8 	.word	0x240004f8
 8003974:	080003e3 	.word	0x080003e3
 8003978:	080003e6 	.word	0x080003e6
 800397c:	00000000 	.word	0x00000000

08003980 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003980:	4b15      	ldr	r3, [pc, #84]	@ (80039d8 <Vector70+0x58>)
  DMA1->LIFCR = flags << 6U;
  if (dma.streams[1].func)
 8003982:	4816      	ldr	r0, [pc, #88]	@ (80039dc <Vector70+0x5c>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003984:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 8003986:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003988:	0989      	lsrs	r1, r1, #6
 800398a:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 800398e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 8003990:	018c      	lsls	r4, r1, #6
 8003992:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 8003994:	b10a      	cbz	r2, 800399a <Vector70+0x1a>
    dma.streams[1].func(dma.streams[1].param, flags);
 8003996:	6900      	ldr	r0, [r0, #16]
 8003998:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800399a:	2330      	movs	r3, #48	@ 0x30
 800399c:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80039a0:	4b0f      	ldr	r3, [pc, #60]	@ (80039e0 <Vector70+0x60>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 80039a8:	d102      	bne.n	80039b0 <Vector70+0x30>
 80039aa:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80039ae:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80039b0:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80039b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 80039b8:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80039ba:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80039bc:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80039c0:	4a08      	ldr	r2, [pc, #32]	@ (80039e4 <Vector70+0x64>)
 80039c2:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80039c4:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80039c6:	6889      	ldr	r1, [r1, #8]
 80039c8:	6892      	ldr	r2, [r2, #8]
 80039ca:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80039cc:	bf8c      	ite	hi
 80039ce:	4a06      	ldrhi	r2, [pc, #24]	@ (80039e8 <Vector70+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80039d0:	4a06      	ldrls	r2, [pc, #24]	@ (80039ec <Vector70+0x6c>)
 80039d2:	619a      	str	r2, [r3, #24]
 80039d4:	bd10      	pop	{r4, pc}
 80039d6:	bf00      	nop
 80039d8:	40020000 	.word	0x40020000
 80039dc:	24000360 	.word	0x24000360
 80039e0:	e000ed00 	.word	0xe000ed00
 80039e4:	240004f8 	.word	0x240004f8
 80039e8:	080003e3 	.word	0x080003e3
 80039ec:	080003e6 	.word	0x080003e6

080039f0 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80039f0:	4b15      	ldr	r3, [pc, #84]	@ (8003a48 <Vector74+0x58>)
  DMA1->LIFCR = flags << 16U;
  if (dma.streams[2].func)
 80039f2:	4816      	ldr	r0, [pc, #88]	@ (8003a4c <Vector74+0x5c>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80039f4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 80039f6:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80039f8:	0c09      	lsrs	r1, r1, #16
 80039fa:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80039fe:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 8003a00:	040c      	lsls	r4, r1, #16
 8003a02:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 8003a04:	b10a      	cbz	r2, 8003a0a <Vector74+0x1a>
    dma.streams[2].func(dma.streams[2].param, flags);
 8003a06:	6980      	ldr	r0, [r0, #24]
 8003a08:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003a0a:	2330      	movs	r3, #48	@ 0x30
 8003a0c:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003a10:	4b0f      	ldr	r3, [pc, #60]	@ (8003a50 <Vector74+0x60>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003a18:	d102      	bne.n	8003a20 <Vector74+0x30>
 8003a1a:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003a1e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003a20:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003a24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003a28:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003a2a:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003a2c:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003a30:	4a08      	ldr	r2, [pc, #32]	@ (8003a54 <Vector74+0x64>)
 8003a32:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003a34:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003a36:	6889      	ldr	r1, [r1, #8]
 8003a38:	6892      	ldr	r2, [r2, #8]
 8003a3a:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003a3c:	bf8c      	ite	hi
 8003a3e:	4a06      	ldrhi	r2, [pc, #24]	@ (8003a58 <Vector74+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003a40:	4a06      	ldrls	r2, [pc, #24]	@ (8003a5c <Vector74+0x6c>)
 8003a42:	619a      	str	r2, [r3, #24]
 8003a44:	bd10      	pop	{r4, pc}
 8003a46:	bf00      	nop
 8003a48:	40020000 	.word	0x40020000
 8003a4c:	24000360 	.word	0x24000360
 8003a50:	e000ed00 	.word	0xe000ed00
 8003a54:	240004f8 	.word	0x240004f8
 8003a58:	080003e3 	.word	0x080003e3
 8003a5c:	080003e6 	.word	0x080003e6

08003a60 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003a60:	4b15      	ldr	r3, [pc, #84]	@ (8003ab8 <Vector78+0x58>)
  DMA1->LIFCR = flags << 22U;
  if (dma.streams[3].func)
 8003a62:	4816      	ldr	r0, [pc, #88]	@ (8003abc <Vector78+0x5c>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003a64:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 8003a66:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003a68:	0d89      	lsrs	r1, r1, #22
 8003a6a:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8003a6e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 8003a70:	058c      	lsls	r4, r1, #22
 8003a72:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 8003a74:	b10a      	cbz	r2, 8003a7a <Vector78+0x1a>
    dma.streams[3].func(dma.streams[3].param, flags);
 8003a76:	6a00      	ldr	r0, [r0, #32]
 8003a78:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003a7a:	2330      	movs	r3, #48	@ 0x30
 8003a7c:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003a80:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <Vector78+0x60>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003a88:	d102      	bne.n	8003a90 <Vector78+0x30>
 8003a8a:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003a8e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003a90:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003a94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003a98:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003a9a:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003a9c:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003aa0:	4a08      	ldr	r2, [pc, #32]	@ (8003ac4 <Vector78+0x64>)
 8003aa2:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003aa4:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003aa6:	6889      	ldr	r1, [r1, #8]
 8003aa8:	6892      	ldr	r2, [r2, #8]
 8003aaa:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003aac:	bf8c      	ite	hi
 8003aae:	4a06      	ldrhi	r2, [pc, #24]	@ (8003ac8 <Vector78+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003ab0:	4a06      	ldrls	r2, [pc, #24]	@ (8003acc <Vector78+0x6c>)
 8003ab2:	619a      	str	r2, [r3, #24]
 8003ab4:	bd10      	pop	{r4, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40020000 	.word	0x40020000
 8003abc:	24000360 	.word	0x24000360
 8003ac0:	e000ed00 	.word	0xe000ed00
 8003ac4:	240004f8 	.word	0x240004f8
 8003ac8:	080003e3 	.word	0x080003e3
 8003acc:	080003e6 	.word	0x080003e6

08003ad0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8003ad0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003ad2:	4b14      	ldr	r3, [pc, #80]	@ (8003b24 <Vector7C+0x54>)
  DMA1->HIFCR = flags << 0U;
  if (dma.streams[4].func)
 8003ad4:	4814      	ldr	r0, [pc, #80]	@ (8003b28 <Vector7C+0x58>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003ad6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 8003ad8:	6a42      	ldr	r2, [r0, #36]	@ 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003ada:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
  DMA1->HIFCR = flags << 0U;
 8003ade:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8003ae0:	b10a      	cbz	r2, 8003ae6 <Vector7C+0x16>
    dma.streams[4].func(dma.streams[4].param, flags);
 8003ae2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003ae4:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003ae6:	2330      	movs	r3, #48	@ 0x30
 8003ae8:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003aec:	4b0f      	ldr	r3, [pc, #60]	@ (8003b2c <Vector7C+0x5c>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003af4:	d102      	bne.n	8003afc <Vector7C+0x2c>
 8003af6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003afa:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003afc:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003b00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003b04:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003b06:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003b08:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003b0c:	4a08      	ldr	r2, [pc, #32]	@ (8003b30 <Vector7C+0x60>)
 8003b0e:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003b10:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003b12:	6889      	ldr	r1, [r1, #8]
 8003b14:	6892      	ldr	r2, [r2, #8]
 8003b16:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003b18:	bf8c      	ite	hi
 8003b1a:	4a06      	ldrhi	r2, [pc, #24]	@ (8003b34 <Vector7C+0x64>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003b1c:	4a06      	ldrls	r2, [pc, #24]	@ (8003b38 <Vector7C+0x68>)
 8003b1e:	619a      	str	r2, [r3, #24]
 8003b20:	bd08      	pop	{r3, pc}
 8003b22:	bf00      	nop
 8003b24:	40020000 	.word	0x40020000
 8003b28:	24000360 	.word	0x24000360
 8003b2c:	e000ed00 	.word	0xe000ed00
 8003b30:	240004f8 	.word	0x240004f8
 8003b34:	080003e3 	.word	0x080003e3
 8003b38:	080003e6 	.word	0x080003e6
 8003b3c:	00000000 	.word	0x00000000

08003b40 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003b40:	4b15      	ldr	r3, [pc, #84]	@ (8003b98 <Vector80+0x58>)
  DMA1->HIFCR = flags << 6U;
  if (dma.streams[5].func)
 8003b42:	4816      	ldr	r0, [pc, #88]	@ (8003b9c <Vector80+0x5c>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003b44:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 8003b46:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003b48:	0989      	lsrs	r1, r1, #6
 8003b4a:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8003b4e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8003b50:	018c      	lsls	r4, r1, #6
 8003b52:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 8003b54:	b10a      	cbz	r2, 8003b5a <Vector80+0x1a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8003b56:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003b58:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003b5a:	2330      	movs	r3, #48	@ 0x30
 8003b5c:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003b60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba0 <Vector80+0x60>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003b68:	d102      	bne.n	8003b70 <Vector80+0x30>
 8003b6a:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003b6e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003b70:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003b74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003b78:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003b7a:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003b7c:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003b80:	4a08      	ldr	r2, [pc, #32]	@ (8003ba4 <Vector80+0x64>)
 8003b82:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003b84:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003b86:	6889      	ldr	r1, [r1, #8]
 8003b88:	6892      	ldr	r2, [r2, #8]
 8003b8a:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003b8c:	bf8c      	ite	hi
 8003b8e:	4a06      	ldrhi	r2, [pc, #24]	@ (8003ba8 <Vector80+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003b90:	4a06      	ldrls	r2, [pc, #24]	@ (8003bac <Vector80+0x6c>)
 8003b92:	619a      	str	r2, [r3, #24]
 8003b94:	bd10      	pop	{r4, pc}
 8003b96:	bf00      	nop
 8003b98:	40020000 	.word	0x40020000
 8003b9c:	24000360 	.word	0x24000360
 8003ba0:	e000ed00 	.word	0xe000ed00
 8003ba4:	240004f8 	.word	0x240004f8
 8003ba8:	080003e3 	.word	0x080003e3
 8003bac:	080003e6 	.word	0x080003e6

08003bb0 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003bb0:	4b15      	ldr	r3, [pc, #84]	@ (8003c08 <Vector84+0x58>)
  DMA1->HIFCR = flags << 16U;
  if (dma.streams[6].func)
 8003bb2:	4816      	ldr	r0, [pc, #88]	@ (8003c0c <Vector84+0x5c>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003bb4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 8003bb6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003bb8:	0c09      	lsrs	r1, r1, #16
 8003bba:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8003bbe:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 8003bc0:	040c      	lsls	r4, r1, #16
 8003bc2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 8003bc4:	b10a      	cbz	r2, 8003bca <Vector84+0x1a>
    dma.streams[6].func(dma.streams[6].param, flags);
 8003bc6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8003bc8:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003bca:	2330      	movs	r3, #48	@ 0x30
 8003bcc:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <Vector84+0x60>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003bd8:	d102      	bne.n	8003be0 <Vector84+0x30>
 8003bda:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003bde:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003be0:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003be4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003be8:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003bea:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003bec:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003bf0:	4a08      	ldr	r2, [pc, #32]	@ (8003c14 <Vector84+0x64>)
 8003bf2:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003bf4:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003bf6:	6889      	ldr	r1, [r1, #8]
 8003bf8:	6892      	ldr	r2, [r2, #8]
 8003bfa:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003bfc:	bf8c      	ite	hi
 8003bfe:	4a06      	ldrhi	r2, [pc, #24]	@ (8003c18 <Vector84+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003c00:	4a06      	ldrls	r2, [pc, #24]	@ (8003c1c <Vector84+0x6c>)
 8003c02:	619a      	str	r2, [r3, #24]
 8003c04:	bd10      	pop	{r4, pc}
 8003c06:	bf00      	nop
 8003c08:	40020000 	.word	0x40020000
 8003c0c:	24000360 	.word	0x24000360
 8003c10:	e000ed00 	.word	0xe000ed00
 8003c14:	240004f8 	.word	0x240004f8
 8003c18:	080003e3 	.word	0x080003e3
 8003c1c:	080003e6 	.word	0x080003e6

08003c20 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003c20:	4b15      	ldr	r3, [pc, #84]	@ (8003c78 <VectorFC+0x58>)
  DMA1->HIFCR = flags << 22U;
  if (dma.streams[7].func)
 8003c22:	4816      	ldr	r0, [pc, #88]	@ (8003c7c <VectorFC+0x5c>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003c24:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 8003c26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003c28:	0d89      	lsrs	r1, r1, #22
 8003c2a:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8003c2e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 8003c30:	058c      	lsls	r4, r1, #22
 8003c32:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 8003c34:	b10a      	cbz	r2, 8003c3a <VectorFC+0x1a>
    dma.streams[7].func(dma.streams[7].param, flags);
 8003c36:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8003c38:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003c3a:	2330      	movs	r3, #48	@ 0x30
 8003c3c:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003c40:	4b0f      	ldr	r3, [pc, #60]	@ (8003c80 <VectorFC+0x60>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003c48:	d102      	bne.n	8003c50 <VectorFC+0x30>
 8003c4a:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003c4e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003c50:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003c54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003c58:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003c5a:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003c5c:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003c60:	4a08      	ldr	r2, [pc, #32]	@ (8003c84 <VectorFC+0x64>)
 8003c62:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003c64:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003c66:	6889      	ldr	r1, [r1, #8]
 8003c68:	6892      	ldr	r2, [r2, #8]
 8003c6a:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003c6c:	bf8c      	ite	hi
 8003c6e:	4a06      	ldrhi	r2, [pc, #24]	@ (8003c88 <VectorFC+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003c70:	4a06      	ldrls	r2, [pc, #24]	@ (8003c8c <VectorFC+0x6c>)
 8003c72:	619a      	str	r2, [r3, #24]
 8003c74:	bd10      	pop	{r4, pc}
 8003c76:	bf00      	nop
 8003c78:	40020000 	.word	0x40020000
 8003c7c:	24000360 	.word	0x24000360
 8003c80:	e000ed00 	.word	0xe000ed00
 8003c84:	240004f8 	.word	0x240004f8
 8003c88:	080003e3 	.word	0x080003e3
 8003c8c:	080003e6 	.word	0x080003e6

08003c90 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8003c90:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003c92:	4b14      	ldr	r3, [pc, #80]	@ (8003ce4 <Vector120+0x54>)
  DMA2->LIFCR = flags << 0U;
  if (dma.streams[8].func)
 8003c94:	4814      	ldr	r0, [pc, #80]	@ (8003ce8 <Vector120+0x58>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003c96:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 8003c98:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003c9a:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
  DMA2->LIFCR = flags << 0U;
 8003c9e:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8003ca0:	b10a      	cbz	r2, 8003ca6 <Vector120+0x16>
    dma.streams[8].func(dma.streams[8].param, flags);
 8003ca2:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8003ca4:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003ca6:	2330      	movs	r3, #48	@ 0x30
 8003ca8:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003cac:	4b0f      	ldr	r3, [pc, #60]	@ (8003cec <Vector120+0x5c>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003cb4:	d102      	bne.n	8003cbc <Vector120+0x2c>
 8003cb6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003cba:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003cbc:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003cc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003cc4:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003cc6:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003cc8:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003ccc:	4a08      	ldr	r2, [pc, #32]	@ (8003cf0 <Vector120+0x60>)
 8003cce:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003cd0:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003cd2:	6889      	ldr	r1, [r1, #8]
 8003cd4:	6892      	ldr	r2, [r2, #8]
 8003cd6:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003cd8:	bf8c      	ite	hi
 8003cda:	4a06      	ldrhi	r2, [pc, #24]	@ (8003cf4 <Vector120+0x64>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003cdc:	4a06      	ldrls	r2, [pc, #24]	@ (8003cf8 <Vector120+0x68>)
 8003cde:	619a      	str	r2, [r3, #24]
 8003ce0:	bd08      	pop	{r3, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40020400 	.word	0x40020400
 8003ce8:	24000360 	.word	0x24000360
 8003cec:	e000ed00 	.word	0xe000ed00
 8003cf0:	240004f8 	.word	0x240004f8
 8003cf4:	080003e3 	.word	0x080003e3
 8003cf8:	080003e6 	.word	0x080003e6
 8003cfc:	00000000 	.word	0x00000000

08003d00 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003d00:	4b15      	ldr	r3, [pc, #84]	@ (8003d58 <Vector124+0x58>)
  DMA2->LIFCR = flags << 6U;
  if (dma.streams[9].func)
 8003d02:	4816      	ldr	r0, [pc, #88]	@ (8003d5c <Vector124+0x5c>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003d04:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 8003d06:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003d08:	0989      	lsrs	r1, r1, #6
 8003d0a:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8003d0e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 8003d10:	018c      	lsls	r4, r1, #6
 8003d12:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 8003d14:	b10a      	cbz	r2, 8003d1a <Vector124+0x1a>
    dma.streams[9].func(dma.streams[9].param, flags);
 8003d16:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 8003d18:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003d1a:	2330      	movs	r3, #48	@ 0x30
 8003d1c:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003d20:	4b0f      	ldr	r3, [pc, #60]	@ (8003d60 <Vector124+0x60>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003d28:	d102      	bne.n	8003d30 <Vector124+0x30>
 8003d2a:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003d2e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003d30:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003d34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003d38:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003d3a:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003d3c:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003d40:	4a08      	ldr	r2, [pc, #32]	@ (8003d64 <Vector124+0x64>)
 8003d42:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003d44:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003d46:	6889      	ldr	r1, [r1, #8]
 8003d48:	6892      	ldr	r2, [r2, #8]
 8003d4a:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003d4c:	bf8c      	ite	hi
 8003d4e:	4a06      	ldrhi	r2, [pc, #24]	@ (8003d68 <Vector124+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003d50:	4a06      	ldrls	r2, [pc, #24]	@ (8003d6c <Vector124+0x6c>)
 8003d52:	619a      	str	r2, [r3, #24]
 8003d54:	bd10      	pop	{r4, pc}
 8003d56:	bf00      	nop
 8003d58:	40020400 	.word	0x40020400
 8003d5c:	24000360 	.word	0x24000360
 8003d60:	e000ed00 	.word	0xe000ed00
 8003d64:	240004f8 	.word	0x240004f8
 8003d68:	080003e3 	.word	0x080003e3
 8003d6c:	080003e6 	.word	0x080003e6

08003d70 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003d70:	4b15      	ldr	r3, [pc, #84]	@ (8003dc8 <Vector128+0x58>)
  DMA2->LIFCR = flags << 16U;
  if (dma.streams[10].func)
 8003d72:	4816      	ldr	r0, [pc, #88]	@ (8003dcc <Vector128+0x5c>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003d74:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 8003d76:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003d78:	0c09      	lsrs	r1, r1, #16
 8003d7a:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8003d7e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 8003d80:	040c      	lsls	r4, r1, #16
 8003d82:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 8003d84:	b10a      	cbz	r2, 8003d8a <Vector128+0x1a>
    dma.streams[10].func(dma.streams[10].param, flags);
 8003d86:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8003d88:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003d8a:	2330      	movs	r3, #48	@ 0x30
 8003d8c:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003d90:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd0 <Vector128+0x60>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003d98:	d102      	bne.n	8003da0 <Vector128+0x30>
 8003d9a:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003d9e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003da0:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003da4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003da8:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003daa:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003dac:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003db0:	4a08      	ldr	r2, [pc, #32]	@ (8003dd4 <Vector128+0x64>)
 8003db2:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003db4:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003db6:	6889      	ldr	r1, [r1, #8]
 8003db8:	6892      	ldr	r2, [r2, #8]
 8003dba:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003dbc:	bf8c      	ite	hi
 8003dbe:	4a06      	ldrhi	r2, [pc, #24]	@ (8003dd8 <Vector128+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003dc0:	4a06      	ldrls	r2, [pc, #24]	@ (8003ddc <Vector128+0x6c>)
 8003dc2:	619a      	str	r2, [r3, #24]
 8003dc4:	bd10      	pop	{r4, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40020400 	.word	0x40020400
 8003dcc:	24000360 	.word	0x24000360
 8003dd0:	e000ed00 	.word	0xe000ed00
 8003dd4:	240004f8 	.word	0x240004f8
 8003dd8:	080003e3 	.word	0x080003e3
 8003ddc:	080003e6 	.word	0x080003e6

08003de0 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003de0:	4b15      	ldr	r3, [pc, #84]	@ (8003e38 <Vector12C+0x58>)
  DMA2->LIFCR = flags << 22U;
  if (dma.streams[11].func)
 8003de2:	4816      	ldr	r0, [pc, #88]	@ (8003e3c <Vector12C+0x5c>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003de4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 8003de6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003de8:	0d89      	lsrs	r1, r1, #22
 8003dea:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8003dee:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 8003df0:	058c      	lsls	r4, r1, #22
 8003df2:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 8003df4:	b10a      	cbz	r2, 8003dfa <Vector12C+0x1a>
    dma.streams[11].func(dma.streams[11].param, flags);
 8003df6:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8003df8:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003dfa:	2330      	movs	r3, #48	@ 0x30
 8003dfc:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003e00:	4b0f      	ldr	r3, [pc, #60]	@ (8003e40 <Vector12C+0x60>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003e08:	d102      	bne.n	8003e10 <Vector12C+0x30>
 8003e0a:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003e0e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003e10:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003e14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003e18:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003e1a:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003e1c:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003e20:	4a08      	ldr	r2, [pc, #32]	@ (8003e44 <Vector12C+0x64>)
 8003e22:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003e24:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003e26:	6889      	ldr	r1, [r1, #8]
 8003e28:	6892      	ldr	r2, [r2, #8]
 8003e2a:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003e2c:	bf8c      	ite	hi
 8003e2e:	4a06      	ldrhi	r2, [pc, #24]	@ (8003e48 <Vector12C+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003e30:	4a06      	ldrls	r2, [pc, #24]	@ (8003e4c <Vector12C+0x6c>)
 8003e32:	619a      	str	r2, [r3, #24]
 8003e34:	bd10      	pop	{r4, pc}
 8003e36:	bf00      	nop
 8003e38:	40020400 	.word	0x40020400
 8003e3c:	24000360 	.word	0x24000360
 8003e40:	e000ed00 	.word	0xe000ed00
 8003e44:	240004f8 	.word	0x240004f8
 8003e48:	080003e3 	.word	0x080003e3
 8003e4c:	080003e6 	.word	0x080003e6

08003e50 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8003e50:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003e52:	4b14      	ldr	r3, [pc, #80]	@ (8003ea4 <Vector130+0x54>)
  DMA2->HIFCR = flags << 0U;
  if (dma.streams[12].func)
 8003e54:	4814      	ldr	r0, [pc, #80]	@ (8003ea8 <Vector130+0x58>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003e56:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 8003e58:	6e42      	ldr	r2, [r0, #100]	@ 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003e5a:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
  DMA2->HIFCR = flags << 0U;
 8003e5e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8003e60:	b10a      	cbz	r2, 8003e66 <Vector130+0x16>
    dma.streams[12].func(dma.streams[12].param, flags);
 8003e62:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8003e64:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003e66:	2330      	movs	r3, #48	@ 0x30
 8003e68:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003eac <Vector130+0x5c>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003e74:	d102      	bne.n	8003e7c <Vector130+0x2c>
 8003e76:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003e7a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003e7c:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003e80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003e84:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003e86:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003e88:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003e8c:	4a08      	ldr	r2, [pc, #32]	@ (8003eb0 <Vector130+0x60>)
 8003e8e:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003e90:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003e92:	6889      	ldr	r1, [r1, #8]
 8003e94:	6892      	ldr	r2, [r2, #8]
 8003e96:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003e98:	bf8c      	ite	hi
 8003e9a:	4a06      	ldrhi	r2, [pc, #24]	@ (8003eb4 <Vector130+0x64>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003e9c:	4a06      	ldrls	r2, [pc, #24]	@ (8003eb8 <Vector130+0x68>)
 8003e9e:	619a      	str	r2, [r3, #24]
 8003ea0:	bd08      	pop	{r3, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40020400 	.word	0x40020400
 8003ea8:	24000360 	.word	0x24000360
 8003eac:	e000ed00 	.word	0xe000ed00
 8003eb0:	240004f8 	.word	0x240004f8
 8003eb4:	080003e3 	.word	0x080003e3
 8003eb8:	080003e6 	.word	0x080003e6
 8003ebc:	00000000 	.word	0x00000000

08003ec0 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003ec0:	4b15      	ldr	r3, [pc, #84]	@ (8003f18 <Vector150+0x58>)
  DMA2->HIFCR = flags << 6U;
  if (dma.streams[13].func)
 8003ec2:	4816      	ldr	r0, [pc, #88]	@ (8003f1c <Vector150+0x5c>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003ec4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 8003ec6:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003ec8:	0989      	lsrs	r1, r1, #6
 8003eca:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8003ece:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 8003ed0:	018c      	lsls	r4, r1, #6
 8003ed2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 8003ed4:	b10a      	cbz	r2, 8003eda <Vector150+0x1a>
    dma.streams[13].func(dma.streams[13].param, flags);
 8003ed6:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 8003ed8:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003eda:	2330      	movs	r3, #48	@ 0x30
 8003edc:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f20 <Vector150+0x60>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003ee8:	d102      	bne.n	8003ef0 <Vector150+0x30>
 8003eea:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003eee:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003ef0:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003ef4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003ef8:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003efa:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003efc:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003f00:	4a08      	ldr	r2, [pc, #32]	@ (8003f24 <Vector150+0x64>)
 8003f02:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003f04:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003f06:	6889      	ldr	r1, [r1, #8]
 8003f08:	6892      	ldr	r2, [r2, #8]
 8003f0a:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003f0c:	bf8c      	ite	hi
 8003f0e:	4a06      	ldrhi	r2, [pc, #24]	@ (8003f28 <Vector150+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003f10:	4a06      	ldrls	r2, [pc, #24]	@ (8003f2c <Vector150+0x6c>)
 8003f12:	619a      	str	r2, [r3, #24]
 8003f14:	bd10      	pop	{r4, pc}
 8003f16:	bf00      	nop
 8003f18:	40020400 	.word	0x40020400
 8003f1c:	24000360 	.word	0x24000360
 8003f20:	e000ed00 	.word	0xe000ed00
 8003f24:	240004f8 	.word	0x240004f8
 8003f28:	080003e3 	.word	0x080003e3
 8003f2c:	080003e6 	.word	0x080003e6

08003f30 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003f30:	4b15      	ldr	r3, [pc, #84]	@ (8003f88 <Vector154+0x58>)
  DMA2->HIFCR = flags << 16U;
  if (dma.streams[14].func)
 8003f32:	4816      	ldr	r0, [pc, #88]	@ (8003f8c <Vector154+0x5c>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003f34:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 8003f36:	6f42      	ldr	r2, [r0, #116]	@ 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003f38:	0c09      	lsrs	r1, r1, #16
 8003f3a:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8003f3e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8003f40:	040c      	lsls	r4, r1, #16
 8003f42:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 8003f44:	b10a      	cbz	r2, 8003f4a <Vector154+0x1a>
    dma.streams[14].func(dma.streams[14].param, flags);
 8003f46:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8003f48:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003f4a:	2330      	movs	r3, #48	@ 0x30
 8003f4c:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003f50:	4b0f      	ldr	r3, [pc, #60]	@ (8003f90 <Vector154+0x60>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003f58:	d102      	bne.n	8003f60 <Vector154+0x30>
 8003f5a:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003f5e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003f60:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003f64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003f68:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003f6a:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003f6c:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003f70:	4a08      	ldr	r2, [pc, #32]	@ (8003f94 <Vector154+0x64>)
 8003f72:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003f74:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003f76:	6889      	ldr	r1, [r1, #8]
 8003f78:	6892      	ldr	r2, [r2, #8]
 8003f7a:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003f7c:	bf8c      	ite	hi
 8003f7e:	4a06      	ldrhi	r2, [pc, #24]	@ (8003f98 <Vector154+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003f80:	4a06      	ldrls	r2, [pc, #24]	@ (8003f9c <Vector154+0x6c>)
 8003f82:	619a      	str	r2, [r3, #24]
 8003f84:	bd10      	pop	{r4, pc}
 8003f86:	bf00      	nop
 8003f88:	40020400 	.word	0x40020400
 8003f8c:	24000360 	.word	0x24000360
 8003f90:	e000ed00 	.word	0xe000ed00
 8003f94:	240004f8 	.word	0x240004f8
 8003f98:	080003e3 	.word	0x080003e3
 8003f9c:	080003e6 	.word	0x080003e6

08003fa0 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003fa0:	4b15      	ldr	r3, [pc, #84]	@ (8003ff8 <Vector158+0x58>)
  DMA2->HIFCR = flags << 22U;
  if (dma.streams[15].func)
 8003fa2:	4816      	ldr	r0, [pc, #88]	@ (8003ffc <Vector158+0x5c>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003fa4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 8003fa6:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003fa8:	0d89      	lsrs	r1, r1, #22
 8003faa:	f001 013d 	and.w	r1, r1, #61	@ 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8003fae:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8003fb0:	058c      	lsls	r4, r1, #22
 8003fb2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 8003fb4:	b112      	cbz	r2, 8003fbc <Vector158+0x1c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8003fb6:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8003fba:	4790      	blx	r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003fbc:	2330      	movs	r3, #48	@ 0x30
 8003fbe:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8004000 <Vector158+0x60>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8003fca:	d102      	bne.n	8003fd2 <Vector158+0x32>
 8003fcc:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003fd0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003fd2:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8003fd6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8003fda:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8003fdc:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003fde:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003fe2:	4a08      	ldr	r2, [pc, #32]	@ (8004004 <Vector158+0x64>)
 8003fe4:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003fe6:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8003fe8:	6889      	ldr	r1, [r1, #8]
 8003fea:	6892      	ldr	r2, [r2, #8]
 8003fec:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8003fee:	bf8c      	ite	hi
 8003ff0:	4a05      	ldrhi	r2, [pc, #20]	@ (8004008 <Vector158+0x68>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8003ff2:	4a06      	ldrls	r2, [pc, #24]	@ (800400c <Vector158+0x6c>)
 8003ff4:	619a      	str	r2, [r3, #24]
 8003ff6:	bd10      	pop	{r4, pc}
 8003ff8:	40020400 	.word	0x40020400
 8003ffc:	24000360 	.word	0x24000360
 8004000:	e000ed00 	.word	0xe000ed00
 8004004:	240004f8 	.word	0x240004f8
 8004008:	080003e3 	.word	0x080003e3
 800400c:	080003e6 	.word	0x080003e6

08004010 <VectorCC>:
  sr = spip->spi->SR & spip->spi->IER;
 8004010:	4814      	ldr	r0, [pc, #80]	@ (8004064 <VectorCC+0x54>)
 8004012:	69c2      	ldr	r2, [r0, #28]
/**
 * @brief   SPI1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_SPI1_HANDLER) {
 8004014:	b508      	push	{r3, lr}
  sr = spip->spi->SR & spip->spi->IER;
 8004016:	6953      	ldr	r3, [r2, #20]
 8004018:	6911      	ldr	r1, [r2, #16]
 800401a:	400b      	ands	r3, r1
  spip->spi->IFCR = sr;
 800401c:	6193      	str	r3, [r2, #24]
  if ((sr & SPI_SR_OVR) != 0U) {
 800401e:	065b      	lsls	r3, r3, #25
 8004020:	d40a      	bmi.n	8004038 <VectorCC+0x28>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004022:	2330      	movs	r3, #48	@ 0x30
 8004024:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8004028:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <VectorCC+0x58>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8004030:	d105      	bne.n	800403e <VectorCC+0x2e>
 8004032:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  spi_lld_serve_interrupt(&SPID1);

  OSAL_IRQ_EPILOGUE();
}
 8004036:	bd08      	pop	{r3, pc}
 8004038:	f7fe f9f2 	bl	8002420 <spi_lld_serve_interrupt.part.0>
 800403c:	e7f1      	b.n	8004022 <VectorCC+0x12>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800403e:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8004042:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 8004046:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8004048:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800404a:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 800404e:	4a07      	ldr	r2, [pc, #28]	@ (800406c <VectorCC+0x5c>)
 8004050:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8004052:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8004054:	6889      	ldr	r1, [r1, #8]
 8004056:	6892      	ldr	r2, [r2, #8]
 8004058:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800405a:	bf8c      	ite	hi
 800405c:	4a04      	ldrhi	r2, [pc, #16]	@ (8004070 <VectorCC+0x60>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 800405e:	4a05      	ldrls	r2, [pc, #20]	@ (8004074 <VectorCC+0x64>)
 8004060:	619a      	str	r2, [r3, #24]
 8004062:	bd08      	pop	{r3, pc}
 8004064:	24000324 	.word	0x24000324
 8004068:	e000ed00 	.word	0xe000ed00
 800406c:	240004f8 	.word	0x240004f8
 8004070:	080003e3 	.word	0x080003e3
 8004074:	080003e6 	.word	0x080003e6
	...

08004080 <Vector198>:
  sr = spip->spi->SR & spip->spi->IER;
 8004080:	4814      	ldr	r0, [pc, #80]	@ (80040d4 <Vector198+0x54>)
 8004082:	69c2      	ldr	r2, [r0, #28]
/**
 * @brief   SPI6 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_SPI6_HANDLER) {
 8004084:	b508      	push	{r3, lr}
  sr = spip->spi->SR & spip->spi->IER;
 8004086:	6953      	ldr	r3, [r2, #20]
 8004088:	6911      	ldr	r1, [r2, #16]
 800408a:	400b      	ands	r3, r1
  spip->spi->IFCR = sr;
 800408c:	6193      	str	r3, [r2, #24]
  if ((sr & SPI_SR_OVR) != 0U) {
 800408e:	065b      	lsls	r3, r3, #25
 8004090:	d40a      	bmi.n	80040a8 <Vector198+0x28>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004092:	2330      	movs	r3, #48	@ 0x30
 8004094:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8004098:	4b0f      	ldr	r3, [pc, #60]	@ (80040d8 <Vector198+0x58>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 80040a0:	d105      	bne.n	80040ae <Vector198+0x2e>
 80040a2:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  spi_lld_serve_interrupt(&SPID6);

  OSAL_IRQ_EPILOGUE();
}
 80040a6:	bd08      	pop	{r3, pc}
 80040a8:	f7fe f9ba 	bl	8002420 <spi_lld_serve_interrupt.part.0>
 80040ac:	e7f1      	b.n	8004092 <Vector198+0x12>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80040ae:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80040b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    psp -= sizeof (struct port_extctx);
 80040b6:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80040b8:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80040ba:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80040be:	4a07      	ldr	r2, [pc, #28]	@ (80040dc <Vector198+0x5c>)
 80040c0:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80040c2:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80040c4:	6889      	ldr	r1, [r1, #8]
 80040c6:	6892      	ldr	r2, [r2, #8]
 80040c8:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80040ca:	bf8c      	ite	hi
 80040cc:	4a04      	ldrhi	r2, [pc, #16]	@ (80040e0 <Vector198+0x60>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80040ce:	4a05      	ldrls	r2, [pc, #20]	@ (80040e4 <Vector198+0x64>)
 80040d0:	619a      	str	r2, [r3, #24]
 80040d2:	bd08      	pop	{r3, pc}
 80040d4:	240002e8 	.word	0x240002e8
 80040d8:	e000ed00 	.word	0xe000ed00
 80040dc:	240004f8 	.word	0x240004f8
 80040e0:	080003e3 	.word	0x080003e3
 80040e4:	080003e6 	.word	0x080003e6
	...

080040f0 <__early_init>:
  RCC->AHB4RSTR |= mask;
 80040f0:	4aa8      	ldr	r2, [pc, #672]	@ (8004394 <__early_init+0x2a4>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80040f2:	2300      	movs	r3, #0
 */
__STATIC_INLINE void rccEnableAHB4(uint32_t mask, bool lp) {

#if STM32_TARGET_CORE == 1
  /* Allocating and enabling the peripherals.*/
  RCC_C1->AHB4ENR |= mask;
 80040f4:	49a8      	ldr	r1, [pc, #672]	@ (8004398 <__early_init+0x2a8>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80040f6:	f64f 7cff 	movw	ip, #65535	@ 0xffff
  RCC->AHB4RSTR |= mask;
 80040fa:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80040fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004102:	f240 74ff 	movw	r4, #2047	@ 0x7ff
  gpiop->OTYPER  = config->otyper;
 8004106:	4fa5      	ldr	r7, [pc, #660]	@ (800439c <__early_init+0x2ac>)
  gpiop->PUPDR   = config->pupdr;
 8004108:	f04f 3e55 	mov.w	lr, #1431655765	@ 0x55555555
  gpiop->MODER   = config->moder;
 800410c:	f04f 0804 	mov.w	r8, #4
 8004110:	4320      	orrs	r0, r4
  gpiop->OTYPER  = config->otyper;
 8004112:	4ea3      	ldr	r6, [pc, #652]	@ (80043a0 <__early_init+0x2b0>)
 8004114:	4da3      	ldr	r5, [pc, #652]	@ (80043a4 <__early_init+0x2b4>)
 8004116:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
  RCC->AHB4RSTR &= ~mask;
 800411a:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 800411e:	f36f 000a 	bfc	r0, #0, #11
 8004122:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
  (void)RCC->AHB4RSTR;
 8004126:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
  RCC_C1->AHB4ENR |= mask;
 800412a:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 800412c:	4a9e      	ldr	r2, [pc, #632]	@ (80043a8 <__early_init+0x2b8>)
 800412e:	4320      	orrs	r0, r4
 8004130:	6408      	str	r0, [r1, #64]	@ 0x40
  if (lp) {
    RCC_C1->AHB4LPENR |= mask;
 8004132:	6e88      	ldr	r0, [r1, #104]	@ 0x68
 8004134:	4320      	orrs	r0, r4
  gpiop->OSPEEDR = config->ospeedr;
 8004136:	4c9d      	ldr	r4, [pc, #628]	@ (80043ac <__early_init+0x2bc>)
 8004138:	6688      	str	r0, [r1, #104]	@ 0x68
  }
  else {
    RCC_C1->AHB4LPENR &= ~mask;
  }
  (void)RCC_C1->AHB4LPENR;
 800413a:	6e88      	ldr	r0, [r1, #104]	@ 0x68
  gpiop->PUPDR   = config->pupdr;
 800413c:	489c      	ldr	r0, [pc, #624]	@ (80043b0 <__early_init+0x2c0>)
  gpiop->OTYPER  = config->otyper;
 800413e:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004140:	6094      	str	r4, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8004142:	60d0      	str	r0, [r2, #12]
  gpiop->AFRL    = config->afrl;
 8004144:	489b      	ldr	r0, [pc, #620]	@ (80043b4 <__early_init+0x2c4>)
  gpiop->ODR     = config->odr;
 8004146:	f8c2 c014 	str.w	ip, [r2, #20]
  gpiop->AFRL    = config->afrl;
 800414a:	6210      	str	r0, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800414c:	489a      	ldr	r0, [pc, #616]	@ (80043b8 <__early_init+0x2c8>)
  gpiop->OTYPER  = config->otyper;
 800414e:	4c9b      	ldr	r4, [pc, #620]	@ (80043bc <__early_init+0x2cc>)
  gpiop->AFRH    = config->afrh;
 8004150:	6250      	str	r0, [r2, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 8004152:	489b      	ldr	r0, [pc, #620]	@ (80043c0 <__early_init+0x2d0>)
 8004154:	6010      	str	r0, [r2, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8004156:	489b      	ldr	r0, [pc, #620]	@ (80043c4 <__early_init+0x2d4>)
  gpiop->OTYPER  = config->otyper;
 8004158:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800415c:	f8c2 0408 	str.w	r0, [r2, #1032]	@ 0x408
  gpiop->PUPDR   = config->pupdr;
 8004160:	f100 6015 	add.w	r0, r0, #156237824	@ 0x9500000
 8004164:	f500 20aa 	add.w	r0, r0, #348160	@ 0x55000
 8004168:	f200 4091 	addw	r0, r0, #1169	@ 0x491
 800416c:	f8c2 040c 	str.w	r0, [r2, #1036]	@ 0x40c
  gpiop->ODR     = config->odr;
 8004170:	f64b 70fe 	movw	r0, #49150	@ 0xbffe
 8004174:	f8c2 0414 	str.w	r0, [r2, #1044]	@ 0x414
  gpiop->AFRH    = config->afrh;
 8004178:	f44f 0030 	mov.w	r0, #11534336	@ 0xb00000
  gpiop->AFRL    = config->afrl;
 800417c:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
  gpiop->AFRH    = config->afrh;
 8004180:	f8c2 0424 	str.w	r0, [r2, #1060]	@ 0x424
  gpiop->MODER   = config->moder;
 8004184:	4890      	ldr	r0, [pc, #576]	@ (80043c8 <__early_init+0x2d8>)
 8004186:	f8c2 0400 	str.w	r0, [r2, #1024]	@ 0x400
  gpiop->OSPEEDR = config->ospeedr;
 800418a:	f640 700c 	movw	r0, #3852	@ 0xf0c
  gpiop->OTYPER  = config->otyper;
 800418e:	f8c2 3804 	str.w	r3, [r2, #2052]	@ 0x804
 8004192:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
  gpiop->OSPEEDR = config->ospeedr;
 8004196:	6090      	str	r0, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8004198:	488c      	ldr	r0, [pc, #560]	@ (80043cc <__early_init+0x2dc>)
 800419a:	60d0      	str	r0, [r2, #12]
  gpiop->AFRL    = config->afrl;
 800419c:	488c      	ldr	r0, [pc, #560]	@ (80043d0 <__early_init+0x2e0>)
  gpiop->ODR     = config->odr;
 800419e:	f8c2 c014 	str.w	ip, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80041a2:	6210      	str	r0, [r2, #32]
  gpiop->MODER   = config->moder;
 80041a4:	f640 2008 	movw	r0, #2568	@ 0xa08
  gpiop->AFRH    = config->afrh;
 80041a8:	6253      	str	r3, [r2, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 80041aa:	6010      	str	r0, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 80041ac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80041b0:	f8c2 0404 	str.w	r0, [r2, #1028]	@ 0x404
  gpiop->OSPEEDR = config->ospeedr;
 80041b4:	f44f 2070 	mov.w	r0, #983040	@ 0xf0000
 80041b8:	f8c2 0408 	str.w	r0, [r2, #1032]	@ 0x408
  gpiop->PUPDR   = config->pupdr;
 80041bc:	4885      	ldr	r0, [pc, #532]	@ (80043d4 <__early_init+0x2e4>)
 80041be:	f8c2 040c 	str.w	r0, [r2, #1036]	@ 0x40c
  gpiop->AFRH    = config->afrh;
 80041c2:	2077      	movs	r0, #119	@ 0x77
  gpiop->ODR     = config->odr;
 80041c4:	f8c2 c414 	str.w	ip, [r2, #1044]	@ 0x414
  gpiop->AFRL    = config->afrl;
 80041c8:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
  gpiop->AFRH    = config->afrh;
 80041cc:	f8c2 0424 	str.w	r0, [r2, #1060]	@ 0x424
  gpiop->MODER   = config->moder;
 80041d0:	f44f 10d0 	mov.w	r0, #1703936	@ 0x1a0000
 80041d4:	f8c2 0400 	str.w	r0, [r2, #1024]	@ 0x400
  gpiop->OSPEEDR = config->ospeedr;
 80041d8:	200c      	movs	r0, #12
  gpiop->OTYPER  = config->otyper;
 80041da:	f8c2 3804 	str.w	r3, [r2, #2052]	@ 0x804
  gpiop->OSPEEDR = config->ospeedr;
 80041de:	f8c2 0808 	str.w	r0, [r2, #2056]	@ 0x808
  gpiop->PUPDR   = config->pupdr;
 80041e2:	487d      	ldr	r0, [pc, #500]	@ (80043d8 <__early_init+0x2e8>)
 80041e4:	f8c2 080c 	str.w	r0, [r2, #2060]	@ 0x80c
  gpiop->ODR     = config->odr;
 80041e8:	f64f 70fd 	movw	r0, #65533	@ 0xfffd
 80041ec:	f8c2 0814 	str.w	r0, [r2, #2068]	@ 0x814
  gpiop->AFRL    = config->afrl;
 80041f0:	f8c2 3820 	str.w	r3, [r2, #2080]	@ 0x820
  gpiop->AFRH    = config->afrh;
 80041f4:	f8c2 3824 	str.w	r3, [r2, #2084]	@ 0x824
  gpiop->MODER   = config->moder;
 80041f8:	f8c2 8800 	str.w	r8, [r2, #2048]	@ 0x800
  gpiop->OTYPER  = config->otyper;
 80041fc:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8004200:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004202:	60bb      	str	r3, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8004204:	f8c7 e00c 	str.w	lr, [r7, #12]
  gpiop->ODR     = config->odr;
 8004208:	f8c7 c014 	str.w	ip, [r7, #20]
  gpiop->AFRL    = config->afrl;
 800420c:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 800420e:	627b      	str	r3, [r7, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 8004210:	603b      	str	r3, [r7, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8004212:	f04f 674c 	mov.w	r7, #213909504	@ 0xcc00000
  gpiop->OTYPER  = config->otyper;
 8004216:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004218:	60b7      	str	r7, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 800421a:	f107 4788 	add.w	r7, r7, #1140850688	@ 0x44000000
  gpiop->OTYPER  = config->otyper;
 800421e:	486f      	ldr	r0, [pc, #444]	@ (80043dc <__early_init+0x2ec>)
  gpiop->PUPDR   = config->pupdr;
 8004220:	f107 1755 	add.w	r7, r7, #5570645	@ 0x550055
 8004224:	f507 57a8 	add.w	r7, r7, #5376	@ 0x1500
 8004228:	60f7      	str	r7, [r6, #12]
  gpiop->AFRH    = config->afrh;
 800422a:	4f6d      	ldr	r7, [pc, #436]	@ (80043e0 <__early_init+0x2f0>)
  gpiop->ODR     = config->odr;
 800422c:	f8c6 c014 	str.w	ip, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8004230:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8004232:	6277      	str	r7, [r6, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 8004234:	f04f 6708 	mov.w	r7, #142606336	@ 0x8800000
 8004238:	6037      	str	r7, [r6, #0]
  gpiop->OSPEEDR = config->ospeedr;
 800423a:	260f      	movs	r6, #15
  gpiop->OTYPER  = config->otyper;
 800423c:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800423e:	60ae      	str	r6, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8004240:	4e68      	ldr	r6, [pc, #416]	@ (80043e4 <__early_init+0x2f4>)
 8004242:	60ee      	str	r6, [r5, #12]
  gpiop->ODR     = config->odr;
 8004244:	f8c5 c014 	str.w	ip, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8004248:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 800424a:	626b      	str	r3, [r5, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 800424c:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 800424e:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004250:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8004252:	f8c4 e00c 	str.w	lr, [r4, #12]
  gpiop->ODR     = config->odr;
 8004256:	f8c4 c014 	str.w	ip, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800425a:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800425c:	6263      	str	r3, [r4, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 800425e:	6023      	str	r3, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8004260:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004262:	6083      	str	r3, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8004264:	f8c0 e00c 	str.w	lr, [r0, #12]
  gpiop->ODR     = config->odr;
 8004268:	f8c0 c014 	str.w	ip, [r0, #20]
  gpiop->AFRL    = config->afrl;
 800426c:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 800426e:	6243      	str	r3, [r0, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 8004270:	6003      	str	r3, [r0, #0]
  gpiop->OTYPER  = config->otyper;
 8004272:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004274:	6093      	str	r3, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8004276:	f8c2 e00c 	str.w	lr, [r2, #12]
  gpiop->ODR     = config->odr;
 800427a:	f8c2 c014 	str.w	ip, [r2, #20]
  gpiop->AFRL    = config->afrl;
 800427e:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8004280:	6253      	str	r3, [r2, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 8004282:	6013      	str	r3, [r2, #0]
  (void)pwr;
#endif

  /* Lower C3 byte, it must be programmed at very first, then waiting for
     power supply to stabilize.*/
  PWR->CR3   = STM32_PWR_CR3 & 0x000000FFU;
 8004284:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
  RCC_C1->APB4ENR |= mask;
 8004288:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800428a:	f043 0302 	orr.w	r3, r3, #2
 800428e:	654b      	str	r3, [r1, #84]	@ 0x54
    RCC_C1->APB4LPENR |= mask;
 8004290:	6fcb      	ldr	r3, [r1, #124]	@ 0x7c
 8004292:	f043 0302 	orr.w	r3, r3, #2
 8004296:	67cb      	str	r3, [r1, #124]	@ 0x7c
  (void)RCC_C1->APB4LPENR;
 8004298:	6fcb      	ldr	r3, [r1, #124]	@ 0x7c
 800429a:	f8c2 800c 	str.w	r8, [r2, #12]
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0)
 800429e:	6853      	ldr	r3, [r2, #4]
 80042a0:	049b      	lsls	r3, r3, #18
 80042a2:	d5fc      	bpl.n	800429e <__early_init+0x1ae>
    ; /* CHTODO timeout handling.*/

  PWR->CR1   = STM32_PWR_CR1 | 0xF0000000U;
 80042a4:	4850      	ldr	r0, [pc, #320]	@ (80043e8 <__early_init+0x2f8>)
  PWR->CR2   = STM32_PWR_CR2;
 80042a6:	2301      	movs	r3, #1
  PWR->CR3   = STM32_PWR_CR3;   /* Other bits, lower byte is not changed.   */
 80042a8:	4950      	ldr	r1, [pc, #320]	@ (80043ec <__early_init+0x2fc>)
  PWR->CPUCR = STM32_PWR_CPUCR;
 80042aa:	2400      	movs	r4, #0
  PWR->CR1   = STM32_PWR_CR1 | 0xF0000000U;
 80042ac:	6010      	str	r0, [r2, #0]
#if defined(HAL_LLD_TYPE3_H)
  PWR->SRDCR = STM32_VOS;
#else
  PWR->D3CR  = STM32_VOS;
 80042ae:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
  PWR->CR2   = STM32_PWR_CR2;
 80042b2:	6093      	str	r3, [r2, #8]
  PWR->CR3   = STM32_PWR_CR3;   /* Other bits, lower byte is not changed.   */
 80042b4:	60d1      	str	r1, [r2, #12]
  PWR->CPUCR = STM32_PWR_CPUCR;
 80042b6:	6114      	str	r4, [r2, #16]
#endif
#if defined(HAL_LLD_TYPE1_H)
#if !defined(STM32_ENFORCE_H7_REV_XY)
  SYSCFG->PWRCR = STM32_ODEN;
 80042b8:	494d      	ldr	r1, [pc, #308]	@ (80043f0 <__early_init+0x300>)
  PWR->D3CR  = STM32_VOS;
 80042ba:	6190      	str	r0, [r2, #24]
#endif
#endif
#if defined(HAL_LLD_TYPE3_H)
  while ((PWR->SRDCR & PWR_SRDCR_VOSRDY) == 0)
#else
  while ((PWR->D3CR & PWR_D3CR_VOSRDY) == 0)
 80042bc:	4a4d      	ldr	r2, [pc, #308]	@ (80043f4 <__early_init+0x304>)
  SYSCFG->PWRCR = STM32_ODEN;
 80042be:	62cb      	str	r3, [r1, #44]	@ 0x2c
  while ((PWR->D3CR & PWR_D3CR_VOSRDY) == 0)
 80042c0:	6993      	ldr	r3, [r2, #24]
 80042c2:	049f      	lsls	r7, r3, #18
 80042c4:	d5fc      	bpl.n	80042c0 <__early_init+0x1d0>
  PWR->CR1 |= PWR_CR1_DBP;
 80042c6:	6813      	ldr	r3, [r2, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80042c8:	4932      	ldr	r1, [pc, #200]	@ (8004394 <__early_init+0x2a4>)
  PWR->CR1 |= PWR_CR1_DBP;
 80042ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ce:	6013      	str	r3, [r2, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80042d0:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 80042d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042da:	d004      	beq.n	80042e6 <__early_init+0x1f6>
    RCC->BDCR = RCC_BDCR_BDRST;
 80042dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
    RCC->BDCR = 0;
 80042e0:	2300      	movs	r3, #0
    RCC->BDCR = RCC_BDCR_BDRST;
 80042e2:	670a      	str	r2, [r1, #112]	@ 0x70
    RCC->BDCR = 0;
 80042e4:	670b      	str	r3, [r1, #112]	@ 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
 80042e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004394 <__early_init+0x2a4>)
 80042e8:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80042ea:	f043 0319 	orr.w	r3, r3, #25
 80042ee:	6713      	str	r3, [r2, #112]	@ 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
 80042f0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80042f2:	079e      	lsls	r6, r3, #30
 80042f4:	d5fc      	bpl.n	80042f0 <__early_init+0x200>
  /* Backup domain initialization.*/
  init_bkp_domain();

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80042f6:	6813      	ldr	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80042f8:	4926      	ldr	r1, [pc, #152]	@ (8004394 <__early_init+0x2a4>)
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8004300:	680b      	ldr	r3, [r1, #0]
 8004302:	075d      	lsls	r5, r3, #29
 8004304:	d5fc      	bpl.n	8004300 <__early_init+0x210>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. This is only required when using a debugger than can cause
     restarts.*/
  RCC->CFGR    = 0x00000000U;               /* Reset SW to HSI.             */
 8004306:	2300      	movs	r3, #0
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004308:	4a22      	ldr	r2, [pc, #136]	@ (8004394 <__early_init+0x2a4>)
  RCC->CFGR    = 0x00000000U;               /* Reset SW to HSI.             */
 800430a:	610b      	str	r3, [r1, #16]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800430c:	6913      	ldr	r3, [r2, #16]
 800430e:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8004312:	d1fb      	bne.n	800430c <__early_init+0x21c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers cleared to reset values.*/
  RCC->CR      = RCC_CR_HSION;             /* CR Reset value.              */
 8004314:	2001      	movs	r0, #1
  RCC->HSICFGR = 0x40000000U;              /* HSICFGR Reset value.         */
 8004316:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
#if !defined(STM32_ENFORCE_H7_REV_XY)
  RCC->CSICFGR = 0x20000000U;              /* CSICFGR Reset value.         */
 800431a:	f04f 5400 	mov.w	r4, #536870912	@ 0x20000000
  RCC->CR      = RCC_CR_HSION;             /* CR Reset value.              */
 800431e:	6010      	str	r0, [r2, #0]
  RCC->HSICFGR = 0x40000000U;              /* HSICFGR Reset value.         */
 8004320:	6051      	str	r1, [r2, #4]
#endif
  RCC->CSR     = 0x00000000U;              /* CSR reset value.             */
  RCC->PLLCFGR = 0x01FF0000U;              /* PLLCFGR reset value.         */
 8004322:	4835      	ldr	r0, [pc, #212]	@ (80043f8 <__early_init+0x308>)
  cfgr |= STM32_HRTIMSEL;
#endif
#if STM32_TIMPRE_ENABLE == TRUE
  cfgr |= RCC_CFGR_TIMPRE;
#endif
  RCC->CFGR = cfgr;
 8004324:	4935      	ldr	r1, [pc, #212]	@ (80043fc <__early_init+0x30c>)
  RCC->CSICFGR = 0x20000000U;              /* CSICFGR Reset value.         */
 8004326:	60d4      	str	r4, [r2, #12]
  RCC->CSR     = 0x00000000U;              /* CSR reset value.             */
 8004328:	6753      	str	r3, [r2, #116]	@ 0x74
  RCC->PLLCFGR = 0x01FF0000U;              /* PLLCFGR reset value.         */
 800432a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  RCC->CFGR = cfgr;
 800432c:	6111      	str	r1, [r2, #16]

  /* HSE activation with optional bypass.*/
#if STM32_HSE_ENABLED == TRUE
#if defined(STM32_HSE_BYPASS)
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 800432e:	6813      	ldr	r3, [r2, #0]
#else
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8004330:	4818      	ldr	r0, [pc, #96]	@ (8004394 <__early_init+0x2a4>)
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8004332:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8004336:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8004338:	6803      	ldr	r3, [r0, #0]
 800433a:	039c      	lsls	r4, r3, #14
 800433c:	d5fc      	bpl.n	8004338 <__early_init+0x248>
    ;                           /* Waits until HSE is stable.               */
#endif /* STM32_HSE_ENABLED == TRUE */

  /* HSI48 activation.*/
#if STM32_HSI48_ENABLED == TRUE
  RCC->CR |= RCC_CR_HSI48ON;
 800433e:	6803      	ldr	r3, [r0, #0]
  while ((RCC->CR & RCC_CR_HSI48RDY) == 0)
 8004340:	4914      	ldr	r1, [pc, #80]	@ (8004394 <__early_init+0x2a4>)
  RCC->CR |= RCC_CR_HSI48ON;
 8004342:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004346:	6003      	str	r3, [r0, #0]
  while ((RCC->CR & RCC_CR_HSI48RDY) == 0)
 8004348:	680b      	ldr	r3, [r1, #0]
 800434a:	0498      	lsls	r0, r3, #18
 800434c:	d5fc      	bpl.n	8004348 <__early_init+0x258>

#endif /* STM32_HSI48_ENABLED == TRUE */

  /* CSI activation.*/
#if STM32_CSI_ENABLED == TRUE
  RCC->CR |= RCC_CR_CSION;
 800434e:	680b      	ldr	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_CSIRDY) == 0)
 8004350:	4a10      	ldr	r2, [pc, #64]	@ (8004394 <__early_init+0x2a4>)
  RCC->CR |= RCC_CR_CSION;
 8004352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004356:	600b      	str	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_CSIRDY) == 0)
 8004358:	6813      	ldr	r3, [r2, #0]
 800435a:	05d9      	lsls	r1, r3, #23
 800435c:	d5fc      	bpl.n	8004358 <__early_init+0x268>
    ;                           /* Waits until CSI is stable.               */
#endif /* STM32_CSI_ENABLED == TRUE */

  /* LSI activation.*/
#if STM32_LSI_ENABLED == TRUE
  RCC->CSR |= RCC_CSR_LSION;
 800435e:	6f51      	ldr	r1, [r2, #116]	@ 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8004360:	4b0c      	ldr	r3, [pc, #48]	@ (8004394 <__early_init+0x2a4>)
  RCC->CSR |= RCC_CSR_LSION;
 8004362:	f041 0101 	orr.w	r1, r1, #1
 8004366:	6751      	str	r1, [r2, #116]	@ 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8004368:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800436a:	0792      	lsls	r2, r2, #30
 800436c:	d5fc      	bpl.n	8004368 <__early_init+0x278>
    cfgmask = STM32_PLLCFGR_PLL3RGE | STM32_PLLCFGR_PLL3VCOSEL | RCC_PLLCFGR_PLL3FRACEN |
              STM32_PLLCFGR_PLL2RGE | STM32_PLLCFGR_PLL2VCOSEL | RCC_PLLCFGR_PLL2FRACEN |
              STM32_PLLCFGR_PLL1RGE | STM32_PLLCFGR_PLL1VCOSEL | RCC_PLLCFGR_PLL1FRACEN;

#if STM32_PLL1_ENABLED == TRUE
    RCC->PLL1FRACR = STM32_PLL1_FRACN;
 800436e:	2200      	movs	r2, #0
    RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM3_VALUE(STM32_PLL3_DIVM_VALUE) |
 8004370:	4823      	ldr	r0, [pc, #140]	@ (8004400 <__early_init+0x310>)
    RCC->PLL1DIVR  = STM32_PLL1_DIVR | STM32_PLL1_DIVQ |
 8004372:	4924      	ldr	r1, [pc, #144]	@ (8004404 <__early_init+0x314>)
    RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM3_VALUE(STM32_PLL3_DIVM_VALUE) |
 8004374:	6298      	str	r0, [r3, #40]	@ 0x28
#endif
#endif /* STM32_PLL1_ENABLED == TRUE */

#if STM32_PLL2_ENABLED == TRUE
    RCC->PLL2FRACR = STM32_PLL2_FRACN;
    RCC->PLL2DIVR  = STM32_PLL2_DIVR | STM32_PLL2_DIVQ |
 8004376:	4c24      	ldr	r4, [pc, #144]	@ (8004408 <__early_init+0x318>)
    RCC->PLL1FRACR = STM32_PLL1_FRACN;
 8004378:	635a      	str	r2, [r3, #52]	@ 0x34
#endif
#endif /* STM32_PLL2_ENABLED == TRUE */

#if STM32_PLL3_ENABLED == TRUE
    RCC->PLL3FRACR = STM32_PLL3_FRACN;
    RCC->PLL3DIVR  = STM32_PLL3_DIVR | STM32_PLL3_DIVQ |
 800437a:	4824      	ldr	r0, [pc, #144]	@ (800440c <__early_init+0x31c>)
    RCC->PLL1DIVR  = STM32_PLL1_DIVR | STM32_PLL1_DIVQ |
 800437c:	6319      	str	r1, [r3, #48]	@ 0x30
    cfgmask |= RCC_PLLCFGR_DIVR3EN;
#endif
#endif /* STM32_PLL3_ENABLED == TRUE */

    /* Activating enabled PLLs and waiting for all of them to become ready.*/
    RCC->PLLCFGR = cfgmask & STM32_PLLCFGR_MASK;
 800437e:	4924      	ldr	r1, [pc, #144]	@ (8004410 <__early_init+0x320>)
    RCC->PLL2FRACR = STM32_PLL2_FRACN;
 8004380:	63da      	str	r2, [r3, #60]	@ 0x3c
    RCC->PLL2DIVR  = STM32_PLL2_DIVR | STM32_PLL2_DIVQ |
 8004382:	639c      	str	r4, [r3, #56]	@ 0x38
    RCC->PLL3FRACR = STM32_PLL3_FRACN;
 8004384:	645a      	str	r2, [r3, #68]	@ 0x44
    RCC->PLL3DIVR  = STM32_PLL3_DIVR | STM32_PLL3_DIVQ |
 8004386:	6418      	str	r0, [r3, #64]	@ 0x40
    RCC->PLLCFGR = cfgmask & STM32_PLLCFGR_MASK;
 8004388:	62d9      	str	r1, [r3, #44]	@ 0x2c
    RCC->CR     |= onmask;
 800438a:	6819      	ldr	r1, [r3, #0]
    while ((RCC->CR & rdymask) != rdymask)
 800438c:	4a01      	ldr	r2, [pc, #4]	@ (8004394 <__early_init+0x2a4>)
    RCC->CR     |= onmask;
 800438e:	f041 51a8 	orr.w	r1, r1, #352321536	@ 0x15000000
 8004392:	e03f      	b.n	8004414 <__early_init+0x324>
 8004394:	58024400 	.word	0x58024400
 8004398:	58024500 	.word	0x58024500
 800439c:	58021400 	.word	0x58021400
 80043a0:	58021800 	.word	0x58021800
 80043a4:	58021c00 	.word	0x58021c00
 80043a8:	58020000 	.word	0x58020000
 80043ac:	ffffc03c 	.word	0xffffc03c
 80043b0:	40005551 	.word	0x40005551
 80043b4:	b0000bb0 	.word	0xb0000bb0
 80043b8:	000aaa0a 	.word	0x000aaa0a
 80043bc:	58022000 	.word	0x58022000
 80043c0:	aaae8028 	.word	0xaaae8028
 80043c4:	3c0000c3 	.word	0x3c0000c3
 80043c8:	18000081 	.word	0x18000081
 80043cc:	01555051 	.word	0x01555051
 80043d0:	00bb00b0 	.word	0x00bb00b0
 80043d4:	55405555 	.word	0x55405555
 80043d8:	55555551 	.word	0x55555551
 80043dc:	58022400 	.word	0x58022400
 80043e0:	00b0b000 	.word	0x00b0b000
 80043e4:	55555550 	.word	0x55555550
 80043e8:	f000c000 	.word	0xf000c000
 80043ec:	01000004 	.word	0x01000004
 80043f0:	58000400 	.word	0x58000400
 80043f4:	58024800 	.word	0x58024800
 80043f8:	01ff0000 	.word	0x01ff0000
 80043fc:	08108800 	.word	0x08108800
 8004400:	00404042 	.word	0x00404042
 8004404:	071303df 	.word	0x071303df
 8004408:	07074f8f 	.word	0x07074f8f
 800440c:	07070f8f 	.word	0x07070f8f
 8004410:	01ff0555 	.word	0x01ff0555
 8004414:	6019      	str	r1, [r3, #0]
    while ((RCC->CR & rdymask) != rdymask)
 8004416:	6813      	ldr	r3, [r2, #0]
 8004418:	f003 5328 	and.w	r3, r3, #704643072	@ 0x2a000000
 800441c:	f1b3 5f28 	cmp.w	r3, #704643072	@ 0x2a000000
 8004420:	d1f9      	bne.n	8004416 <__early_init+0x326>
#if defined(HAL_LLD_TYPE3_H)
  RCC->CDCFGR1 = STM32_CDCPRE  | STM32_CDPPRE | STM32_CDHPRE;
  RCC->CDCFGR2 = STM32_CDPPRE2 | STM32_CDPPRE1;
  RCC->SRDCFGR = STM32_SRDPPRE;
#else
  RCC->D1CFGR = STM32_D1CPRE  | STM32_D1PPRE3 | STM32_D1HPRE;
 8004422:	2448      	movs	r4, #72	@ 0x48
  RCC->D2CFGR = STM32_D2PPRE2 | STM32_D2PPRE1;
 8004424:	f44f 6188 	mov.w	r1, #1088	@ 0x440
  RCC->D3CFGR = STM32_D3PPRE4;
 8004428:	2040      	movs	r0, #64	@ 0x40

  /* Peripherals clocks.*/
#if defined(HAL_LLD_TYPE1_H)
  RCC->D1CCIPR  = STM32_CKPERSEL   | STM32_SDMMCSEL    | STM32_QSPISEL       |
                  STM32_FMCSEL;
  RCC->D2CCIP1R = STM32_SWPSEL     | STM32_FDCANSEL    | STM32_DFSDM1SEL     |
 800442a:	2300      	movs	r3, #0
  RCC->D1CFGR = STM32_D1CPRE  | STM32_D1PPRE3 | STM32_D1HPRE;
 800442c:	6194      	str	r4, [r2, #24]
                  STM32_SPDIFSEL   | STM32_SPDIFSEL    | STM32_SPI45SEL      |
                  STM32_SPI123SEL  | STM32_SAI23SEL    | STM32_SAI1SEL;
  RCC->D2CCIP2R = STM32_LPTIM1SEL  | STM32_CECSEL      | STM32_USBSEL        |
 800442e:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
  RCC->D2CFGR = STM32_D2PPRE2 | STM32_D2PPRE1;
 8004432:	61d1      	str	r1, [r2, #28]
  RCC->D1CCIPR  = STM32_CKPERSEL   | STM32_SDMMCSEL    | STM32_QSPISEL       |
 8004434:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
  RCC->D3CFGR = STM32_D3PPRE4;
 8004438:	6210      	str	r0, [r2, #32]
                  STM32_LPTIM3SEL  | STM32_LPTIM2SEL   | STM32_I2C4SEL       |
                  STM32_LPUART1SEL;
#endif

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_WRHIGHFREQ_1 | FLASH_ACR_WRHIGHFREQ_0 |
 800443a:	2034      	movs	r0, #52	@ 0x34
  RCC->D1CCIPR  = STM32_CKPERSEL   | STM32_SDMMCSEL    | STM32_QSPISEL       |
 800443c:	64d1      	str	r1, [r2, #76]	@ 0x4c
  FLASH->ACR = FLASH_ACR_WRHIGHFREQ_1 | FLASH_ACR_WRHIGHFREQ_0 |
 800443e:	4919      	ldr	r1, [pc, #100]	@ (80044a4 <__early_init+0x3b4>)
  RCC->D2CCIP1R = STM32_SWPSEL     | STM32_FDCANSEL    | STM32_DFSDM1SEL     |
 8004440:	6513      	str	r3, [r2, #80]	@ 0x50
  RCC->D2CCIP2R = STM32_LPTIM1SEL  | STM32_CECSEL      | STM32_USBSEL        |
 8004442:	6554      	str	r4, [r2, #84]	@ 0x54
  RCC->D3CCIPR  = STM32_SPI6SEL    | STM32_SAI4BSEL    | STM32_SAI4ASEL      |
 8004444:	6593      	str	r3, [r2, #88]	@ 0x58
  FLASH->ACR = FLASH_ACR_WRHIGHFREQ_1 | FLASH_ACR_WRHIGHFREQ_0 |
 8004446:	6008      	str	r0, [r1, #0]
               STM32_FLASHBITS;
  while ((FLASH->ACR & FLASH_ACR_LATENCY) !=
 8004448:	680b      	ldr	r3, [r1, #0]
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	2b04      	cmp	r3, #4
 8004450:	d1fa      	bne.n	8004448 <__early_init+0x358>
  }

  /* Switching to the configured clock source if it is different
     from HSI.*/
#if STM32_SW != STM32_SW_HSI_CK
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8004452:	4a15      	ldr	r2, [pc, #84]	@ (80044a8 <__early_init+0x3b8>)
 8004454:	6913      	ldr	r3, [r2, #16]
 8004456:	f043 0303 	orr.w	r3, r3, #3
 800445a:	6113      	str	r3, [r2, #16]
  while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != (STM32_SW << RCC_CFGR_SWS_Pos))
 800445c:	6913      	ldr	r3, [r2, #16]
 800445e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004462:	2b18      	cmp	r3, #24
 8004464:	d1fa      	bne.n	800445c <__early_init+0x36c>
  RCC_C1->AHB2ENR |= mask;
 8004466:	4b11      	ldr	r3, [pc, #68]	@ (80044ac <__early_init+0x3bc>)
 8004468:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800446a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800446e:	63da      	str	r2, [r3, #60]	@ 0x3c
    RCC_C1->AHB2LPENR |= mask;
 8004470:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004472:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004476:	665a      	str	r2, [r3, #100]	@ 0x64
  (void)RCC_C1->AHB2LPENR;
 8004478:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
  RCC_C1->AHB2ENR |= mask;
 800447a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800447c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004480:	63da      	str	r2, [r3, #60]	@ 0x3c
    RCC_C1->AHB2LPENR |= mask;
 8004482:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004484:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004488:	665a      	str	r2, [r3, #100]	@ 0x64
  (void)RCC_C1->AHB2LPENR;
 800448a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
  RCC_C1->AHB2ENR |= mask;
 800448c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800448e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004492:	63da      	str	r2, [r3, #60]	@ 0x3c
    RCC_C1->AHB2LPENR |= mask;
 8004494:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004496:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800449a:	665a      	str	r2, [r3, #100]	@ 0x64
  (void)RCC_C1->AHB2LPENR;
 800449c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 800449e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044a2:	bf00      	nop
 80044a4:	52002000 	.word	0x52002000
 80044a8:	58024400 	.word	0x58024400
 80044ac:	58024500 	.word	0x58024500

080044b0 <chSchDoPreemption>:
 *
 * @special
 */
void chSchDoPreemption(void) {
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
 80044b0:	4b0d      	ldr	r3, [pc, #52]	@ (80044e8 <chSchDoPreemption+0x38>)
  tp->state = CH_STATE_READY;
 80044b2:	f04f 0c00 	mov.w	ip, #0
  ch_priority_queue_t *p = pqp->next;
 80044b6:	6818      	ldr	r0, [r3, #0]
  thread_t *otp = __instance_get_currthread(oip);
 80044b8:	68d9      	ldr	r1, [r3, #12]
  pqp->next       = p->next;
 80044ba:	6802      	ldr	r2, [r0, #0]
void chSchDoPreemption(void) {
 80044bc:	b410      	push	{r4}
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
 80044be:	2401      	movs	r4, #1
  pqp->next->prev = pqp;
 80044c0:	6053      	str	r3, [r2, #4]
  pqp->next       = p->next;
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	7704      	strb	r4, [r0, #28]
  __instance_set_currthread(oip, ntp);
 80044c6:	60d8      	str	r0, [r3, #12]
  } while (unlikely(pqp->prio > p->prio));
 80044c8:	688c      	ldr	r4, [r1, #8]
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 80044ca:	690b      	ldr	r3, [r1, #16]
  tp->state = CH_STATE_READY;
 80044cc:	f881 c01c 	strb.w	ip, [r1, #28]
    pqp = pqp->next;
 80044d0:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio > p->prio));
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	42a2      	cmp	r2, r4
 80044d6:	d8fb      	bhi.n	80044d0 <chSchDoPreemption+0x20>
  p->prev       = pqp->prev;
 80044d8:	685a      	ldr	r2, [r3, #4]
  otp = __sch_ready_ahead(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
}
 80044da:	bc10      	pop	{r4}
 80044dc:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 80044e0:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 80044e2:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 80044e4:	f7fb bf6c 	b.w	80003c0 <__port_switch>
 80044e8:	240004f8 	.word	0x240004f8
 80044ec:	00000000 	.word	0x00000000

080044f0 <chThdExit>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80044f0:	2330      	movs	r3, #48	@ 0x30
void chThdExit(msg_t msg) {
 80044f2:	b570      	push	{r4, r5, r6, lr}
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004564 <chThdExit+0x74>)
 80044fa:	68d9      	ldr	r1, [r3, #12]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 80044fc:	f101 0c38 	add.w	ip, r1, #56	@ 0x38
  return (bool)(lp->next != lp);
 8004500:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
  currtp->u.exitcode = msg;
 8004502:	6348      	str	r0, [r1, #52]	@ 0x34
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004504:	4562      	cmp	r2, ip
 8004506:	d110      	bne.n	800452a <chThdExit+0x3a>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8004508:	7f8a      	ldrb	r2, [r1, #30]
 800450a:	b31a      	cbz	r2, 8004554 <chThdExit+0x64>
  ch_priority_queue_t *p = pqp->next;
 800450c:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 800450e:	220f      	movs	r2, #15
  ntp->state = CH_STATE_CURRENT;
 8004510:	f04f 0c01 	mov.w	ip, #1
  otp->state = newstate;
 8004514:	770a      	strb	r2, [r1, #28]
  pqp->next       = p->next;
 8004516:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8004518:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 800451a:	f880 c01c 	strb.w	ip, [r0, #28]
  pqp->next       = p->next;
 800451e:	601a      	str	r2, [r3, #0]
  __instance_set_currthread(oip, ntp);
 8004520:	60d8      	str	r0, [r3, #12]
}
 8004522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chSysSwitch(ntp, otp);
 8004526:	f7fb bf4b 	b.w	80003c0 <__port_switch>
  tp->state = CH_STATE_READY;
 800452a:	f04f 0e00 	mov.w	lr, #0
  lp->next = p->next;
 800452e:	6814      	ldr	r4, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004530:	6910      	ldr	r0, [r2, #16]
  } while (unlikely(pqp->prio >= p->prio));
 8004532:	6896      	ldr	r6, [r2, #8]
  lp->next = p->next;
 8004534:	638c      	str	r4, [r1, #56]	@ 0x38
  tp->state = CH_STATE_READY;
 8004536:	f882 e01c 	strb.w	lr, [r2, #28]
    pqp = pqp->next;
 800453a:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800453c:	6885      	ldr	r5, [r0, #8]
 800453e:	42b5      	cmp	r5, r6
 8004540:	d2fb      	bcs.n	800453a <chThdExit+0x4a>
  p->prev       = pqp->prev;
 8004542:	6845      	ldr	r5, [r0, #4]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004544:	4564      	cmp	r4, ip
  p->next       = pqp;
 8004546:	6010      	str	r0, [r2, #0]
  p->prev       = pqp->prev;
 8004548:	6055      	str	r5, [r2, #4]
  p->prev->next = p;
 800454a:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 800454c:	6042      	str	r2, [r0, #4]
 800454e:	d0db      	beq.n	8004508 <chThdExit+0x18>
 8004550:	4622      	mov	r2, r4
 8004552:	e7ec      	b.n	800452e <chThdExit+0x3e>
    if (currtp->dispose == NULL) {
 8004554:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004556:	2a00      	cmp	r2, #0
 8004558:	d1d8      	bne.n	800450c <chThdExit+0x1c>
  p->prev->next = p->next;
 800455a:	e9d1 2009 	ldrd	r2, r0, [r1, #36]	@ 0x24
 800455e:	6002      	str	r2, [r0, #0]
  p->next->prev = p->prev;
 8004560:	6050      	str	r0, [r2, #4]
  return p;
 8004562:	e7d3      	b.n	800450c <chThdExit+0x1c>
 8004564:	240004f8 	.word	0x240004f8
	...

08004570 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004570:	f3ef 8309 	mrs	r3, PSP
  psp += sizeof (struct port_extctx);
 8004574:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004576:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800457a:	2300      	movs	r3, #0
 800457c:	f383 8811 	msr	BASEPRI, r3
}
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
	...

08004590 <main>:
  RCC->AHB1RSTR |= mask;
 8004590:	4bd1      	ldr	r3, [pc, #836]	@ (80048d8 <main+0x348>)
  RCC->AHB2RSTR &= ~mask;
 8004592:	2100      	movs	r1, #0
  RCC->AHB2RSTR |= mask;
 8004594:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  RCC->AHB3RSTR |= mask;
 8004598:	4cd0      	ldr	r4, [pc, #832]	@ (80048dc <main+0x34c>)
  RCC->AHB1RSTR |= mask;
 800459a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  RCC->AHB3RSTR &= ~mask;
 800459e:	4dd0      	ldr	r5, [pc, #832]	@ (80048e0 <main+0x350>)
  RCC->AHB1RSTR |= mask;
 80045a0:	f062 4200 	orn	r2, r2, #2147483648	@ 0x80000000
      dacPutChannelX(&DACD2, 0, val);
      break;
  }
}

int main(void) {
 80045a4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80045a8:	b089      	sub	sp, #36	@ 0x24
 80045aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  RCC->AHB1RSTR &= ~mask;
 80045ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80045b2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80045b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  (void)RCC->AHB1RSTR;
 80045ba:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  RCC->AHB2RSTR |= mask;
 80045be:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80045c2:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  RCC->AHB2RSTR &= ~mask;
 80045c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80045ca:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  (void)RCC->AHB2RSTR;
 80045ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
  RCC->AHB3RSTR |= mask;
 80045d2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80045d4:	4322      	orrs	r2, r4
 80045d6:	67da      	str	r2, [r3, #124]	@ 0x7c
  RCC->AHB3RSTR &= ~mask;
 80045d8:	6fdc      	ldr	r4, [r3, #124]	@ 0x7c
  RCC->AHB4RSTR |= mask;
 80045da:	4ac2      	ldr	r2, [pc, #776]	@ (80048e4 <main+0x354>)
  RCC->AHB3RSTR &= ~mask;
 80045dc:	402c      	ands	r4, r5
 80045de:	67dc      	str	r4, [r3, #124]	@ 0x7c
  (void)RCC->AHB3RSTR;
 80045e0:	6fdc      	ldr	r4, [r3, #124]	@ 0x7c
  RCC->AHB4RSTR |= mask;
 80045e2:	f8d3 4088 	ldr.w	r4, [r3, #136]	@ 0x88
 80045e6:	4322      	orrs	r2, r4
 * @init
 */
void bdmaInit(void) {
  unsigned i;

  bdma.allocated_mask = 0U;
 80045e8:	4cbf      	ldr	r4, [pc, #764]	@ (80048e8 <main+0x358>)
 80045ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  RCC->AHB4RSTR &= ~mask;
 80045ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80045f2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80045f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  (void)RCC->AHB4RSTR;
 80045fa:	4abc      	ldr	r2, [pc, #752]	@ (80048ec <main+0x35c>)
 80045fc:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
  RCC->APB1LRSTR |= mask;
 8004600:	f8d3 5090 	ldr.w	r5, [r3, #144]	@ 0x90
 8004604:	f8c3 0090 	str.w	r0, [r3, #144]	@ 0x90
  RCC->APB1LRSTR &= ~mask;
 8004608:	f8d3 5090 	ldr.w	r5, [r3, #144]	@ 0x90
 800460c:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
  (void)RCC->APB1LRSTR;
 8004610:	f8d3 5090 	ldr.w	r5, [r3, #144]	@ 0x90
  RCC->APB1HRSTR |= mask;
 8004614:	f8d3 5094 	ldr.w	r5, [r3, #148]	@ 0x94
 8004618:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  RCC->APB1HRSTR &= ~mask;
 800461c:	f8d3 5094 	ldr.w	r5, [r3, #148]	@ 0x94
 8004620:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
  (void)RCC->APB1HRSTR;
 8004624:	f8d3 5094 	ldr.w	r5, [r3, #148]	@ 0x94
  RCC->APB2RSTR |= mask;
 8004628:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 800462c:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
  RCC->APB2RSTR &= ~mask;
 8004630:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 8004634:	f8c3 1098 	str.w	r1, [r3, #152]	@ 0x98
  (void)RCC->APB2RSTR;
 8004638:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
  RCC->APB3RSTR |= mask;
 800463c:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 8004640:	f8c3 008c 	str.w	r0, [r3, #140]	@ 0x8c
  RCC->APB3RSTR &= ~mask;
 8004644:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 8004648:	f8c3 108c 	str.w	r1, [r3, #140]	@ 0x8c
  (void)RCC->APB3RSTR;
 800464c:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
  RCC->APB4RSTR |= mask;
 8004650:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 8004654:	f8c3 009c 	str.w	r0, [r3, #156]	@ 0x9c
  RCC->APB4RSTR &= ~mask;
 8004658:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800465c:	f8c3 109c 	str.w	r1, [r3, #156]	@ 0x9c
  (void)RCC->APB4RSTR;
 8004660:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004664:	4623      	mov	r3, r4
 8004666:	6021      	str	r1, [r4, #0]
  for (i = 0; i < STM32_BDMA_STREAMS; i++) {
 8004668:	3440      	adds	r4, #64	@ 0x40
    _stm32_bdma_streams[i].channel->CCR = 0U;
 800466a:	6850      	ldr	r0, [r2, #4]
  for (i = 0; i < STM32_BDMA_STREAMS; i++) {
 800466c:	3214      	adds	r2, #20
    _stm32_bdma_streams[i].channel->CCR = 0U;
 800466e:	6001      	str	r1, [r0, #0]
    bdma.streams[i].func  = NULL;
 8004670:	6059      	str	r1, [r3, #4]
    bdma.streams[i].param = NULL;
 8004672:	f843 1f08 	str.w	r1, [r3, #8]!
  for (i = 0; i < STM32_BDMA_STREAMS; i++) {
 8004676:	429c      	cmp	r4, r3
 8004678:	d1f7      	bne.n	800466a <main+0xda>
  }
  BDMA->IFCR = 0xFFFFFFFFU;
 800467a:	4b9d      	ldr	r3, [pc, #628]	@ (80048f0 <main+0x360>)
 800467c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma.allocated_mask = 0U;
 8004680:	2200      	movs	r2, #0
 8004682:	489c      	ldr	r0, [pc, #624]	@ (80048f4 <main+0x364>)
 8004684:	605c      	str	r4, [r3, #4]
 8004686:	4c9c      	ldr	r4, [pc, #624]	@ (80048f8 <main+0x368>)
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8004688:	4613      	mov	r3, r2
  dma.allocated_mask = 0U;
 800468a:	f840 1b04 	str.w	r1, [r0], #4
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 800468e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 8004692:	600b      	str	r3, [r1, #0]
    dma.streams[i].func = NULL;
 8004694:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8004698:	3204      	adds	r2, #4
 800469a:	2a40      	cmp	r2, #64	@ 0x40
 800469c:	d1f7      	bne.n	800468e <main+0xfe>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 800469e:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80046a2:	4896      	ldr	r0, [pc, #600]	@ (80048fc <main+0x36c>)
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80046a4:	4a96      	ldr	r2, [pc, #600]	@ (8004900 <main+0x370>)
 80046a6:	2490      	movs	r4, #144	@ 0x90
 80046a8:	f8c0 b008 	str.w	fp, [r0, #8]
 80046ac:	f04f 08c0 	mov.w	r8, #192	@ 0xc0
  DMA1->HIFCR = 0xFFFFFFFFU;
 80046b0:	f8c0 b00c 	str.w	fp, [r0, #12]
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80046b4:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
  DMA2->LIFCR = 0xFFFFFFFFU;
 80046b8:	4992      	ldr	r1, [pc, #584]	@ (8004904 <main+0x374>)
 80046ba:	f04f 0980 	mov.w	r9, #128	@ 0x80
  dacp->state = DAC_STOP;
 80046be:	4e92      	ldr	r6, [pc, #584]	@ (8004908 <main+0x378>)
 80046c0:	f04f 0e01 	mov.w	lr, #1
 80046c4:	f8c1 b008 	str.w	fp, [r1, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 80046c8:	f8c1 b00c 	str.w	fp, [r1, #12]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80046cc:	2170      	movs	r1, #112	@ 0x70
 80046ce:	f882 437a 	strb.w	r4, [r2, #890]	@ 0x37a
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80046d2:	f8c2 018c 	str.w	r0, [r2, #396]	@ 0x18c
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80046d6:	60d0      	str	r0, [r2, #12]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80046d8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80046dc:	f882 131c 	strb.w	r1, [r2, #796]	@ 0x31c
 80046e0:	4d8a      	ldr	r5, [pc, #552]	@ (800490c <main+0x37c>)
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80046e2:	f8c2 0180 	str.w	r0, [r2, #384]	@ 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80046e6:	6010      	str	r0, [r2, #0]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80046e8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80046ec:	f882 1336 	strb.w	r1, [r2, #822]	@ 0x336
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80046f0:	f8c2 0184 	str.w	r0, [r2, #388]	@ 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80046f4:	6050      	str	r0, [r2, #4]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 80046f6:	6233      	str	r3, [r6, #32]
  DACD1.dma = NULL;
 80046f8:	62f3      	str	r3, [r6, #44]	@ 0x2c
  sdp->vmt = &vmt;
 80046fa:	f8df c214 	ldr.w	ip, [pc, #532]	@ 8004910 <main+0x380>
 80046fe:	4c85      	ldr	r4, [pc, #532]	@ (8004914 <main+0x384>)
  DACD1.params  = &dac1_ch1_params;
 8004700:	4f85      	ldr	r7, [pc, #532]	@ (8004918 <main+0x388>)
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state           = SPI_STOP;
 8004702:	4886      	ldr	r0, [pc, #536]	@ (800491c <main+0x38c>)
 8004704:	4986      	ldr	r1, [pc, #536]	@ (8004920 <main+0x390>)
  RCC_C1->APB1LENR |= mask;
 8004706:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8004924 <main+0x394>
  dacp->thread = NULL;
 800470a:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800470e:	e9c5 3304 	strd	r3, r3, [r5, #16]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004712:	f882 8327 	strb.w	r8, [r2, #807]	@ 0x327
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004716:	f8c2 9184 	str.w	r9, [r2, #388]	@ 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800471a:	f8c2 9004 	str.w	r9, [r2, #4]
 800471e:	46e1      	mov	r9, ip
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004720:	f882 8335 	strb.w	r8, [r2, #821]	@ 0x335
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004724:	f44f 1800 	mov.w	r8, #2097152	@ 0x200000
 8004728:	f8c2 8184 	str.w	r8, [r2, #388]	@ 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800472c:	f8c2 8004 	str.w	r8, [r2, #4]
  qp->next = qp;
 8004730:	f106 0818 	add.w	r8, r6, #24
 8004734:	62b7      	str	r7, [r6, #40]	@ 0x28
  dacp->state = DAC_STOP;
 8004736:	f886 e000 	strb.w	lr, [r6]
 800473a:	f885 e000 	strb.w	lr, [r5]
  qp->prev = qp;
 800473e:	e9c6 8806 	strd	r8, r8, [r6, #24]
  qp->next = qp;
 8004742:	f105 0818 	add.w	r8, r5, #24
 8004746:	4e78      	ldr	r6, [pc, #480]	@ (8004928 <main+0x398>)
  qp->prev = qp;
 8004748:	e9c5 8806 	strd	r8, r8, [r5, #24]
 800474c:	46a0      	mov	r8, r4
 800474e:	622b      	str	r3, [r5, #32]
 8004750:	f849 6b04 	str.w	r6, [r9], #4
 8004754:	f848 6b04 	str.w	r6, [r8], #4
  qp->next = qp;
 8004758:	f10c 060c 	add.w	r6, ip, #12
  esp->next = (event_listener_t *)esp;
 800475c:	f8cc 9004 	str.w	r9, [ip, #4]
  oqp->q_counter = size;
 8004760:	f04f 0910 	mov.w	r9, #16
 8004764:	f8c4 8004 	str.w	r8, [r4, #4]
  DACD2.dma = NULL;
 8004768:	62eb      	str	r3, [r5, #44]	@ 0x2c
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 800476a:	f8df 81c0 	ldr.w	r8, [pc, #448]	@ 800492c <main+0x39c>
  iqp->q_counter = 0;
 800476e:	f8cc 3014 	str.w	r3, [ip, #20]
  sdp->state = SD_STOP;
 8004772:	f88c e008 	strb.w	lr, [ip, #8]
  oqp->q_counter = size;
 8004776:	f8cc 9038 	str.w	r9, [ip, #56]	@ 0x38
  oqp->q_link    = link;
 800477a:	f8cc c050 	str.w	ip, [ip, #80]	@ 0x50
 800477e:	f888 e000 	strb.w	lr, [r8]
  gptp->config = NULL;
 8004782:	f8c8 3004 	str.w	r3, [r8, #4]
 8004786:	f884 e008 	strb.w	lr, [r4, #8]
  qp->prev = qp;
 800478a:	e9cc 6603 	strd	r6, r6, [ip, #12]
  iqp->q_buffer  = bp;
 800478e:	4e68      	ldr	r6, [pc, #416]	@ (8004930 <main+0x3a0>)
 8004790:	f8cc 6018 	str.w	r6, [ip, #24]
  iqp->q_wrptr   = bp;
 8004794:	e9cc 6608 	strd	r6, r6, [ip, #32]
  iqp->q_top     = bp + size;
 8004798:	3610      	adds	r6, #16
 800479a:	f8cc 601c 	str.w	r6, [ip, #28]
  qp->next = qp;
 800479e:	f10c 0630 	add.w	r6, ip, #48	@ 0x30
  qp->prev = qp;
 80047a2:	e9cc 660c 	strd	r6, r6, [ip, #48]	@ 0x30
  oqp->q_buffer  = bp;
 80047a6:	4e63      	ldr	r6, [pc, #396]	@ (8004934 <main+0x3a4>)
 80047a8:	f8cc 603c 	str.w	r6, [ip, #60]	@ 0x3c
  oqp->q_wrptr   = bp;
 80047ac:	e9cc 6611 	strd	r6, r6, [ip, #68]	@ 0x44
  oqp->q_top     = bp + size;
 80047b0:	444e      	add	r6, r9
 80047b2:	f8cc 6040 	str.w	r6, [ip, #64]	@ 0x40
  SD3.clock = STM32_USART3CLK;
 80047b6:	4e60      	ldr	r6, [pc, #384]	@ (8004938 <main+0x3a8>)
 80047b8:	f8cc 6058 	str.w	r6, [ip, #88]	@ 0x58
  qp->next = qp;
 80047bc:	f104 060c 	add.w	r6, r4, #12
 80047c0:	4637      	mov	r7, r6
 80047c2:	60e6      	str	r6, [r4, #12]
  DACD2.params  = &dac1_ch2_params;
 80047c4:	4e5d      	ldr	r6, [pc, #372]	@ (800493c <main+0x3ac>)
 80047c6:	62ae      	str	r6, [r5, #40]	@ 0x28
  GPTD6.tim = STM32_TIM6;
 80047c8:	4d5d      	ldr	r5, [pc, #372]	@ (8004940 <main+0x3b0>)
  SD5.clock = STM32_UART5CLK;
 80047ca:	4e5b      	ldr	r6, [pc, #364]	@ (8004938 <main+0x3a8>)
 80047cc:	f8c8 500c 	str.w	r5, [r8, #12]
  oqp->q_notify  = onfy;
 80047d0:	4d5c      	ldr	r5, [pc, #368]	@ (8004944 <main+0x3b4>)
 80047d2:	f8cc 504c 	str.w	r5, [ip, #76]	@ 0x4c
  SD3.usart = USART3;
 80047d6:	4d5c      	ldr	r5, [pc, #368]	@ (8004948 <main+0x3b8>)
  iqp->q_link    = link;
 80047d8:	e9cc 3c0a 	strd	r3, ip, [ip, #40]	@ 0x28
 80047dc:	f8cc 5054 	str.w	r5, [ip, #84]	@ 0x54
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80047e0:	f04f 0c08 	mov.w	ip, #8
  qp->prev = qp;
 80047e4:	6127      	str	r7, [r4, #16]
  SPID6.tx.bdma   = NULL;
  SPID6.rxdmamode = STM32_BDMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
                    STM32_BDMA_CR_DIR_P2M |
                    STM32_BDMA_CR_TCIE |
                    STM32_BDMA_CR_TEIE;
  SPID6.txdmamode = STM32_BDMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
 80047e6:	f241 070a 	movw	r7, #4106	@ 0x100a
  SD5.clock = STM32_UART5CLK;
 80047ea:	65a6      	str	r6, [r4, #88]	@ 0x58
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80047ec:	f06f 065f 	mvn.w	r6, #95	@ 0x5f
  iqp->q_buffer  = bp;
 80047f0:	4d56      	ldr	r5, [pc, #344]	@ (800494c <main+0x3bc>)
  iqp->q_counter = 0;
 80047f2:	6163      	str	r3, [r4, #20]
 80047f4:	f880 e000 	strb.w	lr, [r0]
  iqp->q_buffer  = bp;
 80047f8:	61a5      	str	r5, [r4, #24]
  oqp->q_counter = size;
 80047fa:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
 80047fe:	f882 6323 	strb.w	r6, [r2, #803]	@ 0x323
 8004802:	6143      	str	r3, [r0, #20]
  SPID1.is_bdma   = false;
 8004804:	f880 3020 	strb.w	r3, [r0, #32]
  oqp->q_link    = link;
 8004808:	6524      	str	r4, [r4, #80]	@ 0x50
  iqp->q_wrptr   = bp;
 800480a:	e9c4 5508 	strd	r5, r5, [r4, #32]
  iqp->q_top     = bp + size;
 800480e:	444d      	add	r5, r9
 8004810:	61e5      	str	r5, [r4, #28]
  qp->next = qp;
 8004812:	f104 0530 	add.w	r5, r4, #48	@ 0x30
  qp->prev = qp;
 8004816:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
  oqp->q_buffer  = bp;
 800481a:	4d4d      	ldr	r5, [pc, #308]	@ (8004950 <main+0x3c0>)
 800481c:	63e5      	str	r5, [r4, #60]	@ 0x3c
  oqp->q_wrptr   = bp;
 800481e:	e9c4 5511 	strd	r5, r5, [r4, #68]	@ 0x44
  oqp->q_top     = bp + size;
 8004822:	444d      	add	r5, r9
 8004824:	6425      	str	r5, [r4, #64]	@ 0x40
  qp->next = qp;
 8004826:	f100 050c 	add.w	r5, r0, #12
  qp->prev = qp;
 800482a:	e9c0 5503 	strd	r5, r5, [r0, #12]
  oqp->q_notify  = onfy;
 800482e:	4d49      	ldr	r5, [pc, #292]	@ (8004954 <main+0x3c4>)
  spip->config          = NULL;
#if SPI_USE_SYNCHRONIZATION == TRUE
  spip->sync_transfer   = NULL;
 8004830:	e9c0 3301 	strd	r3, r3, [r0, #4]
  SPID1.tx.dma    = NULL;
 8004834:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  iqp->q_link    = link;
 8004838:	e9c4 340a 	strd	r3, r4, [r4, #40]	@ 0x28
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800483c:	f8c2 c184 	str.w	ip, [r2, #388]	@ 0x184
  oqp->q_notify  = onfy;
 8004840:	64e5      	str	r5, [r4, #76]	@ 0x4c
  SD5.usart = UART5;
 8004842:	4d45      	ldr	r5, [pc, #276]	@ (8004958 <main+0x3c8>)
 8004844:	6565      	str	r5, [r4, #84]	@ 0x54
  SPID1.spi       = SPI1;
 8004846:	f505 4560 	add.w	r5, r5, #57344	@ 0xe000
 800484a:	61c5      	str	r5, [r0, #28]
  SPID1.rxdmamode = STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
 800484c:	4d43      	ldr	r5, [pc, #268]	@ (800495c <main+0x3cc>)
 800484e:	62c5      	str	r5, [r0, #44]	@ 0x2c
  SPID1.txdmamode = STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
 8004850:	3530      	adds	r5, #48	@ 0x30
 8004852:	6305      	str	r5, [r0, #48]	@ 0x30
 8004854:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004858:	f8c2 c004 	str.w	ip, [r2, #4]
  spip->state           = SPI_STOP;
 800485c:	f881 e000 	strb.w	lr, [r1]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004860:	f882 6356 	strb.w	r6, [r2, #854]	@ 0x356
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004864:	f8c2 0188 	str.w	r0, [r2, #392]	@ 0x188
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004868:	6090      	str	r0, [r2, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800486a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800486e:	f8da 2048 	ldr.w	r2, [sl, #72]	@ 0x48
 8004872:	614b      	str	r3, [r1, #20]
 8004874:	ea42 020e 	orr.w	r2, r2, lr
  SPID6.is_bdma   = true;
 8004878:	f881 e020 	strb.w	lr, [r1, #32]
  ST_ENABLE_STOP();
 800487c:	4d38      	ldr	r5, [pc, #224]	@ (8004960 <main+0x3d0>)
 */
void chSysInit(void) {
  unsigned i;

  /* System object initialization.*/
  ch_system.state = ch_sys_initializing;
 800487e:	4e39      	ldr	r6, [pc, #228]	@ (8004964 <main+0x3d4>)
  spip->sync_transfer   = NULL;
 8004880:	e9c1 3301 	strd	r3, r3, [r1, #4]
  SPID6.tx.bdma   = NULL;
 8004884:	e9c1 3309 	strd	r3, r3, [r1, #36]	@ 0x24
 8004888:	f8ca 2048 	str.w	r2, [sl, #72]	@ 0x48
    RCC_C1->APB1LLPENR |= mask;
 800488c:	f8da 2070 	ldr.w	r2, [sl, #112]	@ 0x70
 8004890:	ea42 020e 	orr.w	r2, r2, lr
 8004894:	f8ca 2070 	str.w	r2, [sl, #112]	@ 0x70
  (void)RCC_C1->APB1LLPENR;
 8004898:	f8da 2070 	ldr.w	r2, [sl, #112]	@ 0x70
  qp->next = qp;
 800489c:	f101 020c 	add.w	r2, r1, #12
  qp->prev = qp;
 80048a0:	e9c1 2203 	strd	r2, r2, [r1, #12]
 80048a4:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 80048a6:	ea42 020e 	orr.w	r2, r2, lr
 80048aa:	63ea      	str	r2, [r5, #60]	@ 0x3c
}
 80048ac:	2504      	movs	r5, #4
  SPID6.spi       = SPI6;
 80048ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004968 <main+0x3d8>)
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 80048b0:	60b3      	str	r3, [r6, #8]
 80048b2:	61ca      	str	r2, [r1, #28]
  SPID6.txdmamode = STM32_BDMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
 80048b4:	f241 0218 	movw	r2, #4120	@ 0x1018
 80048b8:	e9c1 720b 	strd	r7, r2, [r1, #44]	@ 0x2c
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80048bc:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
  tmp->cumulative = (rttime_t)0;
 80048c0:	2100      	movs	r1, #0
 80048c2:	6282      	str	r2, [r0, #40]	@ 0x28
  tmp->best       = (rtcnt_t)-1;
 80048c4:	465a      	mov	r2, fp
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80048c6:	f8c0 b02c 	str.w	fp, [r0, #44]	@ 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80048ca:	6183      	str	r3, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80048cc:	6343      	str	r3, [r0, #52]	@ 0x34
  STM32_ST_TIM->DIER   = 0;
 80048ce:	60c3      	str	r3, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 80048d0:	6043      	str	r3, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80048d2:	f8c0 e014 	str.w	lr, [r0, #20]
 80048d6:	e049      	b.n	800496c <main+0x3dc>
 80048d8:	58024400 	.word	0x58024400
 80048dc:	7fffefff 	.word	0x7fffefff
 80048e0:	80001000 	.word	0x80001000
 80048e4:	fffff800 	.word	0xfffff800
 80048e8:	240003e4 	.word	0x240003e4
 80048ec:	080051b0 	.word	0x080051b0
 80048f0:	58025400 	.word	0x58025400
 80048f4:	24000360 	.word	0x24000360
 80048f8:	08005250 	.word	0x08005250
 80048fc:	40020000 	.word	0x40020000
 8004900:	e000e100 	.word	0xe000e100
 8004904:	40020400 	.word	0x40020400
 8004908:	240002a4 	.word	0x240002a4
 800490c:	24000274 	.word	0x24000274
 8004910:	24000498 	.word	0x24000498
 8004914:	24000438 	.word	0x24000438
 8004918:	08005370 	.word	0x08005370
 800491c:	24000324 	.word	0x24000324
 8004920:	240002e8 	.word	0x240002e8
 8004924:	58024500 	.word	0x58024500
 8004928:	08005390 	.word	0x08005390
 800492c:	24000428 	.word	0x24000428
 8004930:	24000130 	.word	0x24000130
 8004934:	24000120 	.word	0x24000120
 8004938:	07270e00 	.word	0x07270e00
 800493c:	08005350 	.word	0x08005350
 8004940:	40001000 	.word	0x40001000
 8004944:	08002261 	.word	0x08002261
 8004948:	40004800 	.word	0x40004800
 800494c:	24000110 	.word	0x24000110
 8004950:	24000100 	.word	0x24000100
 8004954:	08002271 	.word	0x08002271
 8004958:	40005000 	.word	0x40005000
 800495c:	00010016 	.word	0x00010016
 8004960:	5c001000 	.word	0x5c001000
 8004964:	240002dc 	.word	0x240002dc
 8004968:	58001400 	.word	0x58001400
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800496c:	f8c0 e000 	str.w	lr, [r0]
  tmp->cumulative = (rttime_t)0;
 8004970:	2000      	movs	r0, #0
 8004972:	f886 e000 	strb.w	lr, [r6]
  tmp->worst      = (rtcnt_t)0;
 8004976:	9303      	str	r3, [sp, #12]
  tmp->n          = (ucnt_t)0;
 8004978:	9305      	str	r3, [sp, #20]
  tmp->cumulative = (rttime_t)0;
 800497a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 800497e:	a802      	add	r0, sp, #8
 8004980:	9202      	str	r2, [sp, #8]
 8004982:	f7fd fc85 	bl	8002290 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8004986:	f7fd fc8b 	bl	80022a0 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 800498a:	3d01      	subs	r5, #1
    chTMStopMeasurementX(&tm);
 800498c:	9a02      	ldr	r2, [sp, #8]
  } while (i > 0U);
 800498e:	d1f6      	bne.n	800497e <main+0x3ee>
  ch_memcore.basemem = __heap_base__;
 8004990:	4fcd      	ldr	r7, [pc, #820]	@ (8004cc8 <main+0x738>)
 8004992:	f04f 0830 	mov.w	r8, #48	@ 0x30
 8004996:	48cd      	ldr	r0, [pc, #820]	@ (8004ccc <main+0x73c>)
  ch_memcore.topmem  = __heap_end__;
 8004998:	4bcd      	ldr	r3, [pc, #820]	@ (8004cd0 <main+0x740>)
  tcp->offset = tm.best;
 800499a:	60b2      	str	r2, [r6, #8]
  qp->next = qp;
 800499c:	4acd      	ldr	r2, [pc, #820]	@ (8004cd4 <main+0x744>)
  ch_memcore.basemem = __heap_base__;
 800499e:	6007      	str	r7, [r0, #0]
  ch_memcore.topmem  = __heap_end__;
 80049a0:	6043      	str	r3, [r0, #4]
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 80049a2:	f102 0010 	add.w	r0, r2, #16
 *
 * @notapi
 */
void __heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80049a6:	49cc      	ldr	r1, [pc, #816]	@ (8004cd8 <main+0x748>)
 */
void chCoreGetStatusX(memory_area_t *map) {

  map->base = ch_memcore.basemem;
  /*lint -save -e9033 [10.8] The cast is safe.*/
  map->size = (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 80049a8:	1bdb      	subs	r3, r3, r7
 80049aa:	6110      	str	r0, [r2, #16]
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
  mp->provider = provider;
 80049ac:	48cb      	ldr	r0, [pc, #812]	@ (8004cdc <main+0x74c>)
 80049ae:	608b      	str	r3, [r1, #8]
 80049b0:	f101 0314 	add.w	r3, r1, #20
 80049b4:	6210      	str	r0, [r2, #32]
 80049b6:	6390      	str	r0, [r2, #56]	@ 0x38
 80049b8:	f102 0024 	add.w	r0, r2, #36	@ 0x24
  map->base = ch_memcore.basemem;
 80049bc:	604f      	str	r7, [r1, #4]
  mp->align = align;
 80049be:	2704      	movs	r7, #4
 80049c0:	6250      	str	r0, [r2, #36]	@ 0x24
 80049c2:	f102 0028 	add.w	r0, r2, #40	@ 0x28
 80049c6:	61cd      	str	r5, [r1, #28]
 80049c8:	6290      	str	r0, [r2, #40]	@ 0x28
 80049ca:	f102 003c 	add.w	r0, r2, #60	@ 0x3c
 80049ce:	6095      	str	r5, [r2, #8]
 80049d0:	63d0      	str	r0, [r2, #60]	@ 0x3c
 80049d2:	f102 0040 	add.w	r0, r2, #64	@ 0x40
  mp->next = NULL;
 80049d6:	6155      	str	r5, [r2, #20]
 80049d8:	6410      	str	r0, [r2, #64]	@ 0x40
 80049da:	f102 0044 	add.w	r0, r2, #68	@ 0x44
 80049de:	62d5      	str	r5, [r2, #44]	@ 0x2c
 80049e0:	6450      	str	r0, [r2, #68]	@ 0x44
 80049e2:	48bf      	ldr	r0, [pc, #764]	@ (8004ce0 <main+0x750>)
  mp->align = align;
 80049e4:	61d7      	str	r7, [r2, #28]
 80049e6:	6008      	str	r0, [r1, #0]
 80049e8:	6357      	str	r7, [r2, #52]	@ 0x34
  qp->prev = qp;
 80049ea:	e9c1 3305 	strd	r3, r3, [r1, #20]
  chCoreGetStatusX(&default_heap.area);
  H_FREE_NEXT(&default_heap.header) = NULL;
  H_FREE_PAGES(&default_heap.header) = 0;
 80049ee:	e9c1 5503 	strd	r5, r5, [r1, #12]
  mp->object_size = size;
 80049f2:	2114      	movs	r1, #20
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 80049f4:	4bbb      	ldr	r3, [pc, #748]	@ (8004ce4 <main+0x754>)
 80049f6:	6191      	str	r1, [r2, #24]
 80049f8:	211c      	movs	r1, #28
 80049fa:	6073      	str	r3, [r6, #4]
 80049fc:	6311      	str	r1, [r2, #48]	@ 0x30

  /* Core associated to this instance.*/
  oip->core_id = core_id;
 80049fe:	639d      	str	r5, [r3, #56]	@ 0x38
 8004a00:	e9c2 2200 	strd	r2, r2, [r2]

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 8004a04:	4ab8      	ldr	r2, [pc, #736]	@ (8004ce8 <main+0x758>)
 8004a06:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a08:	f388 8811 	msr	BASEPRI, r8
  __ASM volatile ("cpsie i" : : : "memory");
 8004a0c:	b662      	cpsie	i
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a0e:	49b7      	ldr	r1, [pc, #732]	@ (8004cec <main+0x75c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a10:	f64f 0eff 	movw	lr, #63743	@ 0xf8ff
  pqp->prio = (tprio_t)0;
 8004a14:	609d      	str	r5, [r3, #8]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a16:	f04f 0920 	mov.w	r9, #32
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
 8004a1a:	63dd      	str	r5, [r3, #60]	@ 0x3c
  p->prev       = qp->prev;
 8004a1c:	eb03 0a08 	add.w	sl, r3, r8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a20:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  p->prev->next = p;
 8004a24:	f103 0b44 	add.w	fp, r3, #68	@ 0x44
  reg_value  =  (reg_value                                   |
 8004a28:	48b1      	ldr	r0, [pc, #708]	@ (8004cf0 <main+0x760>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a2a:	ea0c 0c0e 	and.w	ip, ip, lr
  DWT->LAR = 0xC5ACCE55U;
 8004a2e:	4ab1      	ldr	r2, [pc, #708]	@ (8004cf4 <main+0x764>)
  *dst++ = *src++;
 8004a30:	f04f 0e02 	mov.w	lr, #2
  reg_value  =  (reg_value                                   |
 8004a34:	ea4c 0000 	orr.w	r0, ip, r0
  *dst++ = *src++;
 8004a38:	f04f 0c01 	mov.w	ip, #1
  SCB->AIRCR =  reg_value;
 8004a3c:	60c8      	str	r0, [r1, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004a3e:	f8d1 00fc 	ldr.w	r0, [r1, #252]	@ 0xfc
 8004a42:	f040 7080 	orr.w	r0, r0, #16777216	@ 0x1000000
 8004a46:	f8c1 00fc 	str.w	r0, [r1, #252]	@ 0xfc
  DWT->LAR = 0xC5ACCE55U;
 8004a4a:	48ab      	ldr	r0, [pc, #684]	@ (8004cf8 <main+0x768>)
 8004a4c:	f8c2 0fb0 	str.w	r0, [r2, #4016]	@ 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004a50:	6810      	ldr	r0, [r2, #0]
 8004a52:	f040 0001 	orr.w	r0, r0, #1
 8004a56:	6010      	str	r0, [r2, #0]
  *dst++ = *src++;
 8004a58:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a5c:	f881 901f 	strb.w	r9, [r1, #31]
  *dst++ = *src++;
 8004a60:	f04f 0903 	mov.w	r9, #3
 8004a64:	f881 8022 	strb.w	r8, [r1, #34]	@ 0x22
  *dst++ = *src++;
 8004a68:	2005      	movs	r0, #5
  *dst++ = *src++;
 8004a6a:	f8c2 5d9c 	str.w	r5, [r2, #3484]	@ 0xd9c
  *dst++ = *src++;
 8004a6e:	f8c2 5da0 	str.w	r5, [r2, #3488]	@ 0xda0
  *dst++ = *src++;
 8004a72:	f8c2 cda4 	str.w	ip, [r2, #3492]	@ 0xda4
  *dst++ = *src++;
 8004a76:	f8c2 5da8 	str.w	r5, [r2, #3496]	@ 0xda8
  *dst++ = *src++;
 8004a7a:	f8c2 edac 	str.w	lr, [r2, #3500]	@ 0xdac
  *dst++ = *src++;
 8004a7e:	f8c2 5db0 	str.w	r5, [r2, #3504]	@ 0xdb0
  *dst++ = *src++;
 8004a82:	f8c2 9db4 	str.w	r9, [r2, #3508]	@ 0xdb4
  *dst++ = *src++;
 8004a86:	f04f 0906 	mov.w	r9, #6
  *dst++ = *src++;
 8004a8a:	f8c2 5db8 	str.w	r5, [r2, #3512]	@ 0xdb8
  *dst++ = *src++;
 8004a8e:	f8c2 7d9c 	str.w	r7, [r2, #3484]	@ 0xd9c
  *dst++ = *src++;
 8004a92:	f8c2 5da0 	str.w	r5, [r2, #3488]	@ 0xda0
  *dst++ = *src++;
 8004a96:	f8c2 0da4 	str.w	r0, [r2, #3492]	@ 0xda4
  *dst++ = *src++;
 8004a9a:	f8c2 5da8 	str.w	r5, [r2, #3496]	@ 0xda8
  *dst++ = *src++;
 8004a9e:	f8c2 9dac 	str.w	r9, [r2, #3500]	@ 0xdac
  *dst++ = *src++;
 8004aa2:	f04f 0907 	mov.w	r9, #7
  *dst++ = *src++;
 8004aa6:	f8c2 5db0 	str.w	r5, [r2, #3504]	@ 0xdb0
  *dst++ = *src++;
 8004aaa:	f8c2 9db4 	str.w	r9, [r2, #3508]	@ 0xdb4
  p->prev->next = p;
 8004aae:	f103 09b8 	add.w	r9, r3, #184	@ 0xb8
  *dst++ = *src++;
 8004ab2:	f8c2 5db8 	str.w	r5, [r2, #3512]	@ 0xdb8
  mpuEnable(MPU_CTRL_PRIVDEFENA);
 8004ab6:	f8c1 0094 	str.w	r0, [r1, #148]	@ 0x94
 8004aba:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8004abc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004ac0:	624a      	str	r2, [r1, #36]	@ 0x24
  dlhp->next  = dlhp;
 8004ac2:	f103 0210 	add.w	r2, r3, #16
  qp->next = qp;
 8004ac6:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
  dlhp->prev  = dlhp;
 8004aca:	e9c3 2204 	strd	r2, r2, [r3, #16]
  dlhp->delta = (sysinterval_t)-1;
 8004ace:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff

  ch_dlist_init(&vtlp->dlist);
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 8004ad2:	e9c3 2506 	strd	r2, r5, [r3, #24]
 8004ad6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  vtlp->lastdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8004ada:	f8c3 e020 	str.w	lr, [r3, #32]
  tp->refs              = (trefs_t)1;
 8004ade:	f883 c0b2 	strb.w	ip, [r3, #178]	@ 0xb2
#if CH_CFG_USE_REGISTRY == TRUE
  REG_INSERT(oip, oip->rlist.current);
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 8004ae2:	f8a3 c0b0 	strh.w	ip, [r3, #176]	@ 0xb0
  tp->hdr.pqueue.prio   = tdp->prio;
 8004ae6:	f8c3 c04c 	str.w	ip, [r3, #76]	@ 0x4c
    tp->owner           = tdp->owner;
 8004aea:	f8c3 30a4 	str.w	r3, [r3, #164]	@ 0xa4
 8004aee:	655b      	str	r3, [r3, #84]	@ 0x54
  tp->epending          = (eventmask_t)0;
 8004af0:	e9c3 5536 	strd	r5, r5, [r3, #216]	@ 0xd8
  tp->mtxlist           = NULL;
 8004af4:	e9c3 5c23 	strd	r5, ip, [r3, #140]	@ 0x8c
 8004af8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
  p->prev       = qp->prev;
 8004afa:	f8c3 a0bc 	str.w	sl, [r3, #188]	@ 0xbc
 8004afe:	9201      	str	r2, [sp, #4]
  tp->wabase = (void *)tdp->wbase;
 8004b00:	4a7e      	ldr	r2, [pc, #504]	@ (8004cfc <main+0x76c>)
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8004b02:	9801      	ldr	r0, [sp, #4]
 8004b04:	659a      	str	r2, [r3, #88]	@ 0x58
  p->prev->next = p;
 8004b06:	f8c3 9030 	str.w	r9, [r3, #48]	@ 0x30
  qp->prev = qp;
 8004b0a:	e9c3 1134 	strd	r1, r1, [r3, #208]	@ 0xd0
  tp->hdr.pqueue.prio   = tdp->prio;
 8004b0e:	2180      	movs	r1, #128	@ 0x80
 8004b10:	f8c3 109c 	str.w	r1, [r3, #156]	@ 0x9c
  tp->realprio          = tdp->prio;
 8004b14:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
  lp->next = lp;
 8004b18:	f103 01cc 	add.w	r1, r3, #204	@ 0xcc
 8004b1c:	f8c3 10cc 	str.w	r1, [r3, #204]	@ 0xcc
    oip->rlist.current = chThdObjectInit(&oip->mainthread, &main_thd_desc);
 8004b20:	f103 0194 	add.w	r1, r3, #148	@ 0x94
 8004b24:	60d9      	str	r1, [r3, #12]
  tp->waend  = (void *)tdp->wend;
 8004b26:	f502 7180 	add.w	r1, r2, #256	@ 0x100
 8004b2a:	65d9      	str	r1, [r3, #92]	@ 0x5c
 8004b2c:	f103 017c 	add.w	r1, r3, #124	@ 0x7c
 8004b30:	67d9      	str	r1, [r3, #124]	@ 0x7c
  tp->wabase = (void *)tdp->wbase;
 8004b32:	4973      	ldr	r1, [pc, #460]	@ (8004d00 <main+0x770>)
 8004b34:	f8c3 10a8 	str.w	r1, [r3, #168]	@ 0xa8
  tp->waend  = (void *)tdp->wend;
 8004b38:	4972      	ldr	r1, [pc, #456]	@ (8004d04 <main+0x774>)
 8004b3a:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
  tp->name              = tdp->name;
 8004b3e:	4972      	ldr	r1, [pc, #456]	@ (8004d08 <main+0x778>)
 8004b40:	f8c3 10b4 	str.w	r1, [r3, #180]	@ 0xb4
 8004b44:	4629      	mov	r1, r5
  tp->object            = NULL;
 8004b46:	e9c3 5530 	strd	r5, r5, [r3, #192]	@ 0xc0
 8004b4a:	e9c3 551c 	strd	r5, r5, [r3, #112]	@ 0x70
 8004b4e:	e9c3 010a 	strd	r0, r1, [r3, #40]	@ 0x28
  tp->name              = tdp->name;
 8004b52:	496e      	ldr	r1, [pc, #440]	@ (8004d0c <main+0x77c>)
  PORT_SETUP_CONTEXT(tp, tp->wabase, tp->waend, tdp->funcp, tdp->arg);
 8004b54:	f8c2 50e0 	str.w	r5, [r2, #224]	@ 0xe0
  tp->name              = tdp->name;
 8004b58:	6659      	str	r1, [r3, #100]	@ 0x64
  PORT_SETUP_CONTEXT(tp, tp->wabase, tp->waend, tdp->funcp, tdp->arg);
 8004b5a:	f102 01dc 	add.w	r1, r2, #220	@ 0xdc
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
 8004b5e:	f8c3 50e4 	str.w	r5, [r3, #228]	@ 0xe4
 8004b62:	6519      	str	r1, [r3, #80]	@ 0x50
 8004b64:	496a      	ldr	r1, [pc, #424]	@ (8004d10 <main+0x780>)
  tp->epending          = (eventmask_t)0;
 8004b66:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  PORT_SETUP_CONTEXT(tp, tp->wabase, tp->waend, tdp->funcp, tdp->arg);
 8004b6a:	f8c2 10dc 	str.w	r1, [r2, #220]	@ 0xdc
 8004b6e:	4969      	ldr	r1, [pc, #420]	@ (8004d14 <main+0x784>)

  /* Initializing default OS instance.*/
  chInstanceObjectInit(&ch0, &ch_core0_cfg);

  /* It is alive now.*/
  ch_system.state = ch_sys_running;
 8004b70:	f886 e000 	strb.w	lr, [r6]
 8004b74:	f8c2 10fc 	str.w	r1, [r2, #252]	@ 0xfc
  qp->next = qp;
 8004b78:	f103 0280 	add.w	r2, r3, #128	@ 0x80
  tp->refs              = (trefs_t)1;
 8004b7c:	f883 c062 	strb.w	ip, [r3, #98]	@ 0x62
 8004b80:	f8a3 5060 	strh.w	r5, [r3, #96]	@ 0x60
  qp->prev = qp;
 8004b84:	e9c3 2220 	strd	r2, r2, [r3, #128]	@ 0x80
  p->prev->next = p;
 8004b88:	f103 0268 	add.w	r2, r3, #104	@ 0x68
  p->prev       = qp->prev;
 8004b8c:	e9c3 a91a 	strd	sl, r9, [r3, #104]	@ 0x68
  p->prev->next = p;
 8004b90:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  qp->prev      = p;
 8004b94:	635a      	str	r2, [r3, #52]	@ 0x34
  p->prev       = pqp->prev;
 8004b96:	e9c3 3311 	strd	r3, r3, [r3, #68]	@ 0x44
  pqp->prev     = p;
 8004b9a:	e9c3 bb00 	strd	fp, fp, [r3]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004b9e:	f385 8811 	msr	BASEPRI, r5
  halInit();
  chSysInit();

  // UART Debug setup
  palSetPadMode(GPIOC, GPIOC_PIN12, PAL_MODE_ALTERNATE(8)); // USART5 TX
 8004ba2:	485d      	ldr	r0, [pc, #372]	@ (8004d18 <main+0x788>)
 8004ba4:	f240 4202 	movw	r2, #1026	@ 0x402
 8004ba8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004bac:	f7fd fae8 	bl	8002180 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOD, GPIOD_PIN2,  PAL_MODE_ALTERNATE(8)); // USART5 RX
 8004bb0:	f240 4202 	movw	r2, #1026	@ 0x402
 8004bb4:	4639      	mov	r1, r7
 8004bb6:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004bba:	f7fd fae1 	bl	8002180 <_pal_lld_setgroupmode>
 8004bbe:	f388 8811 	msr	BASEPRI, r8
  if (sdp->state == SD_STOP) {
 8004bc2:	7a23      	ldrb	r3, [r4, #8]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d109      	bne.n	8004bdc <main+0x64c>
  RCC_C1->APB1LENR |= mask;
 8004bc8:	4b54      	ldr	r3, [pc, #336]	@ (8004d1c <main+0x78c>)
 8004bca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004bcc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004bd0:	649a      	str	r2, [r3, #72]	@ 0x48
    RCC_C1->APB1LLPENR |= mask;
 8004bd2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bd4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004bd8:	671a      	str	r2, [r3, #112]	@ 0x70
  (void)RCC_C1->APB1LLPENR;
 8004bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    brr = (uint32_t)((clock + config->speed/2) / config->speed);
 8004bdc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8004bde:	2640      	movs	r6, #64	@ 0x40
    brr = (uint32_t)((clock + config->speed/2) / config->speed);
 8004be0:	4b4f      	ldr	r3, [pc, #316]	@ (8004d20 <main+0x790>)
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8004be2:	2501      	movs	r5, #1
    brr = (uint32_t)((clock + config->speed/2) / config->speed);
 8004be4:	484f      	ldr	r0, [pc, #316]	@ (8004d24 <main+0x794>)
 8004be6:	4413      	add	r3, r2
  USART_TypeDef *u = sdp->usart;
 8004be8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
  u->ICR = 0xFFFFFFFFU;
 8004bea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
    brr = (uint32_t)((clock + config->speed/2) / config->speed);
 8004bee:	fba0 0303 	umull	r0, r3, r0, r3
 8004bf2:	0c9b      	lsrs	r3, r3, #18
  u->BRR = brr;
 8004bf4:	60cb      	str	r3, [r1, #12]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004bf6:	f240 132d 	movw	r3, #301	@ 0x12d
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8004bfa:	604e      	str	r6, [r1, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8004bfc:	608d      	str	r5, [r1, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004bfe:	600b      	str	r3, [r1, #0]
    sdp->state = SD_READY;
 8004c00:	2302      	movs	r3, #2
  u->ICR = 0xFFFFFFFFU;
 8004c02:	620a      	str	r2, [r1, #32]
 8004c04:	7223      	strb	r3, [r4, #8]
 8004c06:	2300      	movs	r3, #0
    sdp->rxmask = 0xFF;
 8004c08:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8004c0c:	f383 8811 	msr	BASEPRI, r3
  sdStart(&SD5, &uart5_cfg);
  chprintf(chp, "start of program...\r\n");
 8004c10:	4945      	ldr	r1, [pc, #276]	@ (8004d28 <main+0x798>)
  palSetPadMode(GPIOA, GPIOA_PIN3, PAL_STM32_MODE_OUTPUT);  // LED
  palSetPadMode(GPIOA, GPIOA_PIN4, PAL_STM32_MODE_ANALOG);  // DAC1_CH1
  palSetPadMode(GPIOA, GPIOA_PIN5, PAL_STM32_MODE_ANALOG);  // DAC1_CH2

  for (uint8_t i = 0; i < 10; i++) {
    palSetPad(GPIOA, GPIOA_PIN3);
 8004c12:	f04f 0808 	mov.w	r8, #8
  chprintf(chp, "start of program...\r\n");
 8004c16:	4845      	ldr	r0, [pc, #276]	@ (8004d2c <main+0x79c>)
  palSetPadMode(GPIOA, GPIOA_PIN5, PAL_STM32_MODE_ANALOG);  // DAC1_CH2
 8004c18:	240a      	movs	r4, #10
  chprintf(chp, "start of program...\r\n");
 8004c1a:	f7fe f8a9 	bl	8002d70 <chprintf.constprop.0>
  palSetPadMode(GPIOA, GPIOA_PIN3, PAL_STM32_MODE_OUTPUT);  // LED
 8004c1e:	4844      	ldr	r0, [pc, #272]	@ (8004d30 <main+0x7a0>)
 8004c20:	462a      	mov	r2, r5
 8004c22:	2108      	movs	r1, #8
 8004c24:	f7fd faac 	bl	8002180 <_pal_lld_setgroupmode>
    palSetPad(GPIOA, GPIOA_PIN3);
 8004c28:	46c1      	mov	r9, r8
  palSetPadMode(GPIOA, GPIOA_PIN4, PAL_STM32_MODE_ANALOG);  // DAC1_CH1
 8004c2a:	2203      	movs	r2, #3
 8004c2c:	2110      	movs	r1, #16
    palSetPad(GPIOA, GPIOA_PIN3);
 8004c2e:	4607      	mov	r7, r0
  palSetPadMode(GPIOA, GPIOA_PIN4, PAL_STM32_MODE_ANALOG);  // DAC1_CH1
 8004c30:	f7fd faa6 	bl	8002180 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, GPIOA_PIN5, PAL_STM32_MODE_ANALOG);  // DAC1_CH2
 8004c34:	2203      	movs	r2, #3
 8004c36:	2120      	movs	r1, #32
 8004c38:	f7fd faa2 	bl	8002180 <_pal_lld_setgroupmode>
 8004c3c:	2630      	movs	r6, #48	@ 0x30
    palSetPad(GPIOA, GPIOA_PIN3);
 8004c3e:	f8a7 9018 	strh.w	r9, [r7, #24]
 8004c42:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004c46:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004c4a:	2008      	movs	r0, #8
 8004c4c:	f7fd fe20 	bl	8002890 <chSchGoSleepTimeoutS>
 8004c50:	2500      	movs	r5, #0
 8004c52:	f385 8811 	msr	BASEPRI, r5
    chThdSleepMilliseconds(50);
    palClearPad(GPIOA, GPIOA_PIN3);
 8004c56:	f8a7 801a 	strh.w	r8, [r7, #26]
 8004c5a:	f386 8811 	msr	BASEPRI, r6
 8004c5e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004c62:	2008      	movs	r0, #8
 8004c64:	f7fd fe14 	bl	8002890 <chSchGoSleepTimeoutS>
 8004c68:	f385 8811 	msr	BASEPRI, r5
  for (uint8_t i = 0; i < 10; i++) {
 8004c6c:	1e63      	subs	r3, r4, #1
 8004c6e:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 8004c72:	d1e3      	bne.n	8004c3c <main+0x6ac>
    sine_table[i] = (dacsample_t)(AMPLITUDE * sinf(theta) + OFFSET);
 8004c74:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8004d34 <main+0x7a4>
 8004c78:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  for (int i = 0; i < SAMPLES; i++) {
 8004c7c:	2401      	movs	r4, #1
    sine_table[i] = (dacsample_t)(AMPLITUDE * sinf(theta) + OFFSET);
 8004c7e:	f8df a0b8 	ldr.w	sl, [pc, #184]	@ 8004d38 <main+0x7a8>
 8004c82:	4645      	mov	r5, r8
 8004c84:	f04f 498a 	mov.w	r9, #1157627904	@ 0x45000000
 8004c88:	f8a8 3000 	strh.w	r3, [r8]
    float theta = 2.0f * M_PI * i / SAMPLES;
 8004c8c:	a70c      	add	r7, pc, #48	@ (adr r7, 8004cc0 <main+0x730>)
 8004c8e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004c92:	4620      	mov	r0, r4
  for (int i = 0; i < SAMPLES; i++) {
 8004c94:	3401      	adds	r4, #1
    float theta = 2.0f * M_PI * i / SAMPLES;
 8004c96:	f7fc fe69 	bl	800196c <__aeabi_i2d>
 8004c9a:	4632      	mov	r2, r6
 8004c9c:	463b      	mov	r3, r7
 8004c9e:	f7fc fecf 	bl	8001a40 <__aeabi_dmul>
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	4b25      	ldr	r3, [pc, #148]	@ (8004d3c <main+0x7ac>)
 8004ca6:	f7fc fff5 	bl	8001c94 <__aeabi_ddiv>
 8004caa:	f7fd f8db 	bl	8001e64 <__aeabi_d2f>
    sine_table[i] = (dacsample_t)(AMPLITUDE * sinf(theta) + OFFSET);
 8004cae:	f7fb fb9d 	bl	80003ec <sinf>
 8004cb2:	4651      	mov	r1, sl
 8004cb4:	f7fc faaa 	bl	800120c <__aeabi_fmul>
 8004cb8:	4649      	mov	r1, r9
 8004cba:	f7fc fb61 	bl	8001380 <__addsf3>
 8004cbe:	e03f      	b.n	8004d40 <main+0x7b0>
 8004cc0:	54442d18 	.word	0x54442d18
 8004cc4:	401921fb 	.word	0x401921fb
 8004cc8:	240005e0 	.word	0x240005e0
 8004ccc:	240002d4 	.word	0x240002d4
 8004cd0:	24080000 	.word	0x24080000
 8004cd4:	24000164 	.word	0x24000164
 8004cd8:	24000140 	.word	0x24000140
 8004cdc:	08002331 	.word	0x08002331
 8004ce0:	080022f1 	.word	0x080022f1
 8004ce4:	240004f8 	.word	0x240004f8
 8004ce8:	080053b8 	.word	0x080053b8
 8004cec:	e000ed00 	.word	0xe000ed00
 8004cf0:	05fa0300 	.word	0x05fa0300
 8004cf4:	e0001000 	.word	0xe0001000
 8004cf8:	c5acce55 	.word	0xc5acce55
 8004cfc:	24000000 	.word	0x24000000
 8004d00:	20000400 	.word	0x20000400
 8004d04:	20000800 	.word	0x20000800
 8004d08:	0800519c 	.word	0x0800519c
 8004d0c:	080051a4 	.word	0x080051a4
 8004d10:	08002281 	.word	0x08002281
 8004d14:	080003d1 	.word	0x080003d1
 8004d18:	58020800 	.word	0x58020800
 8004d1c:	58024500 	.word	0x58024500
 8004d20:	0007a120 	.word	0x0007a120
 8004d24:	431bde83 	.word	0x431bde83
 8004d28:	0800517c 	.word	0x0800517c
 8004d2c:	24000438 	.word	0x24000438
 8004d30:	58020000 	.word	0x58020000
 8004d34:	240001ac 	.word	0x240001ac
 8004d38:	44ffe000 	.word	0x44ffe000
 8004d3c:	40590000 	.word	0x40590000
 8004d40:	f7fd f8e0 	bl	8001f04 <__aeabi_f2uiz>
  for (int i = 0; i < SAMPLES; i++) {
 8004d44:	2c64      	cmp	r4, #100	@ 0x64
    sine_table[i] = (dacsample_t)(AMPLITUDE * sinf(theta) + OFFSET);
 8004d46:	f825 0f02 	strh.w	r0, [r5, #2]!
  for (int i = 0; i < SAMPLES; i++) {
 8004d4a:	d1a2      	bne.n	8004c92 <main+0x702>
  int i = 0;
 8004d4c:	2400      	movs	r4, #0
    chThdSleepMilliseconds(50);
  }

  init_sine_table();           // generate waveform table
  dacStart(&DACD1, &dac_cfg);  // start DAC channels
 8004d4e:	4814      	ldr	r0, [pc, #80]	@ (8004da0 <main+0x810>)
    i = (i + 1) % SAMPLES;
 8004d50:	4e14      	ldr	r6, [pc, #80]	@ (8004da4 <main+0x814>)
  dacStart(&DACD1, &dac_cfg);  // start DAC channels
 8004d52:	f7fd fb1d 	bl	8002390 <dacStart.constprop.0.isra.0>
                dacp->state == DAC_COMPLETE, "invalid state");
  msg_t msg;
#if defined(DAC_LLD_ENHANCED_API)
  msg = dac_lld_put_channel(dacp, channel, sample);
#else
  dac_lld_put_channel(dacp, channel, sample);
 8004d56:	4625      	mov	r5, r4
  dacStart(&DACD2, &dac_cfg);
 8004d58:	4813      	ldr	r0, [pc, #76]	@ (8004da8 <main+0x818>)
 8004d5a:	f7fd fb19 	bl	8002390 <dacStart.constprop.0.isra.0>
 8004d5e:	f838 2014 	ldrh.w	r2, [r8, r4, lsl #1]
 8004d62:	2100      	movs	r1, #0
 8004d64:	480e      	ldr	r0, [pc, #56]	@ (8004da0 <main+0x810>)
 8004d66:	f7fd f9e3 	bl	8002130 <dac_lld_put_channel>
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	480e      	ldr	r0, [pc, #56]	@ (8004da8 <main+0x818>)
 8004d6e:	f7fd f9df 	bl	8002130 <dac_lld_put_channel>
    i = (i + 1) % SAMPLES;
 8004d72:	1c63      	adds	r3, r4, #1
  for (volatile uint32_t i = 0; i < (us * 10); i++) {
 8004d74:	9502      	str	r5, [sp, #8]
    i = (i + 1) % SAMPLES;
 8004d76:	2164      	movs	r1, #100	@ 0x64
 8004d78:	fb86 2003 	smull	r2, r0, r6, r3
 8004d7c:	17dc      	asrs	r4, r3, #31
  for (volatile uint32_t i = 0; i < (us * 10); i++) {
 8004d7e:	9a02      	ldr	r2, [sp, #8]
    i = (i + 1) % SAMPLES;
 8004d80:	ebc4 1460 	rsb	r4, r4, r0, asr #5
  for (volatile uint32_t i = 0; i < (us * 10); i++) {
 8004d84:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
    i = (i + 1) % SAMPLES;
 8004d88:	fb01 3414 	mls	r4, r1, r4, r3
  for (volatile uint32_t i = 0; i < (us * 10); i++) {
 8004d8c:	d2e7      	bcs.n	8004d5e <main+0x7ce>
    __asm__ volatile ("nop");
 8004d8e:	bf00      	nop
  for (volatile uint32_t i = 0; i < (us * 10); i++) {
 8004d90:	9b02      	ldr	r3, [sp, #8]
 8004d92:	3301      	adds	r3, #1
 8004d94:	9302      	str	r3, [sp, #8]
 8004d96:	9b02      	ldr	r3, [sp, #8]
 8004d98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d9c:	d3f7      	bcc.n	8004d8e <main+0x7fe>
 8004d9e:	e7de      	b.n	8004d5e <main+0x7ce>
 8004da0:	240002a4 	.word	0x240002a4
 8004da4:	51eb851f 	.word	0x51eb851f
 8004da8:	24000274 	.word	0x24000274
